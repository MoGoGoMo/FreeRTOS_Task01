ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.main,"ax",%progbits
  18              		.align	1
  19              		.global	main
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	main:
  27              	.LFB130:
  28              		.file 1 "User/main.c"
   1:User/main.c   **** /**
   2:User/main.c   ****   ******************************************************************************
   3:User/main.c   ****   * @file    Project/STM32F4xx_StdPeriph_Templates/main.c 
   4:User/main.c   ****   * @author  MCD Application Team
   5:User/main.c   ****   * @version V1.8.0
   6:User/main.c   ****   * @date    04-November-2016
   7:User/main.c   ****   * @brief   Main program body
   8:User/main.c   ****   ******************************************************************************
   9:User/main.c   ****   * @attention
  10:User/main.c   ****   *
  11:User/main.c   ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  12:User/main.c   ****   *
  13:User/main.c   ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:User/main.c   ****   * You may not use this file except in compliance with the License.
  15:User/main.c   ****   * You may obtain a copy of the License at:
  16:User/main.c   ****   *
  17:User/main.c   ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:User/main.c   ****   *
  19:User/main.c   ****   * Unless required by applicable law or agreed to in writing, software 
  20:User/main.c   ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:User/main.c   ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:User/main.c   ****   * See the License for the specific language governing permissions and
  23:User/main.c   ****   * limitations under the License.
  24:User/main.c   ****   *
  25:User/main.c   ****   ******************************************************************************
  26:User/main.c   ****   */
  27:User/main.c   **** 
  28:User/main.c   **** /* Includes ------------------------------------------------------------------*/
  29:User/main.c   **** #include "main.h"
  30:User/main.c   **** #include "task.h"
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 2


  31:User/main.c   **** 
  32:User/main.c   **** /** @addtogroup Template_Project
  33:User/main.c   ****   * @{
  34:User/main.c   ****   */ 
  35:User/main.c   **** 
  36:User/main.c   **** /* Private typedef -----------------------------------------------------------*/
  37:User/main.c   **** /* Private define ------------------------------------------------------------*/
  38:User/main.c   **** #define mainFLASH_TASK_PRIORITY             ( tskIDLE_PRIORITY + 1UL )
  39:User/main.c   **** #define mainButton_TASK_PRIORITY            ( tskIDLE_PRIORITY + 2UL )
  40:User/main.c   **** /* Private macro -------------------------------------------------------------*/
  41:User/main.c   **** /* Private variables ---------------------------------------------------------*/
  42:User/main.c   **** 
  43:User/main.c   **** /* Private function prototypes -----------------------------------------------*/
  44:User/main.c   **** static void prvLedFlashTask(void *pvParameters);
  45:User/main.c   **** static void prvButtonPressedTask(void *pvParameters);
  46:User/main.c   **** 
  47:User/main.c   **** /* Private functions ---------------------------------------------------------*/
  48:User/main.c   **** void vApplicationTickHook(void);
  49:User/main.c   **** void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName );
  50:User/main.c   **** void vApplicationIdleHook(void);
  51:User/main.c   **** void vApplicationMallocFailedHook(void);
  52:User/main.c   **** 
  53:User/main.c   **** 
  54:User/main.c   **** /**
  55:User/main.c   ****   * @brief  Main program
  56:User/main.c   ****   * @param  None
  57:User/main.c   ****   * @retval None
  58:User/main.c   ****   */
  59:User/main.c   **** int main(void)
  60:User/main.c   **** {
  29              		.loc 1 60 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 00B5     		push	{lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 14, -4
  38 0002 85B0     		sub	sp, sp, #20
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  61:User/main.c   ****   // GPIO_InitTypeDef GPIO_InitStructure;
  62:User/main.c   ****   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
  41              		.loc 1 62 3 view .LVU1
  42 0004 4FF44070 		mov	r0, #768
  43 0008 FFF7FEFF 		bl	NVIC_PriorityGroupConfig
  44              	.LVL0:
  63:User/main.c   ****   DISABLE_INT();  
  45              		.loc 1 63 3 view .LVU2
  46 000c FFF7FEFF 		bl	vPortEnterCritical
  47              	.LVL1:
  64:User/main.c   ****   // __set_PRIMASK(1);
  65:User/main.c   ****  
  66:User/main.c   ****  /*!< At this stage the microcontroller clock setting is already configured, 
  67:User/main.c   ****        this is done through SystemInit() function which is called from startup
  68:User/main.c   ****        files before to branch to application main.
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 3


  69:User/main.c   ****        To reconfigure the default setting of SystemInit() function, 
  70:User/main.c   ****        refer to system_stm32f4xx.c file */
  71:User/main.c   **** 
  72:User/main.c   ****   RCC_ClocksTypeDef RCC_Clocks;
  48              		.loc 1 72 3 view .LVU3
  73:User/main.c   ****   /* SysTick end of count event each 10ms */
  74:User/main.c   ****   RCC_GetClocksFreq(&RCC_Clocks);
  49              		.loc 1 74 3 view .LVU4
  50 0010 6846     		mov	r0, sp
  51 0012 FFF7FEFF 		bl	RCC_GetClocksFreq
  52              	.LVL2:
  75:User/main.c   **** 
  76:User/main.c   ****   bsp_Init();
  53              		.loc 1 76 3 view .LVU5
  54 0016 FFF7FEFF 		bl	bsp_Init
  55              	.LVL3:
  77:User/main.c   ****   printf("\r\n ** SYSCLK:%ld\r\n    PCLK1:%ld     PCLK2:%ld\r\n", RCC_Clocks.SYSCLK_Frequency, RCC_
  56              		.loc 1 77 3 view .LVU6
  57 001a 039B     		ldr	r3, [sp, #12]
  58 001c 029A     		ldr	r2, [sp, #8]
  59 001e 0099     		ldr	r1, [sp]
  60 0020 0148     		ldr	r0, .L4
  61 0022 FFF7FEFF 		bl	printf_
  62              	.LVL4:
  63              	.L2:
  78:User/main.c   **** 
  79:User/main.c   ****   /* Infinite loop */
  80:User/main.c   ****   while (1)
  64              		.loc 1 80 3 discriminator 1 view .LVU7
  81:User/main.c   ****   {
  82:User/main.c   ****   }
  65              		.loc 1 82 3 discriminator 1 view .LVU8
  66 0026 FEE7     		b	.L2
  67              	.L5:
  68              		.align	2
  69              	.L4:
  70 0028 00000000 		.word	.LC0
  71              		.cfi_endproc
  72              	.LFE130:
  74              		.section	.text.vApplicationTickHook,"ax",%progbits
  75              		.align	1
  76              		.global	vApplicationTickHook
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu fpv4-sp-d16
  82              	vApplicationTickHook:
  83              	.LFB131:
  83:User/main.c   **** }
  84:User/main.c   **** 
  85:User/main.c   **** void vApplicationTickHook( void )
  86:User/main.c   **** {
  84              		.loc 1 86 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 4


  87:User/main.c   **** }
  89              		.loc 1 87 1 view .LVU10
  90 0000 7047     		bx	lr
  91              		.cfi_endproc
  92              	.LFE131:
  94              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  95              		.align	1
  96              		.global	vApplicationStackOverflowHook
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	vApplicationStackOverflowHook:
 103              	.LVL5:
 104              	.LFB132:
  88:User/main.c   **** 
  89:User/main.c   **** void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
  90:User/main.c   **** {
 105              		.loc 1 90 1 view -0
 106              		.cfi_startproc
 107              		@ Volatile: function does not return.
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
  91:User/main.c   ****   ( void ) pcTaskName;
 111              		.loc 1 91 3 view .LVU12
  92:User/main.c   ****   ( void ) pxTask;
 112              		.loc 1 92 3 view .LVU13
  93:User/main.c   **** 
  94:User/main.c   ****   /* Run time stack overflow checking is performed if
  95:User/main.c   ****   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
  96:User/main.c   ****   function is called if a stack overflow is detected. */
  97:User/main.c   ****   taskDISABLE_INTERRUPTS();
 113              		.loc 1 97 3 view .LVU14
 114              	.LBB6:
 115              	.LBI6:
 116              		.file 2 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 5


  21:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 6


  78:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 7


 135:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - ucPort
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 8


 192:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 206:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 207:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 208:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 117              		.loc 2 211 30 view .LVU15
 118              	.LBB7:
 212:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 119              		.loc 2 213 1 view .LVU16
 214:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 120              		.loc 2 215 2 view .LVU17
 121              		.syntax unified
 122              	@ 215 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 123 0000 4FF05003 			mov r3, #80												
 124 0004 83F31188 		msr basepri, r3											
 125 0008 BFF36F8F 		isb														
 126 000c BFF34F8F 		dsb														
 127              	
 128              	@ 0 "" 2
 129              	.LVL6:
 130              		.thumb
 131              		.syntax unified
 132              	.L8:
 133              		.loc 2 215 2 is_stmt 0 view .LVU18
 134              	.LBE7:
 135              	.LBE6:
  98:User/main.c   ****   for( ;; );
 136              		.loc 1 98 3 is_stmt 1 discriminator 1 view .LVU19
 137              		.loc 1 98 12 discriminator 1 view .LVU20
 138 0010 FEE7     		b	.L8
 139              		.cfi_endproc
 140              	.LFE132:
 142              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 143              		.align	1
 144              		.global	vApplicationMallocFailedHook
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	vApplicationMallocFailedHook:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 9


 151              	.LFB133:
  99:User/main.c   **** }
 100:User/main.c   **** 
 101:User/main.c   **** void vApplicationMallocFailedHook( void )
 102:User/main.c   **** {
 152              		.loc 1 102 1 view -0
 153              		.cfi_startproc
 154              		@ Volatile: function does not return.
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 103:User/main.c   ****   /* vApplicationMallocFailedHook() will only be called if
 104:User/main.c   ****   configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
 105:User/main.c   ****   function that will get called if a call to pvPortMalloc() fails.
 106:User/main.c   ****   pvPortMalloc() is called internally by the kernel whenever a task, queue,
 107:User/main.c   ****   timer or semaphore is created.  It is also called by various parts of the
 108:User/main.c   ****   demo application.  If heap_1.c or heap_2.c are used, then the size of the
 109:User/main.c   ****   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 110:User/main.c   ****   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 111:User/main.c   ****   to query the size of free heap space that remains (although it does not
 112:User/main.c   ****   provide information on how the remaining heap might be fragmented). */
 113:User/main.c   ****   taskDISABLE_INTERRUPTS();
 158              		.loc 1 113 3 view .LVU22
 159              	.LBB8:
 160              	.LBI8:
 211:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** {
 161              		.loc 2 211 30 view .LVU23
 162              	.LBB9:
 213:FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h **** 
 163              		.loc 2 213 1 view .LVU24
 164              		.loc 2 215 2 view .LVU25
 165              		.syntax unified
 166              	@ 215 "FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h" 1
 167 0000 4FF05003 			mov r3, #80												
 168 0004 83F31188 		msr basepri, r3											
 169 0008 BFF36F8F 		isb														
 170 000c BFF34F8F 		dsb														
 171              	
 172              	@ 0 "" 2
 173              	.LVL7:
 174              		.thumb
 175              		.syntax unified
 176              	.L10:
 177              		.loc 2 215 2 is_stmt 0 view .LVU26
 178              	.LBE9:
 179              	.LBE8:
 114:User/main.c   ****   for( ;; );
 180              		.loc 1 114 3 is_stmt 1 discriminator 1 view .LVU27
 181              		.loc 1 114 12 discriminator 1 view .LVU28
 182 0010 FEE7     		b	.L10
 183              		.cfi_endproc
 184              	.LFE133:
 186              		.section	.text.vApplicationIdleHook,"ax",%progbits
 187              		.align	1
 188              		.global	vApplicationIdleHook
 189              		.syntax unified
 190              		.thumb
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 10


 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	vApplicationIdleHook:
 195              	.LFB134:
 115:User/main.c   **** }
 116:User/main.c   **** 
 117:User/main.c   **** void vApplicationIdleHook( void )
 118:User/main.c   **** {
 196              		.loc 1 118 1 view -0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 119:User/main.c   ****   /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
 120:User/main.c   ****   to 1 in FreeRTOSConfig.h.  It will be called on each iteration of the idle
 121:User/main.c   ****   task.  It is essential that code added to this hook function never attempts
 122:User/main.c   ****   to block in any way (for example, call xQueueReceive() with a block time
 123:User/main.c   ****   specified, or call vTaskDelay()).  If the application makes use of the
 124:User/main.c   ****   vTaskDelete() API function (as this demo application does) then it is also
 125:User/main.c   ****   important that vApplicationIdleHook() is permitted to return to its calling
 126:User/main.c   ****   function, because it is the responsibility of the idle task to clean up
 127:User/main.c   ****   memory allocated by the kernel to any task that has since been deleted. */
 128:User/main.c   **** }
 201              		.loc 1 128 1 view .LVU30
 202 0000 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE134:
 206              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 207              		.align	2
 208              	.LC0:
 209 0000 0D0A202A 		.ascii	"\015\012 ** SYSCLK:%ld\015\012    PCLK1:%ld     PCL"
 209      2A205359 
 209      53434C4B 
 209      3A256C64 
 209      0D0A2020 
 210 0027 4B323A25 		.ascii	"K2:%ld\015\012\000"
 210      6C640D0A 
 210      00
 211              		.text
 212              	.Letext0:
 213              		.file 3 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 214              		.file 4 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 215              		.file 5 "Libraries/CMSIS/Include/core_cm4.h"
 216              		.file 6 "Libraries/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 217              		.file 7 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 218              		.file 8 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 219              		.file 9 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 220              		.file 10 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eab
 221              		.file 11 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/includ
 222              		.file 12 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/includ
 223              		.file 13 "User/FreeRTOSConfig.h"
 224              		.file 14 "FreeRTOS/include/task.h"
 225              		.file 15 "Libraries/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 226              		.file 16 "bsp/bsp.h"
 227              		.file 17 "bsp/inc/printf.h"
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:18     .text.main:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:26     .text.main:0000000000000000 main
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:70     .text.main:0000000000000028 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:75     .text.vApplicationTickHook:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:82     .text.vApplicationTickHook:0000000000000000 vApplicationTickHook
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:95     .text.vApplicationStackOverflowHook:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:102    .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:143    .text.vApplicationMallocFailedHook:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:150    .text.vApplicationMallocFailedHook:0000000000000000 vApplicationMallocFailedHook
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:187    .text.vApplicationIdleHook:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:194    .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccb7JM92.s:207    .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
NVIC_PriorityGroupConfig
vPortEnterCritical
RCC_GetClocksFreq
bsp_Init
printf_
