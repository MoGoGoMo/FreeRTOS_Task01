ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"printf.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._out_buffer,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_out_buffer:
  26              	.LVL0:
  27              	.LFB130:
  28              		.file 1 "bsp/src/printf.c"
   1:bsp/src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
   2:bsp/src/printf.c **** // \author (c) Marco Paland (info@paland.com)
   3:bsp/src/printf.c **** //             2014-2019, PALANDesign Hannover, Germany
   4:bsp/src/printf.c **** //
   5:bsp/src/printf.c **** // \license The MIT License (MIT)
   6:bsp/src/printf.c **** //
   7:bsp/src/printf.c **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   8:bsp/src/printf.c **** // of this software and associated documentation files (the "Software"), to deal
   9:bsp/src/printf.c **** // in the Software without restriction, including without limitation the rights
  10:bsp/src/printf.c **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:bsp/src/printf.c **** // copies of the Software, and to permit persons to whom the Software is
  12:bsp/src/printf.c **** // furnished to do so, subject to the following conditions:
  13:bsp/src/printf.c **** //
  14:bsp/src/printf.c **** // The above copyright notice and this permission notice shall be included in
  15:bsp/src/printf.c **** // all copies or substantial portions of the Software.
  16:bsp/src/printf.c **** //
  17:bsp/src/printf.c **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:bsp/src/printf.c **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:bsp/src/printf.c **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:bsp/src/printf.c **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:bsp/src/printf.c **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:bsp/src/printf.c **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:bsp/src/printf.c **** // THE SOFTWARE.
  24:bsp/src/printf.c **** //
  25:bsp/src/printf.c **** // \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on
  26:bsp/src/printf.c **** //        embedded systems with a very limited resources. These routines are thread
  27:bsp/src/printf.c **** //        safe and reentrant!
  28:bsp/src/printf.c **** //        Use this instead of the bloated standard/newlib printf cause these use
  29:bsp/src/printf.c **** //        malloc for printf (and may not be thread safe).
  30:bsp/src/printf.c **** //
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 2


  31:bsp/src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  32:bsp/src/printf.c **** 
  33:bsp/src/printf.c **** #include <stdbool.h>
  34:bsp/src/printf.c **** #include <stdint.h>
  35:bsp/src/printf.c **** 
  36:bsp/src/printf.c **** #include "printf.h"
  37:bsp/src/printf.c **** 
  38:bsp/src/printf.c **** 
  39:bsp/src/printf.c **** // define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
  40:bsp/src/printf.c **** // printf_config.h header file
  41:bsp/src/printf.c **** // default: undefined
  42:bsp/src/printf.c **** #ifdef PRINTF_INCLUDE_CONFIG_H
  43:bsp/src/printf.c **** #include "printf_config.h"
  44:bsp/src/printf.c **** #endif
  45:bsp/src/printf.c **** 
  46:bsp/src/printf.c **** 
  47:bsp/src/printf.c **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  48:bsp/src/printf.c **** // numeric number including padded zeros (dynamically created on stack)
  49:bsp/src/printf.c **** // default: 32 byte
  50:bsp/src/printf.c **** #ifndef PRINTF_NTOA_BUFFER_SIZE
  51:bsp/src/printf.c **** #define PRINTF_NTOA_BUFFER_SIZE    32U
  52:bsp/src/printf.c **** #endif
  53:bsp/src/printf.c **** 
  54:bsp/src/printf.c **** // 'ftoa' conversion buffer size, this must be big enough to hold one converted
  55:bsp/src/printf.c **** // float number including padded zeros (dynamically created on stack)
  56:bsp/src/printf.c **** // default: 32 byte
  57:bsp/src/printf.c **** #ifndef PRINTF_FTOA_BUFFER_SIZE
  58:bsp/src/printf.c **** #define PRINTF_FTOA_BUFFER_SIZE    32U
  59:bsp/src/printf.c **** #endif
  60:bsp/src/printf.c **** 
  61:bsp/src/printf.c **** // support for the floating point type (%f)
  62:bsp/src/printf.c **** // default: activated
  63:bsp/src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_FLOAT
  64:bsp/src/printf.c **** #define PRINTF_SUPPORT_FLOAT
  65:bsp/src/printf.c **** #endif
  66:bsp/src/printf.c **** 
  67:bsp/src/printf.c **** // support for exponential floating point notation (%e/%g)
  68:bsp/src/printf.c **** // default: activated
  69:bsp/src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL
  70:bsp/src/printf.c **** #define PRINTF_SUPPORT_EXPONENTIAL
  71:bsp/src/printf.c **** #endif
  72:bsp/src/printf.c **** 
  73:bsp/src/printf.c **** // define the default floating point precision
  74:bsp/src/printf.c **** // default: 6 digits
  75:bsp/src/printf.c **** #ifndef PRINTF_DEFAULT_FLOAT_PRECISION
  76:bsp/src/printf.c **** #define PRINTF_DEFAULT_FLOAT_PRECISION  6U
  77:bsp/src/printf.c **** #endif
  78:bsp/src/printf.c **** 
  79:bsp/src/printf.c **** // define the largest float suitable to print with %f
  80:bsp/src/printf.c **** // default: 1e9
  81:bsp/src/printf.c **** #ifndef PRINTF_MAX_FLOAT
  82:bsp/src/printf.c **** #define PRINTF_MAX_FLOAT  1e9
  83:bsp/src/printf.c **** #endif
  84:bsp/src/printf.c **** 
  85:bsp/src/printf.c **** // support for the long long types (%llu or %p)
  86:bsp/src/printf.c **** // default: activated
  87:bsp/src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 3


  88:bsp/src/printf.c **** #define PRINTF_SUPPORT_LONG_LONG
  89:bsp/src/printf.c **** #endif
  90:bsp/src/printf.c **** 
  91:bsp/src/printf.c **** // support for the ptrdiff_t type (%t)
  92:bsp/src/printf.c **** // ptrdiff_t is normally defined in <stddef.h> as long or long long type
  93:bsp/src/printf.c **** // default: activated
  94:bsp/src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
  95:bsp/src/printf.c **** #define PRINTF_SUPPORT_PTRDIFF_T
  96:bsp/src/printf.c **** #endif
  97:bsp/src/printf.c **** 
  98:bsp/src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  99:bsp/src/printf.c **** 
 100:bsp/src/printf.c **** // internal flag definitions
 101:bsp/src/printf.c **** #define FLAGS_ZEROPAD   (1U <<  0U)
 102:bsp/src/printf.c **** #define FLAGS_LEFT      (1U <<  1U)
 103:bsp/src/printf.c **** #define FLAGS_PLUS      (1U <<  2U)
 104:bsp/src/printf.c **** #define FLAGS_SPACE     (1U <<  3U)
 105:bsp/src/printf.c **** #define FLAGS_HASH      (1U <<  4U)
 106:bsp/src/printf.c **** #define FLAGS_UPPERCASE (1U <<  5U)
 107:bsp/src/printf.c **** #define FLAGS_CHAR      (1U <<  6U)
 108:bsp/src/printf.c **** #define FLAGS_SHORT     (1U <<  7U)
 109:bsp/src/printf.c **** #define FLAGS_LONG      (1U <<  8U)
 110:bsp/src/printf.c **** #define FLAGS_LONG_LONG (1U <<  9U)
 111:bsp/src/printf.c **** #define FLAGS_PRECISION (1U << 10U)
 112:bsp/src/printf.c **** #define FLAGS_ADAPT_EXP (1U << 11U)
 113:bsp/src/printf.c **** 
 114:bsp/src/printf.c **** 
 115:bsp/src/printf.c **** // import float.h for DBL_MAX
 116:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 117:bsp/src/printf.c **** #include <float.h>
 118:bsp/src/printf.c **** #endif
 119:bsp/src/printf.c **** 
 120:bsp/src/printf.c **** 
 121:bsp/src/printf.c **** // output function type
 122:bsp/src/printf.c **** typedef void (*out_fct_type)(char character, void* buffer, size_t idx, size_t maxlen);
 123:bsp/src/printf.c **** 
 124:bsp/src/printf.c **** 
 125:bsp/src/printf.c **** // wrapper (used as buffer) for output function type
 126:bsp/src/printf.c **** typedef struct {
 127:bsp/src/printf.c ****   void  (*fct)(char character, void* arg);
 128:bsp/src/printf.c ****   void* arg;
 129:bsp/src/printf.c **** } out_fct_wrap_type;
 130:bsp/src/printf.c **** 
 131:bsp/src/printf.c **** 
 132:bsp/src/printf.c **** // internal buffer output
 133:bsp/src/printf.c **** static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
 134:bsp/src/printf.c **** {
  29              		.loc 1 134 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 135:bsp/src/printf.c ****   if (idx < maxlen) {
  34              		.loc 1 135 3 view .LVU1
  35              		.loc 1 135 6 is_stmt 0 view .LVU2
  36 0000 9A42     		cmp	r2, r3
  37 0002 00D2     		bcs	.L1
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 4


 136:bsp/src/printf.c ****     ((char*)buffer)[idx] = character;
  38              		.loc 1 136 5 is_stmt 1 view .LVU3
  39              		.loc 1 136 26 is_stmt 0 view .LVU4
  40 0004 8854     		strb	r0, [r1, r2]
  41              	.L1:
 137:bsp/src/printf.c ****   }
 138:bsp/src/printf.c **** }
  42              		.loc 1 138 1 view .LVU5
  43 0006 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE130:
  47              		.section	.text._out_null,"ax",%progbits
  48              		.align	1
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu fpv4-sp-d16
  54              	_out_null:
  55              	.LVL1:
  56              	.LFB131:
 139:bsp/src/printf.c **** 
 140:bsp/src/printf.c **** 
 141:bsp/src/printf.c **** // internal null output
 142:bsp/src/printf.c **** static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
 143:bsp/src/printf.c **** {
  57              		.loc 1 143 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 144:bsp/src/printf.c ****   (void)character; (void)buffer; (void)idx; (void)maxlen;
  62              		.loc 1 144 3 view .LVU7
  63              		.loc 1 144 20 view .LVU8
  64              		.loc 1 144 34 view .LVU9
  65              		.loc 1 144 45 view .LVU10
 145:bsp/src/printf.c **** }
  66              		.loc 1 145 1 is_stmt 0 view .LVU11
  67 0000 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE131:
  71              		.section	.text._out_fct,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu fpv4-sp-d16
  78              	_out_fct:
  79              	.LVL2:
  80              	.LFB133:
 146:bsp/src/printf.c **** 
 147:bsp/src/printf.c **** 
 148:bsp/src/printf.c **** // internal _putchar wrapper
 149:bsp/src/printf.c **** static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
 150:bsp/src/printf.c **** {
 151:bsp/src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 152:bsp/src/printf.c ****   if (character) {
 153:bsp/src/printf.c ****     _putchar(character);
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 5


 154:bsp/src/printf.c ****   }
 155:bsp/src/printf.c **** }
 156:bsp/src/printf.c **** 
 157:bsp/src/printf.c **** 
 158:bsp/src/printf.c **** // internal output function wrapper
 159:bsp/src/printf.c **** static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
 160:bsp/src/printf.c **** {
  81              		.loc 1 160 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
 161:bsp/src/printf.c ****   (void)idx; (void)maxlen;
  85              		.loc 1 161 3 view .LVU13
  86              		.loc 1 161 14 view .LVU14
 162:bsp/src/printf.c ****   if (character) {
  87              		.loc 1 162 3 view .LVU15
  88              		.loc 1 162 6 is_stmt 0 view .LVU16
  89 0000 20B1     		cbz	r0, .L7
 160:bsp/src/printf.c ****   (void)idx; (void)maxlen;
  90              		.loc 1 160 1 view .LVU17
  91 0002 08B5     		push	{r3, lr}
  92              	.LCFI0:
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 3, -8
  95              		.cfi_offset 14, -4
 163:bsp/src/printf.c ****     // buffer is the output fct pointer
 164:bsp/src/printf.c ****     ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
  96              		.loc 1 164 5 is_stmt 1 view .LVU18
  97              		.loc 1 164 33 is_stmt 0 view .LVU19
  98 0004 0B68     		ldr	r3, [r1]
  99              	.LVL3:
 100              		.loc 1 164 6 view .LVU20
 101 0006 4968     		ldr	r1, [r1, #4]
 102              	.LVL4:
 103              		.loc 1 164 6 view .LVU21
 104 0008 9847     		blx	r3
 105              	.LVL5:
 165:bsp/src/printf.c ****   }
 166:bsp/src/printf.c **** }
 106              		.loc 1 166 1 view .LVU22
 107 000a 08BD     		pop	{r3, pc}
 108              	.LVL6:
 109              	.L7:
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 0
 112              		.cfi_restore 3
 113              		.cfi_restore 14
 114              		.loc 1 166 1 view .LVU23
 115 000c 7047     		bx	lr
 116              		.cfi_endproc
 117              	.LFE133:
 119              		.section	.text._atoi,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 6


 126              	_atoi:
 127              	.LVL7:
 128              	.LFB136:
 167:bsp/src/printf.c **** 
 168:bsp/src/printf.c **** 
 169:bsp/src/printf.c **** // internal secure strlen
 170:bsp/src/printf.c **** // \return The length of the string (excluding the terminating 0) limited by 'maxsize'
 171:bsp/src/printf.c **** static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
 172:bsp/src/printf.c **** {
 173:bsp/src/printf.c ****   const char* s;
 174:bsp/src/printf.c ****   for (s = str; *s && maxsize--; ++s);
 175:bsp/src/printf.c ****   return (unsigned int)(s - str);
 176:bsp/src/printf.c **** }
 177:bsp/src/printf.c **** 
 178:bsp/src/printf.c **** 
 179:bsp/src/printf.c **** // internal test if char is a digit (0-9)
 180:bsp/src/printf.c **** // \return true if char is a digit
 181:bsp/src/printf.c **** static inline bool _is_digit(char ch)
 182:bsp/src/printf.c **** {
 183:bsp/src/printf.c ****   return (ch >= '0') && (ch <= '9');
 184:bsp/src/printf.c **** }
 185:bsp/src/printf.c **** 
 186:bsp/src/printf.c **** 
 187:bsp/src/printf.c **** // internal ASCII string to unsigned int conversion
 188:bsp/src/printf.c **** static unsigned int _atoi(const char** str)
 189:bsp/src/printf.c **** {
 129              		.loc 1 189 1 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 190:bsp/src/printf.c ****   unsigned int i = 0U;
 134              		.loc 1 190 3 view .LVU25
 191:bsp/src/printf.c ****   while (_is_digit(**str)) {
 135              		.loc 1 191 3 view .LVU26
 190:bsp/src/printf.c ****   unsigned int i = 0U;
 136              		.loc 1 190 16 is_stmt 0 view .LVU27
 137 0000 0023     		movs	r3, #0
 138              	.LVL8:
 139              	.L11:
 140              		.loc 1 191 21 view .LVU28
 141 0002 0168     		ldr	r1, [r0]
 142              		.loc 1 191 10 view .LVU29
 143 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 144              	.LVL9:
 145              	.LBB20:
 146              	.LBI20:
 181:bsp/src/printf.c **** {
 147              		.loc 1 181 20 is_stmt 1 view .LVU30
 148              	.LBB21:
 183:bsp/src/printf.c **** }
 149              		.loc 1 183 3 view .LVU31
 183:bsp/src/printf.c **** }
 150              		.loc 1 183 22 is_stmt 0 view .LVU32
 151 0006 303A     		subs	r2, r2, #48
 152              	.LVL10:
 183:bsp/src/printf.c **** }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 7


 153              		.loc 1 183 22 view .LVU33
 154 0008 D2B2     		uxtb	r2, r2
 155              	.LVL11:
 183:bsp/src/printf.c **** }
 156              		.loc 1 183 22 view .LVU34
 157              	.LBE21:
 158              	.LBE20:
 159              		.loc 1 191 9 view .LVU35
 160 000a 092A     		cmp	r2, #9
 161 000c 08D8     		bhi	.L13
 192:bsp/src/printf.c ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 162              		.loc 1 192 5 is_stmt 1 view .LVU36
 163              		.loc 1 192 11 is_stmt 0 view .LVU37
 164 000e 03EB8303 		add	r3, r3, r3, lsl #2
 165              	.LVL12:
 166              		.loc 1 192 11 view .LVU38
 167 0012 5A00     		lsls	r2, r3, #1
 168              		.loc 1 192 42 view .LVU39
 169 0014 4B1C     		adds	r3, r1, #1
 170 0016 0360     		str	r3, [r0]
 171              		.loc 1 192 34 view .LVU40
 172 0018 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 173              		.loc 1 192 17 view .LVU41
 174 001a 1344     		add	r3, r3, r2
 175              		.loc 1 192 7 view .LVU42
 176 001c 303B     		subs	r3, r3, #48
 177              	.LVL13:
 178              		.loc 1 192 7 view .LVU43
 179 001e F0E7     		b	.L11
 180              	.L13:
 193:bsp/src/printf.c ****   }
 194:bsp/src/printf.c ****   return i;
 181              		.loc 1 194 3 is_stmt 1 view .LVU44
 195:bsp/src/printf.c **** }
 182              		.loc 1 195 1 is_stmt 0 view .LVU45
 183 0020 1846     		mov	r0, r3
 184              	.LVL14:
 185              		.loc 1 195 1 view .LVU46
 186 0022 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE136:
 190              		.section	.text._out_rev,"ax",%progbits
 191              		.align	1
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv4-sp-d16
 197              	_out_rev:
 198              	.LVL15:
 199              	.LFB137:
 196:bsp/src/printf.c **** 
 197:bsp/src/printf.c **** 
 198:bsp/src/printf.c **** // output the specified string in reverse, taking care of any zero-padding
 199:bsp/src/printf.c **** static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, 
 200:bsp/src/printf.c **** {
 200              		.loc 1 200 1 is_stmt 1 view -0
 201              		.cfi_startproc
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 8


 202              		@ args = 16, pretend = 0, frame = 8
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		.loc 1 200 1 is_stmt 0 view .LVU48
 205 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 206              	.LCFI2:
 207              		.cfi_def_cfa_offset 36
 208              		.cfi_offset 4, -36
 209              		.cfi_offset 5, -32
 210              		.cfi_offset 6, -28
 211              		.cfi_offset 7, -24
 212              		.cfi_offset 8, -20
 213              		.cfi_offset 9, -16
 214              		.cfi_offset 10, -12
 215              		.cfi_offset 11, -8
 216              		.cfi_offset 14, -4
 217 0004 83B0     		sub	sp, sp, #12
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 48
 220 0006 0546     		mov	r5, r0
 221 0008 0191     		str	r1, [sp, #4]
 222 000a 9346     		mov	fp, r2
 223 000c 1E46     		mov	r6, r3
 224 000e DDF83090 		ldr	r9, [sp, #48]
 225 0012 0D9C     		ldr	r4, [sp, #52]
 226 0014 DDF83880 		ldr	r8, [sp, #56]
 201:bsp/src/printf.c ****   const size_t start_idx = idx;
 227              		.loc 1 201 3 is_stmt 1 view .LVU49
 228              	.LVL16:
 202:bsp/src/printf.c **** 
 203:bsp/src/printf.c ****   // pad spaces up to given width
 204:bsp/src/printf.c ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 229              		.loc 1 204 3 view .LVU50
 230              		.loc 1 204 6 is_stmt 0 view .LVU51
 231 0018 0F9B     		ldr	r3, [sp, #60]
 232              	.LVL17:
 233              		.loc 1 204 6 view .LVU52
 234 001a 13F0030F 		tst	r3, #3
 235 001e 09D0     		beq	.L23
 236              	.LVL18:
 237              	.L16:
 205:bsp/src/printf.c ****     for (size_t i = len; i < width; i++) {
 206:bsp/src/printf.c ****       out(' ', buffer, idx++, maxlen);
 207:bsp/src/printf.c ****     }
 208:bsp/src/printf.c ****   }
 209:bsp/src/printf.c **** 
 210:bsp/src/printf.c ****   // reverse string
 211:bsp/src/printf.c ****   while (len) {
 238              		.loc 1 211 9 view .LVU53
 239 0020 A4B1     		cbz	r4, .L26
 212:bsp/src/printf.c ****     out(buf[--len], buffer, idx++, maxlen);
 240              		.loc 1 212 5 is_stmt 1 view .LVU54
 241 0022 013C     		subs	r4, r4, #1
 242              	.LVL19:
 243              		.loc 1 212 5 is_stmt 0 view .LVU55
 244 0024 571C     		adds	r7, r2, #1
 245              	.LVL20:
 246              		.loc 1 212 5 view .LVU56
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 9


 247 0026 3346     		mov	r3, r6
 248 0028 0199     		ldr	r1, [sp, #4]
 249 002a 19F80400 		ldrb	r0, [r9, r4]	@ zero_extendqisi2
 250 002e A847     		blx	r5
 251              	.LVL21:
 252 0030 3A46     		mov	r2, r7
 253 0032 F5E7     		b	.L16
 254              	.LVL22:
 255              	.L23:
 256              	.LBB22:
 205:bsp/src/printf.c ****     for (size_t i = len; i < width; i++) {
 257              		.loc 1 205 17 view .LVU57
 258 0034 2746     		mov	r7, r4
 259              	.LVL23:
 260              	.L15:
 205:bsp/src/printf.c ****     for (size_t i = len; i < width; i++) {
 261              		.loc 1 205 5 discriminator 1 view .LVU58
 262 0036 4745     		cmp	r7, r8
 263 0038 F2D2     		bcs	.L16
 206:bsp/src/printf.c ****     }
 264              		.loc 1 206 7 is_stmt 1 discriminator 3 view .LVU59
 265 003a 02F1010A 		add	r10, r2, #1
 266              	.LVL24:
 206:bsp/src/printf.c ****     }
 267              		.loc 1 206 7 is_stmt 0 discriminator 3 view .LVU60
 268 003e 3346     		mov	r3, r6
 269 0040 0199     		ldr	r1, [sp, #4]
 270 0042 2020     		movs	r0, #32
 271 0044 A847     		blx	r5
 272              	.LVL25:
 205:bsp/src/printf.c ****     for (size_t i = len; i < width; i++) {
 273              		.loc 1 205 38 discriminator 3 view .LVU61
 274 0046 0137     		adds	r7, r7, #1
 275              	.LVL26:
 206:bsp/src/printf.c ****     }
 276              		.loc 1 206 7 discriminator 3 view .LVU62
 277 0048 5246     		mov	r2, r10
 278 004a F4E7     		b	.L15
 279              	.LVL27:
 280              	.L26:
 206:bsp/src/printf.c ****     }
 281              		.loc 1 206 7 discriminator 3 view .LVU63
 282              	.LBE22:
 213:bsp/src/printf.c ****   }
 214:bsp/src/printf.c **** 
 215:bsp/src/printf.c ****   // append pad spaces up to given width
 216:bsp/src/printf.c ****   if (flags & FLAGS_LEFT) {
 283              		.loc 1 216 3 is_stmt 1 view .LVU64
 284              		.loc 1 216 6 is_stmt 0 view .LVU65
 285 004c 0F9B     		ldr	r3, [sp, #60]
 286 004e 13F0020F 		tst	r3, #2
 287 0052 03D1     		bne	.L20
 288              	.LVL28:
 289              	.L14:
 217:bsp/src/printf.c ****     while (idx - start_idx < width) {
 218:bsp/src/printf.c ****       out(' ', buffer, idx++, maxlen);
 219:bsp/src/printf.c ****     }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 10


 220:bsp/src/printf.c ****   }
 221:bsp/src/printf.c **** 
 222:bsp/src/printf.c ****   return idx;
 223:bsp/src/printf.c **** }
 290              		.loc 1 223 1 view .LVU66
 291 0054 1046     		mov	r0, r2
 292 0056 03B0     		add	sp, sp, #12
 293              	.LCFI4:
 294              		.cfi_remember_state
 295              		.cfi_def_cfa_offset 36
 296              		@ sp needed
 297 0058 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 298              	.LVL29:
 299              	.L20:
 300              	.LCFI5:
 301              		.cfi_restore_state
 217:bsp/src/printf.c ****     while (idx - start_idx < width) {
 302              		.loc 1 217 16 view .LVU67
 303 005c A2EB0B03 		sub	r3, r2, fp
 217:bsp/src/printf.c ****     while (idx - start_idx < width) {
 304              		.loc 1 217 11 view .LVU68
 305 0060 4345     		cmp	r3, r8
 306 0062 F7D2     		bcs	.L14
 218:bsp/src/printf.c ****     }
 307              		.loc 1 218 7 is_stmt 1 view .LVU69
 308 0064 541C     		adds	r4, r2, #1
 309              	.LVL30:
 218:bsp/src/printf.c ****     }
 310              		.loc 1 218 7 is_stmt 0 view .LVU70
 311 0066 3346     		mov	r3, r6
 312 0068 0199     		ldr	r1, [sp, #4]
 313 006a 2020     		movs	r0, #32
 314 006c A847     		blx	r5
 315              	.LVL31:
 316 006e 2246     		mov	r2, r4
 317 0070 F4E7     		b	.L20
 318              		.cfi_endproc
 319              	.LFE137:
 321              		.section	.text._ntoa_format,"ax",%progbits
 322              		.align	1
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv4-sp-d16
 328              	_ntoa_format:
 329              	.LVL32:
 330              	.LFB138:
 224:bsp/src/printf.c **** 
 225:bsp/src/printf.c **** 
 226:bsp/src/printf.c **** // internal itoa format
 227:bsp/src/printf.c **** static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, si
 228:bsp/src/printf.c **** {
 331              		.loc 1 228 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 28, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		.loc 1 228 1 is_stmt 0 view .LVU72
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 11


 336 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 28
 339              		.cfi_offset 4, -28
 340              		.cfi_offset 5, -24
 341              		.cfi_offset 6, -20
 342              		.cfi_offset 7, -16
 343              		.cfi_offset 8, -12
 344              		.cfi_offset 9, -8
 345              		.cfi_offset 14, -4
 346 0004 85B0     		sub	sp, sp, #20
 347              	.LCFI7:
 348              		.cfi_def_cfa_offset 48
 349 0006 0C9D     		ldr	r5, [sp, #48]
 350 0008 0D9C     		ldr	r4, [sp, #52]
 351 000a 9DF83890 		ldrb	r9, [sp, #56]	@ zero_extendqisi2
 352 000e DDF83C80 		ldr	r8, [sp, #60]
 353 0012 DDF840E0 		ldr	lr, [sp, #64]
 354 0016 DDF844C0 		ldr	ip, [sp, #68]
 355 001a 129E     		ldr	r6, [sp, #72]
 229:bsp/src/printf.c ****   // pad leading zeros
 230:bsp/src/printf.c ****   if (!(flags & FLAGS_LEFT)) {
 356              		.loc 1 230 3 is_stmt 1 view .LVU73
 357              		.loc 1 230 6 is_stmt 0 view .LVU74
 358 001c 16F0020F 		tst	r6, #2
 359 0020 1FD1     		bne	.L28
 231:bsp/src/printf.c ****     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 360              		.loc 1 231 5 is_stmt 1 view .LVU75
 361              		.loc 1 231 8 is_stmt 0 view .LVU76
 362 0022 BCF1000F 		cmp	ip, #0
 363 0026 0AD0     		beq	.L31
 364              		.loc 1 231 15 discriminator 1 view .LVU77
 365 0028 16F0010F 		tst	r6, #1
 366 002c 07D0     		beq	.L31
 367              		.loc 1 231 42 discriminator 2 view .LVU78
 368 002e B9F1000F 		cmp	r9, #0
 369 0032 02D1     		bne	.L30
 370              		.loc 1 231 55 discriminator 3 view .LVU79
 371 0034 16F00C0F 		tst	r6, #12
 372 0038 01D0     		beq	.L31
 373              	.L30:
 232:bsp/src/printf.c ****       width--;
 374              		.loc 1 232 7 is_stmt 1 view .LVU80
 375              		.loc 1 232 12 is_stmt 0 view .LVU81
 376 003a 0CF1FF3C 		add	ip, ip, #-1
 377              	.LVL33:
 378              	.L31:
 233:bsp/src/printf.c ****     }
 234:bsp/src/printf.c ****     while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 379              		.loc 1 234 11 view .LVU82
 380 003e 7445     		cmp	r4, lr
 381 0040 08D2     		bcs	.L34
 382              		.loc 1 234 25 discriminator 1 view .LVU83
 383 0042 1F2C     		cmp	r4, #31
 384 0044 06D8     		bhi	.L34
 235:bsp/src/printf.c ****       buf[len++] = '0';
 385              		.loc 1 235 7 is_stmt 1 view .LVU84
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 12


 386              	.LVL34:
 387              		.loc 1 235 18 is_stmt 0 view .LVU85
 388 0046 3027     		movs	r7, #48
 389 0048 2F55     		strb	r7, [r5, r4]
 390              		.loc 1 235 14 view .LVU86
 391 004a 0134     		adds	r4, r4, #1
 392              	.LVL35:
 393              		.loc 1 235 14 view .LVU87
 394 004c F7E7     		b	.L31
 395              	.L35:
 236:bsp/src/printf.c ****     }
 237:bsp/src/printf.c ****     while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 238:bsp/src/printf.c ****       buf[len++] = '0';
 396              		.loc 1 238 7 is_stmt 1 view .LVU88
 397              	.LVL36:
 398              		.loc 1 238 18 is_stmt 0 view .LVU89
 399 004e 3027     		movs	r7, #48
 400 0050 2F55     		strb	r7, [r5, r4]
 401              		.loc 1 238 14 view .LVU90
 402 0052 0134     		adds	r4, r4, #1
 403              	.LVL37:
 404              	.L34:
 237:bsp/src/printf.c ****       buf[len++] = '0';
 405              		.loc 1 237 11 view .LVU91
 406 0054 16F0010F 		tst	r6, #1
 407 0058 03D0     		beq	.L28
 237:bsp/src/printf.c ****       buf[len++] = '0';
 408              		.loc 1 237 36 discriminator 1 view .LVU92
 409 005a 6445     		cmp	r4, ip
 410 005c 01D2     		bcs	.L28
 237:bsp/src/printf.c ****       buf[len++] = '0';
 411              		.loc 1 237 53 discriminator 2 view .LVU93
 412 005e 1F2C     		cmp	r4, #31
 413 0060 F5D9     		bls	.L35
 414              	.LVL38:
 415              	.L28:
 239:bsp/src/printf.c ****     }
 240:bsp/src/printf.c ****   }
 241:bsp/src/printf.c **** 
 242:bsp/src/printf.c ****   // handle hash
 243:bsp/src/printf.c ****   if (flags & FLAGS_HASH) {
 416              		.loc 1 243 3 is_stmt 1 view .LVU94
 417              		.loc 1 243 6 is_stmt 0 view .LVU95
 418 0062 16F0100F 		tst	r6, #16
 419 0066 15D0     		beq	.L36
 244:bsp/src/printf.c ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 420              		.loc 1 244 5 is_stmt 1 view .LVU96
 421              		.loc 1 244 8 is_stmt 0 view .LVU97
 422 0068 16F4806F 		tst	r6, #1024
 423 006c 04D1     		bne	.L37
 424              		.loc 1 244 36 discriminator 1 view .LVU98
 425 006e 1CB1     		cbz	r4, .L37
 426              		.loc 1 244 43 discriminator 2 view .LVU99
 427 0070 7445     		cmp	r4, lr
 428 0072 21D0     		beq	.L38
 429              		.loc 1 244 61 discriminator 3 view .LVU100
 430 0074 6445     		cmp	r4, ip
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 13


 431 0076 1FD0     		beq	.L38
 432              	.L37:
 245:bsp/src/printf.c ****       len--;
 246:bsp/src/printf.c ****       if (len && (base == 16U)) {
 247:bsp/src/printf.c ****         len--;
 248:bsp/src/printf.c ****       }
 249:bsp/src/printf.c ****     }
 250:bsp/src/printf.c ****     if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 433              		.loc 1 250 5 is_stmt 1 view .LVU101
 434              		.loc 1 250 8 is_stmt 0 view .LVU102
 435 0078 B8F1100F 		cmp	r8, #16
 436 007c 27D0     		beq	.L48
 437              	.L39:
 251:bsp/src/printf.c ****       buf[len++] = 'x';
 252:bsp/src/printf.c ****     }
 253:bsp/src/printf.c ****     else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 438              		.loc 1 253 10 is_stmt 1 view .LVU103
 439              		.loc 1 253 13 is_stmt 0 view .LVU104
 440 007e B8F1100F 		cmp	r8, #16
 441 0082 2DD0     		beq	.L49
 442              	.L41:
 254:bsp/src/printf.c ****       buf[len++] = 'X';
 255:bsp/src/printf.c ****     }
 256:bsp/src/printf.c ****     else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 443              		.loc 1 256 10 is_stmt 1 view .LVU105
 444              		.loc 1 256 13 is_stmt 0 view .LVU106
 445 0084 B8F1020F 		cmp	r8, #2
 446 0088 33D0     		beq	.L50
 447              	.L40:
 257:bsp/src/printf.c ****       buf[len++] = 'b';
 258:bsp/src/printf.c ****     }
 259:bsp/src/printf.c ****     if (len < PRINTF_NTOA_BUFFER_SIZE) {
 448              		.loc 1 259 5 is_stmt 1 view .LVU107
 449              		.loc 1 259 8 is_stmt 0 view .LVU108
 450 008a 1F2C     		cmp	r4, #31
 451 008c 02D8     		bhi	.L36
 260:bsp/src/printf.c ****       buf[len++] = '0';
 452              		.loc 1 260 7 is_stmt 1 view .LVU109
 453              	.LVL39:
 454              		.loc 1 260 18 is_stmt 0 view .LVU110
 455 008e 3027     		movs	r7, #48
 456 0090 2F55     		strb	r7, [r5, r4]
 457              		.loc 1 260 14 view .LVU111
 458 0092 0134     		adds	r4, r4, #1
 459              	.LVL40:
 460              	.L36:
 261:bsp/src/printf.c ****     }
 262:bsp/src/printf.c ****   }
 263:bsp/src/printf.c **** 
 264:bsp/src/printf.c ****   if (len < PRINTF_NTOA_BUFFER_SIZE) {
 461              		.loc 1 264 3 is_stmt 1 view .LVU112
 462              		.loc 1 264 6 is_stmt 0 view .LVU113
 463 0094 1F2C     		cmp	r4, #31
 464 0096 05D8     		bhi	.L42
 265:bsp/src/printf.c ****     if (negative) {
 465              		.loc 1 265 5 is_stmt 1 view .LVU114
 466              		.loc 1 265 8 is_stmt 0 view .LVU115
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 14


 467 0098 B9F1000F 		cmp	r9, #0
 468 009c 2FD0     		beq	.L43
 266:bsp/src/printf.c ****       buf[len++] = '-';
 469              		.loc 1 266 7 is_stmt 1 view .LVU116
 470              	.LVL41:
 471              		.loc 1 266 18 is_stmt 0 view .LVU117
 472 009e 2D27     		movs	r7, #45
 473 00a0 2F55     		strb	r7, [r5, r4]
 474              		.loc 1 266 14 view .LVU118
 475 00a2 0134     		adds	r4, r4, #1
 476              	.LVL42:
 477              	.L42:
 267:bsp/src/printf.c ****     }
 268:bsp/src/printf.c ****     else if (flags & FLAGS_PLUS) {
 269:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 270:bsp/src/printf.c ****     }
 271:bsp/src/printf.c ****     else if (flags & FLAGS_SPACE) {
 272:bsp/src/printf.c ****       buf[len++] = ' ';
 273:bsp/src/printf.c ****     }
 274:bsp/src/printf.c ****   }
 275:bsp/src/printf.c **** 
 276:bsp/src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 478              		.loc 1 276 3 is_stmt 1 view .LVU119
 479              		.loc 1 276 10 is_stmt 0 view .LVU120
 480 00a4 0396     		str	r6, [sp, #12]
 481 00a6 CDF808C0 		str	ip, [sp, #8]
 482 00aa 0194     		str	r4, [sp, #4]
 483 00ac 0095     		str	r5, [sp]
 484 00ae FFF7FEFF 		bl	_out_rev
 485              	.LVL43:
 277:bsp/src/printf.c **** }
 486              		.loc 1 277 1 view .LVU121
 487 00b2 05B0     		add	sp, sp, #20
 488              	.LCFI8:
 489              		.cfi_remember_state
 490              		.cfi_def_cfa_offset 28
 491              		@ sp needed
 492 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 493              	.LVL44:
 494              	.L38:
 495              	.LCFI9:
 496              		.cfi_restore_state
 245:bsp/src/printf.c ****       if (len && (base == 16U)) {
 497              		.loc 1 245 7 is_stmt 1 view .LVU122
 246:bsp/src/printf.c ****         len--;
 498              		.loc 1 246 7 view .LVU123
 246:bsp/src/printf.c ****         len--;
 499              		.loc 1 246 10 is_stmt 0 view .LVU124
 500 00b8 671E     		subs	r7, r4, #1
 501              	.LVL45:
 246:bsp/src/printf.c ****         len--;
 502              		.loc 1 246 10 view .LVU125
 503 00ba 06D0     		beq	.L45
 246:bsp/src/printf.c ****         len--;
 504              		.loc 1 246 15 discriminator 1 view .LVU126
 505 00bc B8F1100F 		cmp	r8, #16
 506 00c0 01D0     		beq	.L51
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 15


 245:bsp/src/printf.c ****       if (len && (base == 16U)) {
 507              		.loc 1 245 10 view .LVU127
 508 00c2 3C46     		mov	r4, r7
 509 00c4 D8E7     		b	.L37
 510              	.L51:
 247:bsp/src/printf.c ****       }
 511              		.loc 1 247 9 is_stmt 1 view .LVU128
 247:bsp/src/printf.c ****       }
 512              		.loc 1 247 12 is_stmt 0 view .LVU129
 513 00c6 023C     		subs	r4, r4, #2
 514              	.LVL46:
 247:bsp/src/printf.c ****       }
 515              		.loc 1 247 12 view .LVU130
 516 00c8 D6E7     		b	.L37
 517              	.LVL47:
 518              	.L45:
 245:bsp/src/printf.c ****       if (len && (base == 16U)) {
 519              		.loc 1 245 10 view .LVU131
 520 00ca 3C46     		mov	r4, r7
 521 00cc D4E7     		b	.L37
 522              	.LVL48:
 523              	.L48:
 250:bsp/src/printf.c ****       buf[len++] = 'x';
 524              		.loc 1 250 23 discriminator 1 view .LVU132
 525 00ce 16F0200F 		tst	r6, #32
 526 00d2 D4D1     		bne	.L39
 250:bsp/src/printf.c ****       buf[len++] = 'x';
 527              		.loc 1 250 53 discriminator 2 view .LVU133
 528 00d4 1F2C     		cmp	r4, #31
 529 00d6 D2D8     		bhi	.L39
 251:bsp/src/printf.c ****     }
 530              		.loc 1 251 7 is_stmt 1 view .LVU134
 531              	.LVL49:
 251:bsp/src/printf.c ****     }
 532              		.loc 1 251 18 is_stmt 0 view .LVU135
 533 00d8 7827     		movs	r7, #120
 534 00da 2F55     		strb	r7, [r5, r4]
 251:bsp/src/printf.c ****     }
 535              		.loc 1 251 14 view .LVU136
 536 00dc 0134     		adds	r4, r4, #1
 537              	.LVL50:
 251:bsp/src/printf.c ****     }
 538              		.loc 1 251 18 view .LVU137
 539 00de D4E7     		b	.L40
 540              	.L49:
 253:bsp/src/printf.c ****       buf[len++] = 'X';
 541              		.loc 1 253 28 discriminator 1 view .LVU138
 542 00e0 16F0200F 		tst	r6, #32
 543 00e4 CED0     		beq	.L41
 253:bsp/src/printf.c ****       buf[len++] = 'X';
 544              		.loc 1 253 57 discriminator 2 view .LVU139
 545 00e6 1F2C     		cmp	r4, #31
 546 00e8 CCD8     		bhi	.L41
 254:bsp/src/printf.c ****     }
 547              		.loc 1 254 7 is_stmt 1 view .LVU140
 548              	.LVL51:
 254:bsp/src/printf.c ****     }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 16


 549              		.loc 1 254 18 is_stmt 0 view .LVU141
 550 00ea 5827     		movs	r7, #88
 551 00ec 2F55     		strb	r7, [r5, r4]
 254:bsp/src/printf.c ****     }
 552              		.loc 1 254 14 view .LVU142
 553 00ee 0134     		adds	r4, r4, #1
 554              	.LVL52:
 254:bsp/src/printf.c ****     }
 555              		.loc 1 254 18 view .LVU143
 556 00f0 CBE7     		b	.L40
 557              	.L50:
 256:bsp/src/printf.c ****       buf[len++] = 'b';
 558              		.loc 1 256 27 discriminator 1 view .LVU144
 559 00f2 1F2C     		cmp	r4, #31
 560 00f4 C9D8     		bhi	.L40
 257:bsp/src/printf.c ****     }
 561              		.loc 1 257 7 is_stmt 1 view .LVU145
 562              	.LVL53:
 257:bsp/src/printf.c ****     }
 563              		.loc 1 257 18 is_stmt 0 view .LVU146
 564 00f6 6227     		movs	r7, #98
 565 00f8 2F55     		strb	r7, [r5, r4]
 257:bsp/src/printf.c ****     }
 566              		.loc 1 257 14 view .LVU147
 567 00fa 0134     		adds	r4, r4, #1
 568              	.LVL54:
 257:bsp/src/printf.c ****     }
 569              		.loc 1 257 14 view .LVU148
 570 00fc C5E7     		b	.L40
 571              	.L43:
 268:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 572              		.loc 1 268 10 is_stmt 1 view .LVU149
 268:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 573              		.loc 1 268 13 is_stmt 0 view .LVU150
 574 00fe 16F0040F 		tst	r6, #4
 575 0102 03D0     		beq	.L44
 269:bsp/src/printf.c ****     }
 576              		.loc 1 269 7 is_stmt 1 view .LVU151
 577              	.LVL55:
 269:bsp/src/printf.c ****     }
 578              		.loc 1 269 18 is_stmt 0 view .LVU152
 579 0104 2B27     		movs	r7, #43
 580 0106 2F55     		strb	r7, [r5, r4]
 269:bsp/src/printf.c ****     }
 581              		.loc 1 269 14 view .LVU153
 582 0108 0134     		adds	r4, r4, #1
 583              	.LVL56:
 269:bsp/src/printf.c ****     }
 584              		.loc 1 269 14 view .LVU154
 585 010a CBE7     		b	.L42
 586              	.L44:
 271:bsp/src/printf.c ****       buf[len++] = ' ';
 587              		.loc 1 271 10 is_stmt 1 view .LVU155
 271:bsp/src/printf.c ****       buf[len++] = ' ';
 588              		.loc 1 271 13 is_stmt 0 view .LVU156
 589 010c 16F0080F 		tst	r6, #8
 590 0110 C8D0     		beq	.L42
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 17


 272:bsp/src/printf.c ****     }
 591              		.loc 1 272 7 is_stmt 1 view .LVU157
 592              	.LVL57:
 272:bsp/src/printf.c ****     }
 593              		.loc 1 272 18 is_stmt 0 view .LVU158
 594 0112 2027     		movs	r7, #32
 595 0114 2F55     		strb	r7, [r5, r4]
 272:bsp/src/printf.c ****     }
 596              		.loc 1 272 14 view .LVU159
 597 0116 0134     		adds	r4, r4, #1
 598              	.LVL58:
 272:bsp/src/printf.c ****     }
 599              		.loc 1 272 14 view .LVU160
 600 0118 C4E7     		b	.L42
 601              		.cfi_endproc
 602              	.LFE138:
 604              		.section	.text._ntoa_long,"ax",%progbits
 605              		.align	1
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu fpv4-sp-d16
 611              	_ntoa_long:
 612              	.LVL59:
 613              	.LFB139:
 278:bsp/src/printf.c **** 
 279:bsp/src/printf.c **** 
 280:bsp/src/printf.c **** // internal itoa for 'long' type
 281:bsp/src/printf.c **** static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long v
 282:bsp/src/printf.c **** {
 614              		.loc 1 282 1 is_stmt 1 view -0
 615              		.cfi_startproc
 616              		@ args = 24, pretend = 0, frame = 32
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		.loc 1 282 1 is_stmt 0 view .LVU162
 619 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 620              	.LCFI10:
 621              		.cfi_def_cfa_offset 24
 622              		.cfi_offset 4, -24
 623              		.cfi_offset 5, -20
 624              		.cfi_offset 6, -16
 625              		.cfi_offset 7, -12
 626              		.cfi_offset 8, -8
 627              		.cfi_offset 14, -4
 628 0004 90B0     		sub	sp, sp, #64
 629              	.LCFI11:
 630              		.cfi_def_cfa_offset 88
 631 0006 169D     		ldr	r5, [sp, #88]
 632 0008 189F     		ldr	r7, [sp, #96]
 633 000a DDF86CC0 		ldr	ip, [sp, #108]
 283:bsp/src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 634              		.loc 1 283 3 is_stmt 1 view .LVU163
 284:bsp/src/printf.c ****   size_t len = 0U;
 635              		.loc 1 284 3 view .LVU164
 636              	.LVL60:
 285:bsp/src/printf.c **** 
 286:bsp/src/printf.c ****   // no hash for 0 values
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 18


 287:bsp/src/printf.c ****   if (!value) {
 637              		.loc 1 287 3 view .LVU165
 638              		.loc 1 287 6 is_stmt 0 view .LVU166
 639 000e 0DB9     		cbnz	r5, .L53
 288:bsp/src/printf.c ****     flags &= ~FLAGS_HASH;
 640              		.loc 1 288 5 is_stmt 1 view .LVU167
 641              		.loc 1 288 11 is_stmt 0 view .LVU168
 642 0010 2CF0100C 		bic	ip, ip, #16
 643              	.LVL61:
 644              	.L53:
 289:bsp/src/printf.c ****   }
 290:bsp/src/printf.c **** 
 291:bsp/src/printf.c ****   // write if precision != 0 and value is != 0
 292:bsp/src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
 645              		.loc 1 292 3 is_stmt 1 view .LVU169
 646              		.loc 1 292 6 is_stmt 0 view .LVU170
 647 0014 1CF48066 		ands	r6, ip, #1024
 648 0018 1BD0     		beq	.L59
 649              		.loc 1 292 34 discriminator 1 view .LVU171
 650 001a 3DB3     		cbz	r5, .L60
 651 001c 0026     		movs	r6, #0
 652 001e 18E0     		b	.L59
 653              	.LVL62:
 654              	.L56:
 655              	.LBB23:
 293:bsp/src/printf.c ****     do {
 294:bsp/src/printf.c ****       const char digit = (char)(value % base);
 295:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 656              		.loc 1 295 85 discriminator 2 view .LVU172
 657 0020 1CF0200F 		tst	ip, #32
 658 0024 1FD0     		beq	.L61
 659              		.loc 1 295 85 view .LVU173
 660 0026 4FF0410E 		mov	lr, #65
 661              	.L58:
 662              		.loc 1 295 85 discriminator 7 view .LVU174
 663 002a 7444     		add	r4, r4, lr
 664              	.LVL63:
 665              		.loc 1 295 85 discriminator 7 view .LVU175
 666 002c E4B2     		uxtb	r4, r4
 667              		.loc 1 295 18 discriminator 7 view .LVU176
 668 002e 0A3C     		subs	r4, r4, #10
 669 0030 E4B2     		uxtb	r4, r4
 670              	.L57:
 671              		.loc 1 295 14 discriminator 8 view .LVU177
 672 0032 06F1010E 		add	lr, r6, #1
 673              	.LVL64:
 674              		.loc 1 295 18 discriminator 8 view .LVU178
 675 0036 0DF14008 		add	r8, sp, #64
 676 003a 4644     		add	r6, r6, r8
 677 003c 06F8204C 		strb	r4, [r6, #-32]
 296:bsp/src/printf.c ****       value /= base;
 678              		.loc 1 296 7 is_stmt 1 discriminator 8 view .LVU179
 679              		.loc 1 296 13 is_stmt 0 discriminator 8 view .LVU180
 680 0040 B5FBF7F4 		udiv	r4, r5, r7
 681              	.LVL65:
 682              		.loc 1 296 13 discriminator 8 view .LVU181
 683              	.LBE23:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 19


 297:bsp/src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 684              		.loc 1 297 5 discriminator 8 view .LVU182
 685 0044 BD42     		cmp	r5, r7
 686 0046 13D3     		bcc	.L55
 687              		.loc 1 297 20 discriminator 1 view .LVU183
 688 0048 BEF11F0F 		cmp	lr, #31
 689 004c 10D8     		bhi	.L55
 690              	.LBB24:
 295:bsp/src/printf.c ****       value /= base;
 691              		.loc 1 295 14 view .LVU184
 692 004e 7646     		mov	r6, lr
 296:bsp/src/printf.c ****       value /= base;
 693              		.loc 1 296 13 view .LVU185
 694 0050 2546     		mov	r5, r4
 695              	.LVL66:
 696              	.L59:
 296:bsp/src/printf.c ****       value /= base;
 697              		.loc 1 296 13 view .LVU186
 698              	.LBE24:
 293:bsp/src/printf.c ****       const char digit = (char)(value % base);
 699              		.loc 1 293 5 is_stmt 1 view .LVU187
 700              	.LBB25:
 294:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 701              		.loc 1 294 7 view .LVU188
 294:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 702              		.loc 1 294 39 is_stmt 0 view .LVU189
 703 0052 B5FBF7F4 		udiv	r4, r5, r7
 704 0056 07FB1454 		mls	r4, r7, r4, r5
 294:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 705              		.loc 1 294 18 view .LVU190
 706 005a E4B2     		uxtb	r4, r4
 707              	.LVL67:
 295:bsp/src/printf.c ****       value /= base;
 708              		.loc 1 295 7 is_stmt 1 view .LVU191
 295:bsp/src/printf.c ****       value /= base;
 709              		.loc 1 295 18 is_stmt 0 view .LVU192
 710 005c 092C     		cmp	r4, #9
 711 005e DFD8     		bhi	.L56
 295:bsp/src/printf.c ****       value /= base;
 712              		.loc 1 295 18 discriminator 1 view .LVU193
 713 0060 3034     		adds	r4, r4, #48
 714              	.LVL68:
 295:bsp/src/printf.c ****       value /= base;
 715              		.loc 1 295 18 discriminator 1 view .LVU194
 716 0062 E4B2     		uxtb	r4, r4
 717              	.LVL69:
 295:bsp/src/printf.c ****       value /= base;
 718              		.loc 1 295 18 discriminator 1 view .LVU195
 719 0064 E5E7     		b	.L57
 720              	.LVL70:
 721              	.L61:
 295:bsp/src/printf.c ****       value /= base;
 722              		.loc 1 295 85 view .LVU196
 723 0066 4FF0610E 		mov	lr, #97
 724 006a DEE7     		b	.L58
 725              	.LVL71:
 726              	.L60:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 20


 295:bsp/src/printf.c ****       value /= base;
 727              		.loc 1 295 85 view .LVU197
 728              	.LBE25:
 284:bsp/src/printf.c **** 
 729              		.loc 1 284 10 view .LVU198
 730 006c 4FF0000E 		mov	lr, #0
 731              	.LVL72:
 732              	.L55:
 298:bsp/src/printf.c ****   }
 299:bsp/src/printf.c **** 
 300:bsp/src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 733              		.loc 1 300 3 is_stmt 1 view .LVU199
 734              		.loc 1 300 10 is_stmt 0 view .LVU200
 735 0070 CDF818C0 		str	ip, [sp, #24]
 736 0074 1A9C     		ldr	r4, [sp, #104]
 737 0076 0594     		str	r4, [sp, #20]
 738 0078 199C     		ldr	r4, [sp, #100]
 739 007a 0494     		str	r4, [sp, #16]
 740 007c 0397     		str	r7, [sp, #12]
 741 007e 9DF85C40 		ldrb	r4, [sp, #92]	@ zero_extendqisi2
 742 0082 0294     		str	r4, [sp, #8]
 743 0084 CDF804E0 		str	lr, [sp, #4]
 744 0088 08AC     		add	r4, sp, #32
 745 008a 0094     		str	r4, [sp]
 746 008c FFF7FEFF 		bl	_ntoa_format
 747              	.LVL73:
 301:bsp/src/printf.c **** }
 748              		.loc 1 301 1 view .LVU201
 749 0090 10B0     		add	sp, sp, #64
 750              	.LCFI12:
 751              		.cfi_def_cfa_offset 24
 752              		@ sp needed
 753 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 754              		.loc 1 301 1 view .LVU202
 755              		.cfi_endproc
 756              	.LFE139:
 758              		.global	__aeabi_uldivmod
 759              		.section	.text._ntoa_long_long,"ax",%progbits
 760              		.align	1
 761              		.syntax unified
 762              		.thumb
 763              		.thumb_func
 764              		.fpu fpv4-sp-d16
 766              	_ntoa_long_long:
 767              	.LVL74:
 768              	.LFB140:
 302:bsp/src/printf.c **** 
 303:bsp/src/printf.c **** 
 304:bsp/src/printf.c **** // internal itoa for 'long long' type
 305:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 306:bsp/src/printf.c **** static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned l
 307:bsp/src/printf.c **** {
 769              		.loc 1 307 1 is_stmt 1 view -0
 770              		.cfi_startproc
 771              		@ args = 36, pretend = 0, frame = 48
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		.loc 1 307 1 is_stmt 0 view .LVU204
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 21


 774 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 775              	.LCFI13:
 776              		.cfi_def_cfa_offset 36
 777              		.cfi_offset 4, -36
 778              		.cfi_offset 5, -32
 779              		.cfi_offset 6, -28
 780              		.cfi_offset 7, -24
 781              		.cfi_offset 8, -20
 782              		.cfi_offset 9, -16
 783              		.cfi_offset 10, -12
 784              		.cfi_offset 11, -8
 785              		.cfi_offset 14, -4
 786 0004 95B0     		sub	sp, sp, #84
 787              	.LCFI14:
 788              		.cfi_def_cfa_offset 120
 789 0006 0990     		str	r0, [sp, #36]
 790 0008 0A91     		str	r1, [sp, #40]
 791 000a 0B92     		str	r2, [sp, #44]
 792 000c 9B46     		mov	fp, r3
 793 000e DDE91E45 		ldrd	r4, [sp, #120]
 794 0012 DDE92289 		ldrd	r8, [sp, #136]
 795 0016 DDF898A0 		ldr	r10, [sp, #152]
 308:bsp/src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 796              		.loc 1 308 3 is_stmt 1 view .LVU205
 309:bsp/src/printf.c ****   size_t len = 0U;
 797              		.loc 1 309 3 view .LVU206
 798              	.LVL75:
 310:bsp/src/printf.c **** 
 311:bsp/src/printf.c ****   // no hash for 0 values
 312:bsp/src/printf.c ****   if (!value) {
 799              		.loc 1 312 3 view .LVU207
 800              		.loc 1 312 6 is_stmt 0 view .LVU208
 801 001a 54EA0503 		orrs	r3, r4, r5
 802              	.LVL76:
 803              		.loc 1 312 6 view .LVU209
 804 001e 01D1     		bne	.L65
 313:bsp/src/printf.c ****     flags &= ~FLAGS_HASH;
 805              		.loc 1 313 5 is_stmt 1 view .LVU210
 806              		.loc 1 313 11 is_stmt 0 view .LVU211
 807 0020 2AF0100A 		bic	r10, r10, #16
 808              	.LVL77:
 809              	.L65:
 314:bsp/src/printf.c ****   }
 315:bsp/src/printf.c **** 
 316:bsp/src/printf.c ****   // write if precision != 0 and value is != 0
 317:bsp/src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
 810              		.loc 1 317 3 is_stmt 1 view .LVU212
 811              		.loc 1 317 6 is_stmt 0 view .LVU213
 812 0024 1AF48066 		ands	r6, r10, #1024
 813 0028 20D0     		beq	.L71
 814              		.loc 1 317 34 discriminator 1 view .LVU214
 815 002a 54EA0503 		orrs	r3, r4, r5
 816 002e 2BD0     		beq	.L72
 817 0030 0026     		movs	r6, #0
 818 0032 1BE0     		b	.L71
 819              	.LVL78:
 820              	.L68:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 22


 821              	.LBB26:
 318:bsp/src/printf.c ****     do {
 319:bsp/src/printf.c ****       const char digit = (char)(value % base);
 320:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 822              		.loc 1 320 85 discriminator 2 view .LVU215
 823 0034 1AF0200F 		tst	r10, #32
 824 0038 24D0     		beq	.L73
 825              		.loc 1 320 85 view .LVU216
 826 003a 4123     		movs	r3, #65
 827              	.L70:
 828              		.loc 1 320 85 discriminator 7 view .LVU217
 829 003c 1A44     		add	r2, r2, r3
 830              	.LVL79:
 831              		.loc 1 320 85 discriminator 7 view .LVU218
 832 003e D2B2     		uxtb	r2, r2
 833              		.loc 1 320 18 discriminator 7 view .LVU219
 834 0040 0A3A     		subs	r2, r2, #10
 835 0042 D2B2     		uxtb	r2, r2
 836              	.L69:
 837              		.loc 1 320 14 discriminator 8 view .LVU220
 838 0044 771C     		adds	r7, r6, #1
 839              	.LVL80:
 840              		.loc 1 320 18 discriminator 8 view .LVU221
 841 0046 14AB     		add	r3, sp, #80
 842 0048 1E44     		add	r6, r6, r3
 843 004a 06F8202C 		strb	r2, [r6, #-32]
 321:bsp/src/printf.c ****       value /= base;
 844              		.loc 1 321 7 is_stmt 1 discriminator 8 view .LVU222
 845              		.loc 1 321 13 is_stmt 0 discriminator 8 view .LVU223
 846 004e 4246     		mov	r2, r8
 847 0050 4B46     		mov	r3, r9
 848 0052 2046     		mov	r0, r4
 849 0054 2946     		mov	r1, r5
 850 0056 FFF7FEFF 		bl	__aeabi_uldivmod
 851              	.LVL81:
 852              		.loc 1 321 13 discriminator 8 view .LVU224
 853              	.LBE26:
 322:bsp/src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 854              		.loc 1 322 5 discriminator 8 view .LVU225
 855 005a 4D45     		cmp	r5, r9
 856 005c 08BF     		it	eq
 857 005e 4445     		cmpeq	r4, r8
 858 0060 13D3     		bcc	.L67
 859              		.loc 1 322 20 discriminator 1 view .LVU226
 860 0062 1F2F     		cmp	r7, #31
 861 0064 11D8     		bhi	.L67
 862              	.LBB27:
 320:bsp/src/printf.c ****       value /= base;
 863              		.loc 1 320 14 view .LVU227
 864 0066 3E46     		mov	r6, r7
 321:bsp/src/printf.c ****       value /= base;
 865              		.loc 1 321 13 view .LVU228
 866 0068 0446     		mov	r4, r0
 867 006a 0D46     		mov	r5, r1
 868              	.LVL82:
 869              	.L71:
 321:bsp/src/printf.c ****       value /= base;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 23


 870              		.loc 1 321 13 view .LVU229
 871              	.LBE27:
 318:bsp/src/printf.c ****       const char digit = (char)(value % base);
 872              		.loc 1 318 5 is_stmt 1 view .LVU230
 873              	.LBB28:
 319:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 874              		.loc 1 319 7 view .LVU231
 319:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 875              		.loc 1 319 39 is_stmt 0 view .LVU232
 876 006c 4246     		mov	r2, r8
 877 006e 4B46     		mov	r3, r9
 878 0070 2046     		mov	r0, r4
 879 0072 2946     		mov	r1, r5
 880 0074 FFF7FEFF 		bl	__aeabi_uldivmod
 881              	.LVL83:
 319:bsp/src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 882              		.loc 1 319 18 view .LVU233
 883 0078 D2B2     		uxtb	r2, r2
 884              	.LVL84:
 320:bsp/src/printf.c ****       value /= base;
 885              		.loc 1 320 7 is_stmt 1 view .LVU234
 320:bsp/src/printf.c ****       value /= base;
 886              		.loc 1 320 18 is_stmt 0 view .LVU235
 887 007a 092A     		cmp	r2, #9
 888 007c DAD8     		bhi	.L68
 320:bsp/src/printf.c ****       value /= base;
 889              		.loc 1 320 18 discriminator 1 view .LVU236
 890 007e 3032     		adds	r2, r2, #48
 891              	.LVL85:
 320:bsp/src/printf.c ****       value /= base;
 892              		.loc 1 320 18 discriminator 1 view .LVU237
 893 0080 D2B2     		uxtb	r2, r2
 894              	.LVL86:
 320:bsp/src/printf.c ****       value /= base;
 895              		.loc 1 320 18 discriminator 1 view .LVU238
 896 0082 DFE7     		b	.L69
 897              	.LVL87:
 898              	.L73:
 320:bsp/src/printf.c ****       value /= base;
 899              		.loc 1 320 85 view .LVU239
 900 0084 6123     		movs	r3, #97
 901 0086 D9E7     		b	.L70
 902              	.LVL88:
 903              	.L72:
 320:bsp/src/printf.c ****       value /= base;
 904              		.loc 1 320 85 view .LVU240
 905              	.LBE28:
 309:bsp/src/printf.c **** 
 906              		.loc 1 309 10 view .LVU241
 907 0088 0027     		movs	r7, #0
 908              	.LVL89:
 909              	.L67:
 323:bsp/src/printf.c ****   }
 324:bsp/src/printf.c **** 
 325:bsp/src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 910              		.loc 1 325 3 is_stmt 1 view .LVU242
 911              		.loc 1 325 10 is_stmt 0 view .LVU243
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 24


 912 008a CDF818A0 		str	r10, [sp, #24]
 913 008e 259B     		ldr	r3, [sp, #148]
 914 0090 0593     		str	r3, [sp, #20]
 915 0092 249B     		ldr	r3, [sp, #144]
 916 0094 0493     		str	r3, [sp, #16]
 917 0096 CDF80C80 		str	r8, [sp, #12]
 918 009a 9DF88030 		ldrb	r3, [sp, #128]	@ zero_extendqisi2
 919 009e 0293     		str	r3, [sp, #8]
 920 00a0 0197     		str	r7, [sp, #4]
 921 00a2 0CAB     		add	r3, sp, #48
 922 00a4 0093     		str	r3, [sp]
 923 00a6 5B46     		mov	r3, fp
 924 00a8 0B9A     		ldr	r2, [sp, #44]
 925 00aa 0A99     		ldr	r1, [sp, #40]
 926 00ac 0998     		ldr	r0, [sp, #36]
 927 00ae FFF7FEFF 		bl	_ntoa_format
 928              	.LVL90:
 326:bsp/src/printf.c **** }
 929              		.loc 1 326 1 view .LVU244
 930 00b2 15B0     		add	sp, sp, #84
 931              	.LCFI15:
 932              		.cfi_def_cfa_offset 36
 933              		@ sp needed
 934 00b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 935              		.loc 1 326 1 view .LVU245
 936              		.cfi_endproc
 937              	.LFE140:
 939              		.global	__aeabi_dcmpeq
 940              		.global	__aeabi_dcmpgt
 941              		.global	__aeabi_dcmplt
 942              		.global	__aeabi_i2d
 943              		.global	__aeabi_dmul
 944              		.global	__aeabi_dadd
 945              		.global	__aeabi_dsub
 946              		.global	__aeabi_d2iz
 947              		.global	__aeabi_ddiv
 948              		.global	__aeabi_dcmpge
 949              		.section	.text._etoa,"ax",%progbits
 950              		.align	1
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu fpv4-sp-d16
 956              	_etoa:
 957              	.LVL91:
 958              	.LFB142:
 327:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_LONG_LONG
 328:bsp/src/printf.c **** 
 329:bsp/src/printf.c **** 
 330:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 331:bsp/src/printf.c **** 
 332:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 333:bsp/src/printf.c **** // forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT
 334:bsp/src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 335:bsp/src/printf.c **** #endif
 336:bsp/src/printf.c **** 
 337:bsp/src/printf.c **** 
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 25


 338:bsp/src/printf.c **** // internal ftoa for fixed decimal floating point
 339:bsp/src/printf.c **** static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 340:bsp/src/printf.c **** {
 341:bsp/src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 342:bsp/src/printf.c ****   size_t len  = 0U;
 343:bsp/src/printf.c ****   double diff = 0.0;
 344:bsp/src/printf.c **** 
 345:bsp/src/printf.c ****   // powers of 10
 346:bsp/src/printf.c ****   static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 10
 347:bsp/src/printf.c **** 
 348:bsp/src/printf.c ****   // test for special values
 349:bsp/src/printf.c ****   if (value != value)
 350:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 351:bsp/src/printf.c ****   if (value < -DBL_MAX)
 352:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 353:bsp/src/printf.c ****   if (value > DBL_MAX)
 354:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 355:bsp/src/printf.c **** 
 356:bsp/src/printf.c ****   // test for very large values
 357:bsp/src/printf.c ****   // standard printf behavior is to print EVERY whole number digit -- which could be 100s of charac
 358:bsp/src/printf.c ****   if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 359:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 360:bsp/src/printf.c ****     return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 361:bsp/src/printf.c **** #else
 362:bsp/src/printf.c ****     return 0U;
 363:bsp/src/printf.c **** #endif
 364:bsp/src/printf.c ****   }
 365:bsp/src/printf.c **** 
 366:bsp/src/printf.c ****   // test for negative
 367:bsp/src/printf.c ****   bool negative = false;
 368:bsp/src/printf.c ****   if (value < 0) {
 369:bsp/src/printf.c ****     negative = true;
 370:bsp/src/printf.c ****     value = 0 - value;
 371:bsp/src/printf.c ****   }
 372:bsp/src/printf.c **** 
 373:bsp/src/printf.c ****   // set default precision, if not set explicitly
 374:bsp/src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 375:bsp/src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 376:bsp/src/printf.c ****   }
 377:bsp/src/printf.c ****   // limit precision to 9, cause a prec >= 10 can lead to overflow errors
 378:bsp/src/printf.c ****   while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 379:bsp/src/printf.c ****     buf[len++] = '0';
 380:bsp/src/printf.c ****     prec--;
 381:bsp/src/printf.c ****   }
 382:bsp/src/printf.c **** 
 383:bsp/src/printf.c ****   int whole = (int)value;
 384:bsp/src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 385:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 386:bsp/src/printf.c ****   diff = tmp - frac;
 387:bsp/src/printf.c **** 
 388:bsp/src/printf.c ****   if (diff > 0.5) {
 389:bsp/src/printf.c ****     ++frac;
 390:bsp/src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 391:bsp/src/printf.c ****     if (frac >= pow10[prec]) {
 392:bsp/src/printf.c ****       frac = 0;
 393:bsp/src/printf.c ****       ++whole;
 394:bsp/src/printf.c ****     }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 26


 395:bsp/src/printf.c ****   }
 396:bsp/src/printf.c ****   else if (diff < 0.5) {
 397:bsp/src/printf.c ****   }
 398:bsp/src/printf.c ****   else if ((frac == 0U) || (frac & 1U)) {
 399:bsp/src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 400:bsp/src/printf.c ****     ++frac;
 401:bsp/src/printf.c ****   }
 402:bsp/src/printf.c **** 
 403:bsp/src/printf.c ****   if (prec == 0U) {
 404:bsp/src/printf.c ****     diff = value - (double)whole;
 405:bsp/src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 406:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 407:bsp/src/printf.c ****       // 1.5 -> 2, but 2.5 -> 2
 408:bsp/src/printf.c ****       ++whole;
 409:bsp/src/printf.c ****     }
 410:bsp/src/printf.c ****   }
 411:bsp/src/printf.c ****   else {
 412:bsp/src/printf.c ****     unsigned int count = prec;
 413:bsp/src/printf.c ****     // now do fractional part, as an unsigned number
 414:bsp/src/printf.c ****     while (len < PRINTF_FTOA_BUFFER_SIZE) {
 415:bsp/src/printf.c ****       --count;
 416:bsp/src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 417:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 418:bsp/src/printf.c ****         break;
 419:bsp/src/printf.c ****       }
 420:bsp/src/printf.c ****     }
 421:bsp/src/printf.c ****     // add extra 0s
 422:bsp/src/printf.c ****     while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 423:bsp/src/printf.c ****       buf[len++] = '0';
 424:bsp/src/printf.c ****     }
 425:bsp/src/printf.c ****     if (len < PRINTF_FTOA_BUFFER_SIZE) {
 426:bsp/src/printf.c ****       // add decimal
 427:bsp/src/printf.c ****       buf[len++] = '.';
 428:bsp/src/printf.c ****     }
 429:bsp/src/printf.c ****   }
 430:bsp/src/printf.c **** 
 431:bsp/src/printf.c ****   // do whole part, number is reversed
 432:bsp/src/printf.c ****   while (len < PRINTF_FTOA_BUFFER_SIZE) {
 433:bsp/src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
 434:bsp/src/printf.c ****     if (!(whole /= 10)) {
 435:bsp/src/printf.c ****       break;
 436:bsp/src/printf.c ****     }
 437:bsp/src/printf.c ****   }
 438:bsp/src/printf.c **** 
 439:bsp/src/printf.c ****   // pad leading zeros
 440:bsp/src/printf.c ****   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 441:bsp/src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 442:bsp/src/printf.c ****       width--;
 443:bsp/src/printf.c ****     }
 444:bsp/src/printf.c ****     while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 445:bsp/src/printf.c ****       buf[len++] = '0';
 446:bsp/src/printf.c ****     }
 447:bsp/src/printf.c ****   }
 448:bsp/src/printf.c **** 
 449:bsp/src/printf.c ****   if (len < PRINTF_FTOA_BUFFER_SIZE) {
 450:bsp/src/printf.c ****     if (negative) {
 451:bsp/src/printf.c ****       buf[len++] = '-';
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 27


 452:bsp/src/printf.c ****     }
 453:bsp/src/printf.c ****     else if (flags & FLAGS_PLUS) {
 454:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 455:bsp/src/printf.c ****     }
 456:bsp/src/printf.c ****     else if (flags & FLAGS_SPACE) {
 457:bsp/src/printf.c ****       buf[len++] = ' ';
 458:bsp/src/printf.c ****     }
 459:bsp/src/printf.c ****   }
 460:bsp/src/printf.c **** 
 461:bsp/src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 462:bsp/src/printf.c **** }
 463:bsp/src/printf.c **** 
 464:bsp/src/printf.c **** 
 465:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 466:bsp/src/printf.c **** // internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.ja
 467:bsp/src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 468:bsp/src/printf.c **** {
 959              		.loc 1 468 1 is_stmt 1 view -0
 960              		.cfi_startproc
 961              		@ args = 20, pretend = 0, frame = 40
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963              		.loc 1 468 1 is_stmt 0 view .LVU247
 964 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 965              	.LCFI16:
 966              		.cfi_def_cfa_offset 36
 967              		.cfi_offset 4, -36
 968              		.cfi_offset 5, -32
 969              		.cfi_offset 6, -28
 970              		.cfi_offset 7, -24
 971              		.cfi_offset 8, -20
 972              		.cfi_offset 9, -16
 973              		.cfi_offset 10, -12
 974              		.cfi_offset 11, -8
 975              		.cfi_offset 14, -4
 976 0004 91B0     		sub	sp, sp, #68
 977              	.LCFI17:
 978              		.cfi_def_cfa_offset 104
 979 0006 0546     		mov	r5, r0
 980 0008 0991     		str	r1, [sp, #36]
 981 000a 9246     		mov	r10, r2
 982 000c 0893     		str	r3, [sp, #32]
 983 000e DDF878B0 		ldr	fp, [sp, #120]
 469:bsp/src/printf.c ****   // check for NaN and special values
 470:bsp/src/printf.c ****   if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 984              		.loc 1 470 3 is_stmt 1 view .LVU248
 985              		.loc 1 470 6 is_stmt 0 view .LVU249
 986 0012 DDE91A23 		ldrd	r2, [sp, #104]
 987              	.LVL92:
 988              		.loc 1 470 6 view .LVU250
 989 0016 1046     		mov	r0, r2
 990              	.LVL93:
 991              		.loc 1 470 6 view .LVU251
 992 0018 1946     		mov	r1, r3
 993              	.LVL94:
 994              		.loc 1 470 6 view .LVU252
 995 001a FFF7FEFF 		bl	__aeabi_dcmpeq
 996              	.LVL95:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 28


 997              		.loc 1 470 6 view .LVU253
 998 001e 0028     		cmp	r0, #0
 999 0020 00F09C81 		beq	.L79
 1000              		.loc 1 470 24 discriminator 1 view .LVU254
 1001 0024 4FF0FF32 		mov	r2, #-1
 1002 0028 C54B     		ldr	r3, .L121+64
 1003 002a DDE91A01 		ldrd	r0, [sp, #104]
 1004 002e FFF7FEFF 		bl	__aeabi_dcmpgt
 1005              	.LVL96:
 1006 0032 0028     		cmp	r0, #0
 1007 0034 40F09281 		bne	.L79
 1008              		.loc 1 470 45 discriminator 2 view .LVU255
 1009 0038 4FF0FF32 		mov	r2, #-1
 1010 003c 6FF48013 		mvn	r3, #1048576
 1011 0040 DDE91A01 		ldrd	r0, [sp, #104]
 1012 0044 FFF7FEFF 		bl	__aeabi_dcmplt
 1013              	.LVL97:
 1014 0048 0028     		cmp	r0, #0
 1015 004a 40F08781 		bne	.L79
 471:bsp/src/printf.c ****     return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 472:bsp/src/printf.c ****   }
 473:bsp/src/printf.c **** 
 474:bsp/src/printf.c ****   // determine the sign
 475:bsp/src/printf.c ****   const bool negative = value < 0;
 1016              		.loc 1 475 3 is_stmt 1 view .LVU256
 1017              	.LVL98:
 476:bsp/src/printf.c ****   if (negative) {
 1018              		.loc 1 476 3 view .LVU257
 1019              		.loc 1 476 6 is_stmt 0 view .LVU258
 1020 004e 0022     		movs	r2, #0
 1021 0050 0023     		movs	r3, #0
 1022 0052 DDE91A01 		ldrd	r0, [sp, #104]
 1023 0056 FFF7FEFF 		bl	__aeabi_dcmplt
 1024              	.LVL99:
 1025 005a 0028     		cmp	r0, #0
 1026 005c 40F09181 		bne	.L118
 1027 0060 9DED1A7B 		vldr.64	d7, [sp, #104]
 1028 0064 8DED067B 		vstr.64	d7, [sp, #24]
 1029              	.LVL100:
 1030              	.L83:
 477:bsp/src/printf.c ****     value = -value;
 478:bsp/src/printf.c ****   }
 479:bsp/src/printf.c **** 
 480:bsp/src/printf.c ****   // default precision
 481:bsp/src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 1031              		.loc 1 481 3 is_stmt 1 view .LVU259
 1032              		.loc 1 481 6 is_stmt 0 view .LVU260
 1033 0068 1BF48064 		ands	r4, fp, #1024
 1034 006c 01D1     		bne	.L85
 482:bsp/src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1035              		.loc 1 482 10 view .LVU261
 1036 006e 0623     		movs	r3, #6
 1037 0070 1C93     		str	r3, [sp, #112]
 1038              	.LVL101:
 1039              	.L85:
 483:bsp/src/printf.c ****   }
 484:bsp/src/printf.c **** 
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 29


 485:bsp/src/printf.c ****   // determine the decimal exponent
 486:bsp/src/printf.c ****   // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
 487:bsp/src/printf.c ****   union {
 1040              		.loc 1 487 3 is_stmt 1 view .LVU262
 488:bsp/src/printf.c ****     uint64_t U;
 489:bsp/src/printf.c ****     double   F;
 490:bsp/src/printf.c ****   } conv;
 491:bsp/src/printf.c **** 
 492:bsp/src/printf.c ****   conv.F = value;
 1041              		.loc 1 492 3 view .LVU263
 493:bsp/src/printf.c ****   int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 1042              		.loc 1 493 3 view .LVU264
 1043 0072 DDE90601 		ldrd	r0, [sp, #24]
 1044 0076 0246     		mov	r2, r0
 1045              		.loc 1 493 14 is_stmt 0 view .LVU265
 1046 0078 C1F30A50 		ubfx	r0, r1, #20, #11
 1047              	.LVL102:
 494:bsp/src/printf.c ****   conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is n
 1048              		.loc 1 494 3 is_stmt 1 view .LVU266
 1049              		.loc 1 494 20 is_stmt 0 view .LVU267
 1050 007c C1F31303 		ubfx	r3, r1, #0, #20
 1051              		.loc 1 494 44 view .LVU268
 1052 0080 1646     		mov	r6, r2
 1053 0082 43F07F57 		orr	r7, r3, #1069547520
 1054 0086 47F44017 		orr	r7, r7, #3145728
 495:bsp/src/printf.c ****   // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
 496:bsp/src/printf.c ****   int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.28952965460216
 1055              		.loc 1 496 3 is_stmt 1 view .LVU269
 1056              		.loc 1 496 45 is_stmt 0 view .LVU270
 1057 008a A0F2FF30 		subw	r0, r0, #1023
 1058              	.LVL103:
 1059              		.loc 1 496 45 view .LVU271
 1060 008e FFF7FEFF 		bl	__aeabi_i2d
 1061              	.LVL104:
 1062              		.loc 1 496 45 view .LVU272
 1063 0092 9BA3     		adr	r3, .L121
 1064 0094 D3E90023 		ldrd	r2, [r3]
 1065 0098 FFF7FEFF 		bl	__aeabi_dmul
 1066              	.LVL105:
 1067              		.loc 1 496 38 view .LVU273
 1068 009c 9AA3     		adr	r3, .L121+8
 1069 009e D3E90023 		ldrd	r2, [r3]
 1070 00a2 FFF7FEFF 		bl	__aeabi_dadd
 1071              	.LVL106:
 1072 00a6 8046     		mov	r8, r0
 1073 00a8 8946     		mov	r9, r1
 1074              		.loc 1 496 75 view .LVU274
 1075 00aa 0022     		movs	r2, #0
 1076 00ac A54B     		ldr	r3, .L121+68
 1077 00ae 3046     		mov	r0, r6
 1078 00b0 3946     		mov	r1, r7
 1079 00b2 FFF7FEFF 		bl	__aeabi_dsub
 1080              	.LVL107:
 1081              		.loc 1 496 82 view .LVU275
 1082 00b6 96A3     		adr	r3, .L121+16
 1083 00b8 D3E90023 		ldrd	r2, [r3]
 1084 00bc FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 30


 1085              	.LVL108:
 1086              		.loc 1 496 65 view .LVU276
 1087 00c0 0246     		mov	r2, r0
 1088 00c2 0B46     		mov	r3, r1
 1089 00c4 4046     		mov	r0, r8
 1090 00c6 4946     		mov	r1, r9
 1091 00c8 FFF7FEFF 		bl	__aeabi_dadd
 1092              	.LVL109:
 1093              		.loc 1 496 7 view .LVU277
 1094 00cc FFF7FEFF 		bl	__aeabi_d2iz
 1095              	.LVL110:
 1096 00d0 8046     		mov	r8, r0
 1097              	.LVL111:
 497:bsp/src/printf.c ****   // now we want to compute 10^expval but we want to be sure it won't overflow
 498:bsp/src/printf.c ****   exp2 = (int)(expval * 3.321928094887362 + 0.5);
 1098              		.loc 1 498 3 is_stmt 1 view .LVU278
 1099              		.loc 1 498 23 is_stmt 0 view .LVU279
 1100 00d2 FFF7FEFF 		bl	__aeabi_i2d
 1101              	.LVL112:
 1102              		.loc 1 498 23 view .LVU280
 1103 00d6 0646     		mov	r6, r0
 1104 00d8 0F46     		mov	r7, r1
 1105 00da 8FA3     		adr	r3, .L121+24
 1106 00dc D3E90023 		ldrd	r2, [r3]
 1107 00e0 FFF7FEFF 		bl	__aeabi_dmul
 1108              	.LVL113:
 1109              		.loc 1 498 43 view .LVU281
 1110 00e4 0022     		movs	r2, #0
 1111 00e6 984B     		ldr	r3, .L121+72
 1112 00e8 FFF7FEFF 		bl	__aeabi_dadd
 1113              	.LVL114:
 1114              		.loc 1 498 8 view .LVU282
 1115 00ec FFF7FEFF 		bl	__aeabi_d2iz
 1116              	.LVL115:
 1117 00f0 8146     		mov	r9, r0
 1118              	.LVL116:
 499:bsp/src/printf.c ****   const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 1119              		.loc 1 499 3 is_stmt 1 view .LVU283
 1120              		.loc 1 499 28 is_stmt 0 view .LVU284
 1121 00f2 8BA3     		adr	r3, .L121+32
 1122 00f4 D3E90023 		ldrd	r2, [r3]
 1123 00f8 3046     		mov	r0, r6
 1124              	.LVL117:
 1125              		.loc 1 499 28 view .LVU285
 1126 00fa 3946     		mov	r1, r7
 1127 00fc FFF7FEFF 		bl	__aeabi_dmul
 1128              	.LVL118:
 1129 0100 0646     		mov	r6, r0
 1130 0102 0F46     		mov	r7, r1
 1131              		.loc 1 499 55 view .LVU286
 1132 0104 4846     		mov	r0, r9
 1133 0106 FFF7FEFF 		bl	__aeabi_i2d
 1134              	.LVL119:
 1135 010a 87A3     		adr	r3, .L121+40
 1136 010c D3E90023 		ldrd	r2, [r3]
 1137 0110 FFF7FEFF 		bl	__aeabi_dmul
 1138              	.LVL120:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 31


 1139              		.loc 1 499 16 view .LVU287
 1140 0114 0246     		mov	r2, r0
 1141 0116 0B46     		mov	r3, r1
 1142 0118 3046     		mov	r0, r6
 1143 011a 3946     		mov	r1, r7
 1144 011c FFF7FEFF 		bl	__aeabi_dsub
 1145              	.LVL121:
 1146 0120 0646     		mov	r6, r0
 1147 0122 0F46     		mov	r7, r1
 1148              	.LVL122:
 500:bsp/src/printf.c ****   const double z2 = z * z;
 1149              		.loc 1 500 3 is_stmt 1 view .LVU288
 1150              		.loc 1 500 16 is_stmt 0 view .LVU289
 1151 0124 CDE90A67 		strd	r6, [sp, #40]
 1152 0128 0246     		mov	r2, r0
 1153 012a 0B46     		mov	r3, r1
 1154 012c FFF7FEFF 		bl	__aeabi_dmul
 1155              	.LVL123:
 1156 0130 CDE90C01 		strd	r0, [sp, #48]
 1157              	.LVL124:
 501:bsp/src/printf.c ****   conv.U = (uint64_t)(exp2 + 1023) << 52U;
 1158              		.loc 1 501 3 is_stmt 1 view .LVU290
 1159              		.loc 1 501 28 is_stmt 0 view .LVU291
 1160 0134 09F2FF39 		addw	r9, r9, #1023
 1161              	.LVL125:
 1162              		.loc 1 501 36 view .LVU292
 1163 0138 0026     		movs	r6, #0
 1164              	.LVL126:
 1165              		.loc 1 501 36 view .LVU293
 1166 013a 4FEA0957 		lsl	r7, r9, #20
 502:bsp/src/printf.c ****   // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_functi
 503:bsp/src/printf.c ****   conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 1167              		.loc 1 503 3 is_stmt 1 view .LVU294
 1168              		.loc 1 503 19 is_stmt 0 view .LVU295
 1169 013e DDE90A01 		ldrd	r0, [sp, #40]
 1170              	.LVL127:
 1171              		.loc 1 503 19 view .LVU296
 1172 0142 0246     		mov	r2, r0
 1173 0144 0B46     		mov	r3, r1
 1174 0146 FFF7FEFF 		bl	__aeabi_dadd
 1175              	.LVL128:
 1176 014a CDE90E01 		strd	r0, [sp, #56]
 1177              		.loc 1 503 28 view .LVU297
 1178 014e DDE90A23 		ldrd	r2, [sp, #40]
 1179 0152 0020     		movs	r0, #0
 1180 0154 4FF08041 		mov	r1, #1073741824
 1181 0158 FFF7FEFF 		bl	__aeabi_dsub
 1182              	.LVL129:
 1183 015c CDE90A01 		strd	r0, [sp, #40]
 1184              	.LVL130:
 1185              		.loc 1 503 60 view .LVU298
 1186 0160 0022     		movs	r2, #0
 1187 0162 7A4B     		ldr	r3, .L121+76
 1188 0164 DDE90C01 		ldrd	r0, [sp, #48]
 1189 0168 FFF7FEFF 		bl	__aeabi_ddiv
 1190              	.LVL131:
 1191              		.loc 1 503 55 view .LVU299
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 32


 1192 016c 0022     		movs	r2, #0
 1193 016e 784B     		ldr	r3, .L121+80
 1194 0170 FFF7FEFF 		bl	__aeabi_dadd
 1195              	.LVL132:
 1196              		.loc 1 503 49 view .LVU300
 1197 0174 0246     		mov	r2, r0
 1198 0176 0B46     		mov	r3, r1
 1199 0178 DDE90C01 		ldrd	r0, [sp, #48]
 1200 017c FFF7FEFF 		bl	__aeabi_ddiv
 1201              	.LVL133:
 1202              		.loc 1 503 43 view .LVU301
 1203 0180 0022     		movs	r2, #0
 1204 0182 744B     		ldr	r3, .L121+84
 1205 0184 FFF7FEFF 		bl	__aeabi_dadd
 1206              	.LVL134:
 1207              		.loc 1 503 38 view .LVU302
 1208 0188 0246     		mov	r2, r0
 1209 018a 0B46     		mov	r3, r1
 1210 018c DDE90C01 		ldrd	r0, [sp, #48]
 1211 0190 FFF7FEFF 		bl	__aeabi_ddiv
 1212              	.LVL135:
 1213              		.loc 1 503 32 view .LVU303
 1214 0194 0246     		mov	r2, r0
 1215 0196 0B46     		mov	r3, r1
 1216 0198 DDE90A01 		ldrd	r0, [sp, #40]
 1217 019c FFF7FEFF 		bl	__aeabi_dadd
 1218              	.LVL136:
 1219              		.loc 1 503 23 view .LVU304
 1220 01a0 0246     		mov	r2, r0
 1221 01a2 0B46     		mov	r3, r1
 1222 01a4 DDE90E01 		ldrd	r0, [sp, #56]
 1223 01a8 FFF7FEFF 		bl	__aeabi_ddiv
 1224              	.LVL137:
 1225              		.loc 1 503 15 view .LVU305
 1226 01ac 0022     		movs	r2, #0
 1227 01ae 6A4B     		ldr	r3, .L121+88
 1228 01b0 FFF7FEFF 		bl	__aeabi_dadd
 1229              	.LVL138:
 1230              		.loc 1 503 10 view .LVU306
 1231 01b4 3246     		mov	r2, r6
 1232 01b6 3B46     		mov	r3, r7
 1233 01b8 FFF7FEFF 		bl	__aeabi_dmul
 1234              	.LVL139:
 1235 01bc 0646     		mov	r6, r0
 1236 01be 0F46     		mov	r7, r1
 1237 01c0 CDE90A67 		strd	r6, [sp, #40]
 504:bsp/src/printf.c ****   // correct for rounding errors
 505:bsp/src/printf.c ****   if (value < conv.F) {
 1238              		.loc 1 505 3 is_stmt 1 view .LVU307
 1239              		.loc 1 505 6 is_stmt 0 view .LVU308
 1240 01c4 DDE90623 		ldrd	r2, [sp, #24]
 1241 01c8 FFF7FEFF 		bl	__aeabi_dcmpgt
 1242              	.LVL140:
 1243 01cc 48B1     		cbz	r0, .L86
 506:bsp/src/printf.c ****     expval--;
 1244              		.loc 1 506 5 is_stmt 1 view .LVU309
 1245              		.loc 1 506 11 is_stmt 0 view .LVU310
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 33


 1246 01ce 08F1FF38 		add	r8, r8, #-1
 1247              	.LVL141:
 507:bsp/src/printf.c ****     conv.F /= 10;
 1248              		.loc 1 507 5 is_stmt 1 view .LVU311
 1249              		.loc 1 507 12 is_stmt 0 view .LVU312
 1250 01d2 0022     		movs	r2, #0
 1251 01d4 5E4B     		ldr	r3, .L121+80
 1252 01d6 3046     		mov	r0, r6
 1253 01d8 3946     		mov	r1, r7
 1254 01da FFF7FEFF 		bl	__aeabi_ddiv
 1255              	.LVL142:
 1256 01de CDE90A01 		strd	r0, [sp, #40]
 1257              	.L86:
 508:bsp/src/printf.c ****   }
 509:bsp/src/printf.c **** 
 510:bsp/src/printf.c ****   // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
 511:bsp/src/printf.c ****   unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 1258              		.loc 1 511 3 is_stmt 1 view .LVU313
 1259              		.loc 1 511 43 is_stmt 0 view .LVU314
 1260 01e2 08F16303 		add	r3, r8, #99
 1261              		.loc 1 511 68 view .LVU315
 1262 01e6 C62B     		cmp	r3, #198
 1263 01e8 00F2D280 		bhi	.L104
 1264              		.loc 1 511 68 view .LVU316
 1265 01ec 0426     		movs	r6, #4
 1266              	.L88:
 1267              	.LVL143:
 512:bsp/src/printf.c **** 
 513:bsp/src/printf.c ****   // in "%g" mode, "prec" is the number of *significant figures* not decimals
 514:bsp/src/printf.c ****   if (flags & FLAGS_ADAPT_EXP) {
 1268              		.loc 1 514 3 is_stmt 1 discriminator 4 view .LVU317
 1269              		.loc 1 514 6 is_stmt 0 discriminator 4 view .LVU318
 1270 01ee 1BF4006F 		tst	fp, #2048
 1271 01f2 1FD0     		beq	.L89
 515:bsp/src/printf.c ****     // do we want to fall-back to "%f" mode?
 516:bsp/src/printf.c ****     if ((value >= 1e-4) && (value < 1e6)) {
 1272              		.loc 1 516 5 is_stmt 1 view .LVU319
 1273              		.loc 1 516 8 is_stmt 0 view .LVU320
 1274 01f4 4EA3     		adr	r3, .L121+48
 1275 01f6 D3E90023 		ldrd	r2, [r3]
 1276 01fa DDE90601 		ldrd	r0, [sp, #24]
 1277 01fe FFF7FEFF 		bl	__aeabi_dcmpge
 1278              	.LVL144:
 1279 0202 0028     		cmp	r0, #0
 1280 0204 00F0C980 		beq	.L90
 1281              		.loc 1 516 25 discriminator 1 view .LVU321
 1282 0208 4BA3     		adr	r3, .L121+56
 1283 020a D3E90023 		ldrd	r2, [r3]
 1284 020e DDE90601 		ldrd	r0, [sp, #24]
 1285 0212 FFF7FEFF 		bl	__aeabi_dcmplt
 1286              	.LVL145:
 1287 0216 0028     		cmp	r0, #0
 1288 0218 00F0BF80 		beq	.L90
 517:bsp/src/printf.c ****       if ((int)prec > expval) {
 1289              		.loc 1 517 7 is_stmt 1 view .LVU322
 1290              		.loc 1 517 10 is_stmt 0 view .LVU323
 1291 021c 1C9B     		ldr	r3, [sp, #112]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 34


 1292 021e 4345     		cmp	r3, r8
 1293 0220 40F3B880 		ble	.L105
 518:bsp/src/printf.c ****         prec = (unsigned)((int)prec - expval - 1);
 1294              		.loc 1 518 9 is_stmt 1 view .LVU324
 1295              		.loc 1 518 37 is_stmt 0 view .LVU325
 1296 0224 A3EB0804 		sub	r4, r3, r8
 1297              		.loc 1 518 46 view .LVU326
 1298 0228 631E     		subs	r3, r4, #1
 1299 022a 1C93     		str	r3, [sp, #112]
 1300              	.LVL146:
 1301              	.L93:
 519:bsp/src/printf.c ****       }
 520:bsp/src/printf.c ****       else {
 521:bsp/src/printf.c ****         prec = 0;
 522:bsp/src/printf.c ****       }
 523:bsp/src/printf.c ****       flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 1302              		.loc 1 523 7 is_stmt 1 view .LVU327
 1303              		.loc 1 523 13 is_stmt 0 view .LVU328
 1304 022c 4BF4806B 		orr	fp, fp, #1024
 1305              	.LVL147:
 524:bsp/src/printf.c ****       // no characters in exponent
 525:bsp/src/printf.c ****       minwidth = 0U;
 1306              		.loc 1 525 7 is_stmt 1 view .LVU329
 526:bsp/src/printf.c ****       expval   = 0;
 1307              		.loc 1 526 7 view .LVU330
 525:bsp/src/printf.c ****       expval   = 0;
 1308              		.loc 1 525 16 is_stmt 0 view .LVU331
 1309 0230 0026     		movs	r6, #0
 1310              		.loc 1 526 16 view .LVU332
 1311 0232 B046     		mov	r8, r6
 1312              	.LVL148:
 1313              	.L89:
 527:bsp/src/printf.c ****     }
 528:bsp/src/printf.c ****     else {
 529:bsp/src/printf.c ****       // we use one sigfig for the whole part
 530:bsp/src/printf.c ****       if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 531:bsp/src/printf.c ****         --prec;
 532:bsp/src/printf.c ****       }
 533:bsp/src/printf.c ****     }
 534:bsp/src/printf.c ****   }
 535:bsp/src/printf.c **** 
 536:bsp/src/printf.c ****   // will everything fit?
 537:bsp/src/printf.c ****   unsigned int fwidth = width;
 1314              		.loc 1 537 3 is_stmt 1 view .LVU333
 538:bsp/src/printf.c ****   if (width > minwidth) {
 1315              		.loc 1 538 3 view .LVU334
 1316              		.loc 1 538 6 is_stmt 0 view .LVU335
 1317 0234 1D9B     		ldr	r3, [sp, #116]
 1318 0236 9E42     		cmp	r6, r3
 1319 0238 80F0B980 		bcs	.L106
 539:bsp/src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 540:bsp/src/printf.c ****     fwidth -= minwidth;
 1320              		.loc 1 540 5 is_stmt 1 view .LVU336
 1321              		.loc 1 540 12 is_stmt 0 view .LVU337
 1322 023c 9F1B     		subs	r7, r3, r6
 1323              	.LVL149:
 1324              	.L94:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 35


 541:bsp/src/printf.c ****   } else {
 542:bsp/src/printf.c ****     // not enough characters, so go back to default sizing
 543:bsp/src/printf.c ****     fwidth = 0U;
 544:bsp/src/printf.c ****   }
 545:bsp/src/printf.c ****   if ((flags & FLAGS_LEFT) && minwidth) {
 1325              		.loc 1 545 3 is_stmt 1 view .LVU338
 1326              		.loc 1 545 6 is_stmt 0 view .LVU339
 1327 023e 1BF00209 		ands	r9, fp, #2
 1328              	.LVL150:
 1329              		.loc 1 545 6 view .LVU340
 1330 0242 01D0     		beq	.L95
 1331              		.loc 1 545 28 discriminator 1 view .LVU341
 1332 0244 06B1     		cbz	r6, .L95
 546:bsp/src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 547:bsp/src/printf.c ****     fwidth = 0U;
 1333              		.loc 1 547 12 view .LVU342
 1334 0246 0027     		movs	r7, #0
 1335              	.LVL151:
 1336              	.L95:
 548:bsp/src/printf.c ****   }
 549:bsp/src/printf.c **** 
 550:bsp/src/printf.c ****   // rescale the float value
 551:bsp/src/printf.c ****   if (expval) {
 1337              		.loc 1 551 3 is_stmt 1 view .LVU343
 1338              		.loc 1 551 6 is_stmt 0 view .LVU344
 1339 0248 B8F1000F 		cmp	r8, #0
 1340 024c 07D0     		beq	.L96
 552:bsp/src/printf.c ****     value /= conv.F;
 1341              		.loc 1 552 5 is_stmt 1 view .LVU345
 1342              		.loc 1 552 18 is_stmt 0 view .LVU346
 1343 024e DDE90A23 		ldrd	r2, [sp, #40]
 1344              		.loc 1 552 11 view .LVU347
 1345 0252 DDE90601 		ldrd	r0, [sp, #24]
 1346 0256 FFF7FEFF 		bl	__aeabi_ddiv
 1347              	.LVL152:
 1348 025a CDE90601 		strd	r0, [sp, #24]
 1349              	.LVL153:
 1350              	.L96:
 553:bsp/src/printf.c ****   }
 554:bsp/src/printf.c **** 
 555:bsp/src/printf.c ****   // output the floating part
 556:bsp/src/printf.c ****   const size_t start_idx = idx;
 1351              		.loc 1 556 3 is_stmt 1 view .LVU348
 557:bsp/src/printf.c ****   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADA
 1352              		.loc 1 557 3 view .LVU349
 1353              		.loc 1 557 9 is_stmt 0 view .LVU350
 1354 025e 0022     		movs	r2, #0
 1355 0260 0023     		movs	r3, #0
 1356 0262 DDE91A01 		ldrd	r0, [sp, #104]
 1357 0266 FFF7FEFF 		bl	__aeabi_dcmplt
 1358              	.LVL154:
 1359 026a 0028     		cmp	r0, #0
 1360 026c 40F0A180 		bne	.L119
 1361              	.LVL155:
 1362              	.L97:
 1363              		.loc 1 557 9 discriminator 4 view .LVU351
 1364 0270 2BF40063 		bic	r3, fp, #2048
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 36


 1365 0274 0493     		str	r3, [sp, #16]
 1366 0276 0397     		str	r7, [sp, #12]
 1367 0278 1C9B     		ldr	r3, [sp, #112]
 1368 027a 0293     		str	r3, [sp, #8]
 1369 027c 9DED067B 		vldr.64	d7, [sp, #24]
 1370 0280 8DED007B 		vstr.64	d7, [sp]
 1371 0284 089B     		ldr	r3, [sp, #32]
 1372 0286 5246     		mov	r2, r10
 1373 0288 0999     		ldr	r1, [sp, #36]
 1374 028a 2846     		mov	r0, r5
 1375 028c FFF7FEFF 		bl	_ftoa
 1376              	.LVL156:
 558:bsp/src/printf.c **** 
 559:bsp/src/printf.c ****   // output the exponent part
 560:bsp/src/printf.c ****   if (minwidth) {
 1377              		.loc 1 560 3 is_stmt 1 discriminator 4 view .LVU352
 1378              		.loc 1 560 6 is_stmt 0 discriminator 4 view .LVU353
 1379 0290 002E     		cmp	r6, #0
 1380 0292 73D0     		beq	.L78
 561:bsp/src/printf.c ****     // output the exponential symbol
 562:bsp/src/printf.c ****     out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 1381              		.loc 1 562 5 is_stmt 1 view .LVU354
 1382 0294 1BF0200F 		tst	fp, #32
 1383 0298 00F09380 		beq	.L108
 1384 029c 4524     		movs	r4, #69
 1385              	.L99:
 1386              		.loc 1 562 5 is_stmt 0 discriminator 4 view .LVU355
 1387 029e 471C     		adds	r7, r0, #1
 1388              	.LVL157:
 1389              		.loc 1 562 5 discriminator 4 view .LVU356
 1390 02a0 089B     		ldr	r3, [sp, #32]
 1391 02a2 0246     		mov	r2, r0
 1392 02a4 DDF824B0 		ldr	fp, [sp, #36]
 1393              	.LVL158:
 1394              		.loc 1 562 5 discriminator 4 view .LVU357
 1395 02a8 5946     		mov	r1, fp
 1396 02aa 2046     		mov	r0, r4
 1397 02ac A847     		blx	r5
 1398              	.LVL159:
 563:bsp/src/printf.c ****     // output the exponent value
 564:bsp/src/printf.c ****     idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, 
 1399              		.loc 1 564 5 is_stmt 1 discriminator 4 view .LVU358
 1400              		.loc 1 564 71 is_stmt 0 discriminator 4 view .LVU359
 1401 02ae 88EAE873 		eor	r3, r8, r8, asr #31
 1402 02b2 A3EBE873 		sub	r3, r3, r8, asr #31
 1403              		.loc 1 564 11 discriminator 4 view .LVU360
 1404 02b6 0522     		movs	r2, #5
 1405 02b8 0592     		str	r2, [sp, #20]
 1406 02ba 013E     		subs	r6, r6, #1
 1407              	.LVL160:
 1408              		.loc 1 564 11 discriminator 4 view .LVU361
 1409 02bc 0496     		str	r6, [sp, #16]
 1410 02be 0022     		movs	r2, #0
 1411 02c0 0392     		str	r2, [sp, #12]
 1412 02c2 0A22     		movs	r2, #10
 1413 02c4 0292     		str	r2, [sp, #8]
 1414 02c6 4FEAD874 		lsr	r4, r8, #31
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 37


 1415 02ca 0194     		str	r4, [sp, #4]
 1416 02cc 0093     		str	r3, [sp]
 1417 02ce 089B     		ldr	r3, [sp, #32]
 1418 02d0 3A46     		mov	r2, r7
 1419 02d2 5946     		mov	r1, fp
 1420 02d4 2846     		mov	r0, r5
 1421 02d6 FFF7FEFF 		bl	_ntoa_long
 1422              	.LVL161:
 565:bsp/src/printf.c ****     // might need to right-pad spaces
 566:bsp/src/printf.c ****     if (flags & FLAGS_LEFT) {
 1423              		.loc 1 566 5 is_stmt 1 discriminator 4 view .LVU362
 1424              		.loc 1 566 8 is_stmt 0 discriminator 4 view .LVU363
 1425 02da B9F1000F 		cmp	r9, #0
 1426 02de 4DD0     		beq	.L78
 1427 02e0 0246     		mov	r2, r0
 1428 02e2 1D9E     		ldr	r6, [sp, #116]
 1429              	.LVL162:
 1430              	.L100:
 567:bsp/src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 1431              		.loc 1 567 18 discriminator 1 view .LVU364
 1432 02e4 A2EB0A03 		sub	r3, r2, r10
 1433              		.loc 1 567 13 discriminator 1 view .LVU365
 1434 02e8 B342     		cmp	r3, r6
 1435 02ea 6CD2     		bcs	.L120
 1436              		.loc 1 567 39 is_stmt 1 discriminator 2 view .LVU366
 1437 02ec 541C     		adds	r4, r2, #1
 1438              	.LVL163:
 1439              		.loc 1 567 39 is_stmt 0 discriminator 2 view .LVU367
 1440 02ee 089B     		ldr	r3, [sp, #32]
 1441 02f0 0999     		ldr	r1, [sp, #36]
 1442 02f2 2020     		movs	r0, #32
 1443 02f4 A847     		blx	r5
 1444              	.LVL164:
 1445 02f6 2246     		mov	r2, r4
 1446 02f8 F4E7     		b	.L100
 1447              	.L122:
 1448 02fa 00BFAFF3 		.align	3
 1448      0080
 1449              	.L121:
 1450 0300 FB799F50 		.word	1352628731
 1451 0304 1344D33F 		.word	1070810131
 1452 0308 B3C8608B 		.word	2338375859
 1453 030c 288AC63F 		.word	1069976104
 1454 0310 61436F63 		.word	1668236129
 1455 0314 A787D23F 		.word	1070761895
 1456 0318 71A37909 		.word	158966641
 1457 031c 4F930A40 		.word	1074434895
 1458 0320 1655B5BB 		.word	3149223190
 1459 0324 B16B0240 		.word	1073900465
 1460 0328 EF39FAFE 		.word	4277811695
 1461 032c 422EE63F 		.word	1072049730
 1462 0330 2D431CEB 		.word	3944497965
 1463 0334 E2361A3F 		.word	1058682594
 1464 0338 00000000 		.word	0
 1465 033c 80842E41 		.word	1093567616
 1466 0340 FFFFEF7F 		.word	2146435071
 1467 0344 0000F83F 		.word	1073217536
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 38


 1468 0348 0000E03F 		.word	1071644672
 1469 034c 00002C40 		.word	1076625408
 1470 0350 00002440 		.word	1076101120
 1471 0354 00001840 		.word	1075314688
 1472 0358 0000F03F 		.word	1072693248
 1473              	.LVL165:
 1474              	.L79:
 471:bsp/src/printf.c ****   }
 1475              		.loc 1 471 5 is_stmt 1 view .LVU368
 471:bsp/src/printf.c ****   }
 1476              		.loc 1 471 12 is_stmt 0 view .LVU369
 1477 035c CDF810B0 		str	fp, [sp, #16]
 1478 0360 1D9B     		ldr	r3, [sp, #116]
 1479 0362 0393     		str	r3, [sp, #12]
 1480 0364 1C9B     		ldr	r3, [sp, #112]
 1481 0366 0293     		str	r3, [sp, #8]
 1482 0368 9DED1A7B 		vldr.64	d7, [sp, #104]
 1483 036c 8DED007B 		vstr.64	d7, [sp]
 1484 0370 089B     		ldr	r3, [sp, #32]
 1485 0372 5246     		mov	r2, r10
 1486 0374 0999     		ldr	r1, [sp, #36]
 1487 0376 2846     		mov	r0, r5
 1488 0378 FFF7FEFF 		bl	_ftoa
 1489              	.LVL166:
 1490              	.L78:
 568:bsp/src/printf.c ****     }
 569:bsp/src/printf.c ****   }
 570:bsp/src/printf.c ****   return idx;
 571:bsp/src/printf.c **** }
 1491              		.loc 1 571 1 view .LVU370
 1492 037c 11B0     		add	sp, sp, #68
 1493              	.LCFI18:
 1494              		.cfi_remember_state
 1495              		.cfi_def_cfa_offset 36
 1496              		@ sp needed
 1497 037e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1498              	.LVL167:
 1499              	.L118:
 1500              	.LCFI19:
 1501              		.cfi_restore_state
 477:bsp/src/printf.c ****   }
 1502              		.loc 1 477 5 is_stmt 1 view .LVU371
 477:bsp/src/printf.c ****   }
 1503              		.loc 1 477 11 is_stmt 0 view .LVU372
 1504 0382 1A9B     		ldr	r3, [sp, #104]
 1505 0384 0693     		str	r3, [sp, #24]
 1506 0386 1B9B     		ldr	r3, [sp, #108]
 1507 0388 03F10043 		add	r3, r3, #-2147483648
 1508 038c 0793     		str	r3, [sp, #28]
 1509              	.LVL168:
 477:bsp/src/printf.c ****   }
 1510              		.loc 1 477 11 view .LVU373
 1511 038e 6BE6     		b	.L83
 1512              	.LVL169:
 1513              	.L104:
 511:bsp/src/printf.c **** 
 1514              		.loc 1 511 68 view .LVU374
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 39


 1515 0390 0526     		movs	r6, #5
 1516 0392 2CE7     		b	.L88
 1517              	.LVL170:
 1518              	.L105:
 521:bsp/src/printf.c ****       }
 1519              		.loc 1 521 14 view .LVU375
 1520 0394 0023     		movs	r3, #0
 1521 0396 1C93     		str	r3, [sp, #112]
 1522              	.LVL171:
 521:bsp/src/printf.c ****       }
 1523              		.loc 1 521 14 view .LVU376
 1524 0398 48E7     		b	.L93
 1525              	.LVL172:
 1526              	.L90:
 530:bsp/src/printf.c ****         --prec;
 1527              		.loc 1 530 7 is_stmt 1 view .LVU377
 530:bsp/src/printf.c ****         --prec;
 1528              		.loc 1 530 10 is_stmt 0 view .LVU378
 1529 039a 1C9B     		ldr	r3, [sp, #112]
 1530 039c 002B     		cmp	r3, #0
 1531 039e 3FF449AF 		beq	.L89
 530:bsp/src/printf.c ****         --prec;
 1532              		.loc 1 530 22 discriminator 1 view .LVU379
 1533 03a2 002C     		cmp	r4, #0
 1534 03a4 3FF446AF 		beq	.L89
 531:bsp/src/printf.c ****       }
 1535              		.loc 1 531 9 is_stmt 1 view .LVU380
 1536 03a8 013B     		subs	r3, r3, #1
 1537 03aa 1C93     		str	r3, [sp, #112]
 1538              	.LVL173:
 531:bsp/src/printf.c ****       }
 1539              		.loc 1 531 9 is_stmt 0 view .LVU381
 1540 03ac 42E7     		b	.L89
 1541              	.LVL174:
 1542              	.L106:
 543:bsp/src/printf.c ****   }
 1543              		.loc 1 543 12 view .LVU382
 1544 03ae 0027     		movs	r7, #0
 1545 03b0 45E7     		b	.L94
 1546              	.LVL175:
 1547              	.L119:
 557:bsp/src/printf.c **** 
 1548              		.loc 1 557 9 discriminator 1 view .LVU383
 1549 03b2 DDE90601 		ldrd	r0, [sp, #24]
 1550 03b6 0246     		mov	r2, r0
 1551 03b8 01F10043 		add	r3, r1, #-2147483648
 1552 03bc CDE90623 		strd	r2, [sp, #24]
 1553              	.LVL176:
 557:bsp/src/printf.c **** 
 1554              		.loc 1 557 9 discriminator 1 view .LVU384
 1555 03c0 56E7     		b	.L97
 1556              	.LVL177:
 1557              	.L108:
 562:bsp/src/printf.c ****     // output the exponent value
 1558              		.loc 1 562 5 view .LVU385
 1559 03c2 6524     		movs	r4, #101
 1560 03c4 6BE7     		b	.L99
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 40


 1561              	.LVL178:
 1562              	.L120:
 562:bsp/src/printf.c ****     // output the exponent value
 1563              		.loc 1 562 5 view .LVU386
 1564 03c6 1046     		mov	r0, r2
 1565 03c8 D8E7     		b	.L78
 1566              		.cfi_endproc
 1567              	.LFE142:
 1569              		.global	__aeabi_d2uiz
 1570              		.global	__aeabi_ui2d
 1571              		.global	__aeabi_dcmple
 1572 03ca 00BF     		.section	.text._ftoa,"ax",%progbits
 1573              		.align	1
 1574              		.syntax unified
 1575              		.thumb
 1576              		.thumb_func
 1577              		.fpu fpv4-sp-d16
 1579              	_ftoa:
 1580              	.LVL179:
 1581              	.LFB141:
 340:bsp/src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1582              		.loc 1 340 1 is_stmt 1 view -0
 1583              		.cfi_startproc
 1584              		@ args = 20, pretend = 0, frame = 56
 1585              		@ frame_needed = 0, uses_anonymous_args = 0
 340:bsp/src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1586              		.loc 1 340 1 is_stmt 0 view .LVU388
 1587 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1588              	.LCFI20:
 1589              		.cfi_def_cfa_offset 36
 1590              		.cfi_offset 4, -36
 1591              		.cfi_offset 5, -32
 1592              		.cfi_offset 6, -28
 1593              		.cfi_offset 7, -24
 1594              		.cfi_offset 8, -20
 1595              		.cfi_offset 9, -16
 1596              		.cfi_offset 10, -12
 1597              		.cfi_offset 11, -8
 1598              		.cfi_offset 14, -4
 1599 0004 2DED028B 		vpush.64	{d8}
 1600              	.LCFI21:
 1601              		.cfi_def_cfa_offset 44
 1602              		.cfi_offset 80, -44
 1603              		.cfi_offset 81, -40
 1604 0008 95B0     		sub	sp, sp, #84
 1605              	.LCFI22:
 1606              		.cfi_def_cfa_offset 128
 1607 000a 0790     		str	r0, [sp, #28]
 1608 000c 0891     		str	r1, [sp, #32]
 1609 000e 0992     		str	r2, [sp, #36]
 1610 0010 9B46     		mov	fp, r3
 1611 0012 229D     		ldr	r5, [sp, #136]
 1612 0014 DDF88C80 		ldr	r8, [sp, #140]
 1613 0018 DDF89090 		ldr	r9, [sp, #144]
 341:bsp/src/printf.c ****   size_t len  = 0U;
 1614              		.loc 1 341 3 is_stmt 1 view .LVU389
 342:bsp/src/printf.c ****   double diff = 0.0;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 41


 1615              		.loc 1 342 3 view .LVU390
 1616              	.LVL180:
 343:bsp/src/printf.c **** 
 1617              		.loc 1 343 3 view .LVU391
 346:bsp/src/printf.c **** 
 1618              		.loc 1 346 3 view .LVU392
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1619              		.loc 1 349 3 view .LVU393
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1620              		.loc 1 349 6 is_stmt 0 view .LVU394
 1621 001c DDE92023 		ldrd	r2, [sp, #128]
 1622              	.LVL181:
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1623              		.loc 1 349 6 view .LVU395
 1624 0020 1046     		mov	r0, r2
 1625              	.LVL182:
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1626              		.loc 1 349 6 view .LVU396
 1627 0022 1946     		mov	r1, r3
 1628              	.LVL183:
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1629              		.loc 1 349 6 view .LVU397
 1630 0024 FFF7FEFF 		bl	__aeabi_dcmpeq
 1631              	.LVL184:
 349:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1632              		.loc 1 349 6 view .LVU398
 1633 0028 0028     		cmp	r0, #0
 1634 002a 3ED0     		beq	.L196
 351:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 1635              		.loc 1 351 3 is_stmt 1 view .LVU399
 351:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 1636              		.loc 1 351 6 is_stmt 0 view .LVU400
 1637 002c 4FF0FF32 		mov	r2, #-1
 1638 0030 6FF48013 		mvn	r3, #1048576
 1639 0034 DDE92001 		ldrd	r0, [sp, #128]
 1640 0038 FFF7FEFF 		bl	__aeabi_dcmplt
 1641              	.LVL185:
 1642 003c 0028     		cmp	r0, #0
 1643 003e 43D1     		bne	.L197
 353:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 1644              		.loc 1 353 3 is_stmt 1 view .LVU401
 353:bsp/src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 1645              		.loc 1 353 6 is_stmt 0 view .LVU402
 1646 0040 4FF0FF32 		mov	r2, #-1
 1647 0044 AA4B     		ldr	r3, .L201+16
 1648 0046 DDE92001 		ldrd	r0, [sp, #128]
 1649 004a FFF7FEFF 		bl	__aeabi_dcmpgt
 1650              	.LVL186:
 1651 004e 0028     		cmp	r0, #0
 1652 0050 49D1     		bne	.L198
 358:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1653              		.loc 1 358 3 is_stmt 1 view .LVU403
 358:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1654              		.loc 1 358 6 is_stmt 0 view .LVU404
 1655 0052 A3A3     		adr	r3, .L201
 1656 0054 D3E90023 		ldrd	r2, [r3]
 1657 0058 DDE92001 		ldrd	r0, [sp, #128]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 42


 1658 005c FFF7FEFF 		bl	__aeabi_dcmpgt
 1659              	.LVL187:
 1660 0060 0028     		cmp	r0, #0
 1661 0062 57D1     		bne	.L133
 358:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1662              		.loc 1 358 34 discriminator 1 view .LVU405
 1663 0064 A0A3     		adr	r3, .L201+8
 1664 0066 D3E90023 		ldrd	r2, [r3]
 1665 006a DDE92001 		ldrd	r0, [sp, #128]
 1666 006e FFF7FEFF 		bl	__aeabi_dcmplt
 1667              	.LVL188:
 1668 0072 0028     		cmp	r0, #0
 1669 0074 4ED1     		bne	.L133
 367:bsp/src/printf.c ****   if (value < 0) {
 1670              		.loc 1 367 3 is_stmt 1 view .LVU406
 1671              	.LVL189:
 368:bsp/src/printf.c ****     negative = true;
 1672              		.loc 1 368 3 view .LVU407
 368:bsp/src/printf.c ****     negative = true;
 1673              		.loc 1 368 6 is_stmt 0 view .LVU408
 1674 0076 0022     		movs	r2, #0
 1675 0078 0023     		movs	r3, #0
 1676 007a DDE92001 		ldrd	r0, [sp, #128]
 1677 007e FFF7FEFF 		bl	__aeabi_dcmplt
 1678              	.LVL190:
 1679 0082 0028     		cmp	r0, #0
 1680 0084 56D1     		bne	.L199
 367:bsp/src/printf.c ****   if (value < 0) {
 1681              		.loc 1 367 8 view .LVU409
 1682 0086 4FF0000A 		mov	r10, #0
 1683              	.LVL191:
 1684              	.L136:
 374:bsp/src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1685              		.loc 1 374 3 is_stmt 1 view .LVU410
 374:bsp/src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1686              		.loc 1 374 6 is_stmt 0 view .LVU411
 1687 008a 19F4806F 		tst	r9, #1024
 1688 008e 5CD0     		beq	.L172
 1689              	.L138:
 375:bsp/src/printf.c ****   }
 1690              		.loc 1 375 10 view .LVU412
 1691 0090 0024     		movs	r4, #0
 1692              	.LVL192:
 1693              	.L140:
 378:bsp/src/printf.c ****     buf[len++] = '0';
 1694              		.loc 1 378 9 view .LVU413
 1695 0092 1F2C     		cmp	r4, #31
 1696 0094 5BD8     		bhi	.L141
 378:bsp/src/printf.c ****     buf[len++] = '0';
 1697              		.loc 1 378 42 discriminator 1 view .LVU414
 1698 0096 092D     		cmp	r5, #9
 1699 0098 59D9     		bls	.L141
 379:bsp/src/printf.c ****     prec--;
 1700              		.loc 1 379 5 is_stmt 1 view .LVU415
 1701              	.LVL193:
 379:bsp/src/printf.c ****     prec--;
 1702              		.loc 1 379 16 is_stmt 0 view .LVU416
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 43


 1703 009a 14AB     		add	r3, sp, #80
 1704 009c 2344     		add	r3, r3, r4
 1705 009e 3022     		movs	r2, #48
 1706 00a0 03F8202C 		strb	r2, [r3, #-32]
 380:bsp/src/printf.c ****   }
 1707              		.loc 1 380 5 is_stmt 1 view .LVU417
 380:bsp/src/printf.c ****   }
 1708              		.loc 1 380 9 is_stmt 0 view .LVU418
 1709 00a4 013D     		subs	r5, r5, #1
 1710              	.LVL194:
 379:bsp/src/printf.c ****     prec--;
 1711              		.loc 1 379 12 view .LVU419
 1712 00a6 0134     		adds	r4, r4, #1
 1713              	.LVL195:
 379:bsp/src/printf.c ****     prec--;
 1714              		.loc 1 379 12 view .LVU420
 1715 00a8 F3E7     		b	.L140
 1716              	.LVL196:
 1717              	.L196:
 350:bsp/src/printf.c ****   if (value < -DBL_MAX)
 1718              		.loc 1 350 5 is_stmt 1 view .LVU421
 350:bsp/src/printf.c ****   if (value < -DBL_MAX)
 1719              		.loc 1 350 12 is_stmt 0 view .LVU422
 1720 00aa CDF80C90 		str	r9, [sp, #12]
 1721 00ae CDF80880 		str	r8, [sp, #8]
 1722 00b2 0323     		movs	r3, #3
 1723 00b4 0193     		str	r3, [sp, #4]
 1724 00b6 8F4B     		ldr	r3, .L201+20
 1725 00b8 0093     		str	r3, [sp]
 1726 00ba 5B46     		mov	r3, fp
 1727 00bc 099A     		ldr	r2, [sp, #36]
 1728 00be 0899     		ldr	r1, [sp, #32]
 1729 00c0 0798     		ldr	r0, [sp, #28]
 1730 00c2 FFF7FEFF 		bl	_out_rev
 1731              	.LVL197:
 1732 00c6 06E1     		b	.L123
 1733              	.L197:
 352:bsp/src/printf.c ****   if (value > DBL_MAX)
 1734              		.loc 1 352 5 is_stmt 1 view .LVU423
 352:bsp/src/printf.c ****   if (value > DBL_MAX)
 1735              		.loc 1 352 12 is_stmt 0 view .LVU424
 1736 00c8 CDF80C90 		str	r9, [sp, #12]
 1737 00cc CDF80880 		str	r8, [sp, #8]
 1738 00d0 0423     		movs	r3, #4
 1739 00d2 0193     		str	r3, [sp, #4]
 1740 00d4 884B     		ldr	r3, .L201+24
 1741 00d6 0093     		str	r3, [sp]
 1742 00d8 5B46     		mov	r3, fp
 1743 00da 099A     		ldr	r2, [sp, #36]
 1744 00dc 0899     		ldr	r1, [sp, #32]
 1745 00de 0798     		ldr	r0, [sp, #28]
 1746 00e0 FFF7FEFF 		bl	_out_rev
 1747              	.LVL198:
 1748 00e4 F7E0     		b	.L123
 1749              	.L198:
 354:bsp/src/printf.c **** 
 1750              		.loc 1 354 5 is_stmt 1 view .LVU425
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 44


 354:bsp/src/printf.c **** 
 1751              		.loc 1 354 12 is_stmt 0 view .LVU426
 1752 00e6 19F00403 		ands	r3, r9, #4
 1753 00ea 0FD0     		beq	.L169
 1754 00ec 834A     		ldr	r2, .L201+28
 1755              	.L131:
 354:bsp/src/printf.c **** 
 1756              		.loc 1 354 12 discriminator 4 view .LVU427
 1757 00ee 7BB1     		cbz	r3, .L170
 354:bsp/src/printf.c **** 
 1758              		.loc 1 354 12 view .LVU428
 1759 00f0 0423     		movs	r3, #4
 1760              	.L132:
 354:bsp/src/printf.c **** 
 1761              		.loc 1 354 12 discriminator 8 view .LVU429
 1762 00f2 CDF80C90 		str	r9, [sp, #12]
 1763 00f6 CDF80880 		str	r8, [sp, #8]
 1764 00fa 0193     		str	r3, [sp, #4]
 1765 00fc 0092     		str	r2, [sp]
 1766 00fe 5B46     		mov	r3, fp
 1767 0100 099A     		ldr	r2, [sp, #36]
 1768 0102 0899     		ldr	r1, [sp, #32]
 1769 0104 0798     		ldr	r0, [sp, #28]
 1770 0106 FFF7FEFF 		bl	_out_rev
 1771              	.LVL199:
 1772 010a E4E0     		b	.L123
 1773              	.L169:
 354:bsp/src/printf.c **** 
 1774              		.loc 1 354 12 view .LVU430
 1775 010c 7C4A     		ldr	r2, .L201+32
 1776 010e EEE7     		b	.L131
 1777              	.L170:
 1778 0110 0323     		movs	r3, #3
 1779 0112 EEE7     		b	.L132
 1780              	.L133:
 360:bsp/src/printf.c **** #else
 1781              		.loc 1 360 5 is_stmt 1 view .LVU431
 360:bsp/src/printf.c **** #else
 1782              		.loc 1 360 12 is_stmt 0 view .LVU432
 1783 0114 CDF81090 		str	r9, [sp, #16]
 1784 0118 CDF80C80 		str	r8, [sp, #12]
 1785 011c 0295     		str	r5, [sp, #8]
 1786 011e 9DED207B 		vldr.64	d7, [sp, #128]
 1787 0122 8DED007B 		vstr.64	d7, [sp]
 1788 0126 5B46     		mov	r3, fp
 1789 0128 099A     		ldr	r2, [sp, #36]
 1790 012a 0899     		ldr	r1, [sp, #32]
 1791 012c 0798     		ldr	r0, [sp, #28]
 1792 012e FFF7FEFF 		bl	_etoa
 1793              	.LVL200:
 1794 0132 D0E0     		b	.L123
 1795              	.LVL201:
 1796              	.L199:
 369:bsp/src/printf.c ****     value = 0 - value;
 1797              		.loc 1 369 5 is_stmt 1 view .LVU433
 370:bsp/src/printf.c ****   }
 1798              		.loc 1 370 5 view .LVU434
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 45


 370:bsp/src/printf.c ****   }
 1799              		.loc 1 370 11 is_stmt 0 view .LVU435
 1800 0134 DDE92023 		ldrd	r2, [sp, #128]
 1801 0138 0020     		movs	r0, #0
 1802 013a 0021     		movs	r1, #0
 1803 013c FFF7FEFF 		bl	__aeabi_dsub
 1804              	.LVL202:
 1805 0140 CDE92001 		strd	r0, [sp, #128]
 1806              	.LVL203:
 369:bsp/src/printf.c ****     value = 0 - value;
 1807              		.loc 1 369 14 view .LVU436
 1808 0144 4FF0010A 		mov	r10, #1
 1809 0148 9FE7     		b	.L136
 1810              	.LVL204:
 1811              	.L172:
 375:bsp/src/printf.c ****   }
 1812              		.loc 1 375 10 view .LVU437
 1813 014a 0625     		movs	r5, #6
 1814 014c A0E7     		b	.L138
 1815              	.LVL205:
 1816              	.L141:
 383:bsp/src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 1817              		.loc 1 383 3 is_stmt 1 view .LVU438
 383:bsp/src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 1818              		.loc 1 383 7 is_stmt 0 view .LVU439
 1819 014e DDE92001 		ldrd	r0, [sp, #128]
 1820 0152 FFF7FEFF 		bl	__aeabi_d2iz
 1821              	.LVL206:
 1822 0156 0646     		mov	r6, r0
 1823              	.LVL207:
 384:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1824              		.loc 1 384 3 is_stmt 1 view .LVU440
 384:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1825              		.loc 1 384 23 is_stmt 0 view .LVU441
 1826 0158 FFF7FEFF 		bl	__aeabi_i2d
 1827              	.LVL208:
 384:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1828              		.loc 1 384 23 view .LVU442
 1829 015c 0246     		mov	r2, r0
 1830 015e 0B46     		mov	r3, r1
 1831 0160 DDE92001 		ldrd	r0, [sp, #128]
 1832 0164 FFF7FEFF 		bl	__aeabi_dsub
 1833              	.LVL209:
 384:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1834              		.loc 1 384 39 view .LVU443
 1835 0168 664B     		ldr	r3, .L201+36
 1836 016a 03EBC503 		add	r3, r3, r5, lsl #3
 1837 016e 93ED008B 		vldr.64	d8, [r3]
 384:bsp/src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1838              		.loc 1 384 10 view .LVU444
 1839 0172 53EC182B 		vmov	r2, r3, d8
 1840 0176 FFF7FEFF 		bl	__aeabi_dmul
 1841              	.LVL210:
 1842 017a CDE90A01 		strd	r0, [sp, #40]
 1843              	.LVL211:
 385:bsp/src/printf.c ****   diff = tmp - frac;
 1844              		.loc 1 385 3 is_stmt 1 view .LVU445
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 46


 385:bsp/src/printf.c ****   diff = tmp - frac;
 1845              		.loc 1 385 17 is_stmt 0 view .LVU446
 1846 017e FFF7FEFF 		bl	__aeabi_d2uiz
 1847              	.LVL212:
 385:bsp/src/printf.c ****   diff = tmp - frac;
 1848              		.loc 1 385 17 view .LVU447
 1849 0182 0746     		mov	r7, r0
 1850              	.LVL213:
 386:bsp/src/printf.c **** 
 1851              		.loc 1 386 3 is_stmt 1 view .LVU448
 386:bsp/src/printf.c **** 
 1852              		.loc 1 386 14 is_stmt 0 view .LVU449
 1853 0184 FFF7FEFF 		bl	__aeabi_ui2d
 1854              	.LVL214:
 386:bsp/src/printf.c **** 
 1855              		.loc 1 386 8 view .LVU450
 1856 0188 0246     		mov	r2, r0
 1857 018a 0B46     		mov	r3, r1
 1858 018c DDE90A01 		ldrd	r0, [sp, #40]
 1859 0190 FFF7FEFF 		bl	__aeabi_dsub
 1860              	.LVL215:
 1861 0194 CDE90A01 		strd	r0, [sp, #40]
 1862              	.LVL216:
 388:bsp/src/printf.c ****     ++frac;
 1863              		.loc 1 388 3 is_stmt 1 view .LVU451
 388:bsp/src/printf.c ****     ++frac;
 1864              		.loc 1 388 6 is_stmt 0 view .LVU452
 1865 0198 0022     		movs	r2, #0
 1866 019a 5B4B     		ldr	r3, .L201+40
 1867 019c FFF7FEFF 		bl	__aeabi_dcmpgt
 1868              	.LVL217:
 388:bsp/src/printf.c ****     ++frac;
 1869              		.loc 1 388 6 view .LVU453
 1870 01a0 50B3     		cbz	r0, .L187
 389:bsp/src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 1871              		.loc 1 389 5 is_stmt 1 view .LVU454
 1872 01a2 0137     		adds	r7, r7, #1
 1873              	.LVL218:
 391:bsp/src/printf.c ****       frac = 0;
 1874              		.loc 1 391 5 view .LVU455
 391:bsp/src/printf.c ****       frac = 0;
 1875              		.loc 1 391 14 is_stmt 0 view .LVU456
 1876 01a4 3846     		mov	r0, r7
 1877 01a6 FFF7FEFF 		bl	__aeabi_ui2d
 1878              	.LVL219:
 391:bsp/src/printf.c ****       frac = 0;
 1879              		.loc 1 391 8 view .LVU457
 1880 01aa 0246     		mov	r2, r0
 1881 01ac 0B46     		mov	r3, r1
 1882 01ae 51EC180B 		vmov	r0, r1, d8
 1883 01b2 FFF7FEFF 		bl	__aeabi_dcmple
 1884              	.LVL220:
 1885 01b6 08B1     		cbz	r0, .L145
 392:bsp/src/printf.c ****       ++whole;
 1886              		.loc 1 392 7 is_stmt 1 view .LVU458
 1887              	.LVL221:
 393:bsp/src/printf.c ****     }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 47


 1888              		.loc 1 393 7 view .LVU459
 1889 01b8 0136     		adds	r6, r6, #1
 1890              	.LVL222:
 392:bsp/src/printf.c ****       ++whole;
 1891              		.loc 1 392 12 is_stmt 0 view .LVU460
 1892 01ba 0027     		movs	r7, #0
 1893              	.LVL223:
 1894              	.L145:
 403:bsp/src/printf.c ****     diff = value - (double)whole;
 1895              		.loc 1 403 3 is_stmt 1 view .LVU461
 403:bsp/src/printf.c ****     diff = value - (double)whole;
 1896              		.loc 1 403 6 is_stmt 0 view .LVU462
 1897 01bc 55BB     		cbnz	r5, .L148
 404:bsp/src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1898              		.loc 1 404 5 is_stmt 1 view .LVU463
 404:bsp/src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1899              		.loc 1 404 20 is_stmt 0 view .LVU464
 1900 01be 3046     		mov	r0, r6
 1901 01c0 FFF7FEFF 		bl	__aeabi_i2d
 1902              	.LVL224:
 404:bsp/src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1903              		.loc 1 404 10 view .LVU465
 1904 01c4 0246     		mov	r2, r0
 1905 01c6 0B46     		mov	r3, r1
 1906 01c8 DDE92001 		ldrd	r0, [sp, #128]
 1907 01cc FFF7FEFF 		bl	__aeabi_dsub
 1908              	.LVL225:
 1909 01d0 CDE90A01 		strd	r0, [sp, #40]
 1910              	.LVL226:
 405:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 1911              		.loc 1 405 5 is_stmt 1 view .LVU466
 405:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 1912              		.loc 1 405 8 is_stmt 0 view .LVU467
 1913 01d4 0022     		movs	r2, #0
 1914 01d6 4C4B     		ldr	r3, .L201+40
 1915 01d8 FFF7FEFF 		bl	__aeabi_dcmplt
 1916              	.LVL227:
 405:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 1917              		.loc 1 405 8 view .LVU468
 1918 01dc 38B1     		cbz	r0, .L149
 405:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 1919              		.loc 1 405 24 discriminator 2 view .LVU469
 1920 01de 0022     		movs	r2, #0
 1921 01e0 494B     		ldr	r3, .L201+40
 1922 01e2 DDE90A01 		ldrd	r0, [sp, #40]
 1923 01e6 FFF7FEFF 		bl	__aeabi_dcmpgt
 1924              	.LVL228:
 1925 01ea 0028     		cmp	r0, #0
 1926 01ec 3DD0     		beq	.L159
 1927              	.L149:
 405:bsp/src/printf.c ****       // exactly 0.5 and ODD, then round up
 1928              		.loc 1 405 41 discriminator 3 view .LVU470
 1929 01ee 16F0010F 		tst	r6, #1
 1930 01f2 3AD0     		beq	.L159
 408:bsp/src/printf.c ****     }
 1931              		.loc 1 408 7 is_stmt 1 view .LVU471
 1932 01f4 0136     		adds	r6, r6, #1
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 48


 1933              	.LVL229:
 408:bsp/src/printf.c ****     }
 1934              		.loc 1 408 7 is_stmt 0 view .LVU472
 1935 01f6 38E0     		b	.L159
 1936              	.L187:
 396:bsp/src/printf.c ****   }
 1937              		.loc 1 396 8 is_stmt 1 view .LVU473
 396:bsp/src/printf.c ****   }
 1938              		.loc 1 396 11 is_stmt 0 view .LVU474
 1939 01f8 0022     		movs	r2, #0
 1940 01fa 434B     		ldr	r3, .L201+40
 1941 01fc DDE90A01 		ldrd	r0, [sp, #40]
 1942 0200 FFF7FEFF 		bl	__aeabi_dcmplt
 1943              	.LVL230:
 1944 0204 0028     		cmp	r0, #0
 1945 0206 D9D1     		bne	.L145
 398:bsp/src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 1946              		.loc 1 398 8 is_stmt 1 view .LVU475
 398:bsp/src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 1947              		.loc 1 398 11 is_stmt 0 view .LVU476
 1948 0208 17B1     		cbz	r7, .L147
 398:bsp/src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 1949              		.loc 1 398 25 discriminator 1 view .LVU477
 1950 020a 17F0010F 		tst	r7, #1
 1951 020e D5D0     		beq	.L145
 1952              	.L147:
 400:bsp/src/printf.c ****   }
 1953              		.loc 1 400 5 is_stmt 1 view .LVU478
 1954 0210 0137     		adds	r7, r7, #1
 1955              	.LVL231:
 400:bsp/src/printf.c ****   }
 1956              		.loc 1 400 5 is_stmt 0 view .LVU479
 1957 0212 D3E7     		b	.L145
 1958              	.LVL232:
 1959              	.L148:
 1960              	.LBB29:
 414:bsp/src/printf.c ****       --count;
 1961              		.loc 1 414 11 view .LVU480
 1962 0214 1F2C     		cmp	r4, #31
 1963 0216 1BD8     		bhi	.L155
 415:bsp/src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 1964              		.loc 1 415 7 is_stmt 1 view .LVU481
 1965 0218 013D     		subs	r5, r5, #1
 1966              	.LVL233:
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1967              		.loc 1 416 7 view .LVU482
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1968              		.loc 1 416 39 is_stmt 0 view .LVU483
 1969 021a 3C4B     		ldr	r3, .L201+44
 1970 021c A3FB0723 		umull	r2, r3, r3, r7
 1971 0220 DB08     		lsrs	r3, r3, #3
 1972 0222 1946     		mov	r1, r3
 1973 0224 03EB8303 		add	r3, r3, r3, lsl #2
 1974 0228 5A00     		lsls	r2, r3, #1
 1975 022a BB1A     		subs	r3, r7, r2
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1976              		.loc 1 416 14 view .LVU484
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 49


 1977 022c 621C     		adds	r2, r4, #1
 1978              	.LVL234:
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1979              		.loc 1 416 20 view .LVU485
 1980 022e 3033     		adds	r3, r3, #48
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1981              		.loc 1 416 18 view .LVU486
 1982 0230 14A8     		add	r0, sp, #80
 1983 0232 0444     		add	r4, r4, r0
 1984 0234 04F8203C 		strb	r3, [r4, #-32]
 417:bsp/src/printf.c ****         break;
 1985              		.loc 1 417 7 is_stmt 1 view .LVU487
 1986              	.LVL235:
 417:bsp/src/printf.c ****         break;
 1987              		.loc 1 417 10 is_stmt 0 view .LVU488
 1988 0238 092F     		cmp	r7, #9
 1989 023a 2DD9     		bls	.L173
 417:bsp/src/printf.c ****         break;
 1990              		.loc 1 417 18 view .LVU489
 1991 023c 0F46     		mov	r7, r1
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 1992              		.loc 1 416 14 view .LVU490
 1993 023e 1446     		mov	r4, r2
 1994 0240 E8E7     		b	.L148
 1995              	.LVL236:
 1996              	.L157:
 423:bsp/src/printf.c ****     }
 1997              		.loc 1 423 7 is_stmt 1 view .LVU491
 423:bsp/src/printf.c ****     }
 1998              		.loc 1 423 18 is_stmt 0 view .LVU492
 1999 0242 14AA     		add	r2, sp, #80
 2000 0244 2244     		add	r2, r2, r4
 2001 0246 3021     		movs	r1, #48
 2002 0248 02F8201C 		strb	r1, [r2, #-32]
 422:bsp/src/printf.c ****       buf[len++] = '0';
 2003              		.loc 1 422 53 view .LVU493
 2004 024c 1D46     		mov	r5, r3
 423:bsp/src/printf.c ****     }
 2005              		.loc 1 423 14 view .LVU494
 2006 024e 0134     		adds	r4, r4, #1
 2007              	.LVL237:
 2008              	.L155:
 422:bsp/src/printf.c ****       buf[len++] = '0';
 2009              		.loc 1 422 11 view .LVU495
 2010 0250 1F2C     		cmp	r4, #31
 2011 0252 02D8     		bhi	.L156
 422:bsp/src/printf.c ****       buf[len++] = '0';
 2012              		.loc 1 422 53 discriminator 1 view .LVU496
 2013 0254 6B1E     		subs	r3, r5, #1
 2014              	.LVL238:
 422:bsp/src/printf.c ****       buf[len++] = '0';
 2015              		.loc 1 422 44 discriminator 1 view .LVU497
 2016 0256 002D     		cmp	r5, #0
 2017 0258 F3D1     		bne	.L157
 2018              	.LVL239:
 2019              	.L156:
 425:bsp/src/printf.c ****       // add decimal
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 50


 2020              		.loc 1 425 5 is_stmt 1 view .LVU498
 425:bsp/src/printf.c ****       // add decimal
 2021              		.loc 1 425 8 is_stmt 0 view .LVU499
 2022 025a 1F2C     		cmp	r4, #31
 2023 025c 05D8     		bhi	.L159
 427:bsp/src/printf.c ****     }
 2024              		.loc 1 427 7 is_stmt 1 view .LVU500
 2025              	.LVL240:
 427:bsp/src/printf.c ****     }
 2026              		.loc 1 427 18 is_stmt 0 view .LVU501
 2027 025e 14AB     		add	r3, sp, #80
 2028 0260 2344     		add	r3, r3, r4
 2029 0262 2E22     		movs	r2, #46
 2030 0264 03F8202C 		strb	r2, [r3, #-32]
 427:bsp/src/printf.c ****     }
 2031              		.loc 1 427 14 view .LVU502
 2032 0268 0134     		adds	r4, r4, #1
 2033              	.LVL241:
 2034              	.L159:
 427:bsp/src/printf.c ****     }
 2035              		.loc 1 427 14 view .LVU503
 2036              	.LBE29:
 432:bsp/src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
 2037              		.loc 1 432 9 view .LVU504
 2038 026a 1F2C     		cmp	r4, #31
 2039 026c 17D8     		bhi	.L158
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2040              		.loc 1 433 5 is_stmt 1 view .LVU505
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2041              		.loc 1 433 37 is_stmt 0 view .LVU506
 2042 026e 284A     		ldr	r2, .L201+48
 2043 0270 82FB0632 		smull	r3, r2, r2, r6
 2044 0274 F317     		asrs	r3, r6, #31
 2045 0276 C3EBA203 		rsb	r3, r3, r2, asr #2
 2046 027a 1A46     		mov	r2, r3
 2047 027c 03EB8303 		add	r3, r3, r3, lsl #2
 2048 0280 5900     		lsls	r1, r3, #1
 2049 0282 731A     		subs	r3, r6, r1
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2050              		.loc 1 433 12 view .LVU507
 2051 0284 611C     		adds	r1, r4, #1
 2052              	.LVL242:
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2053              		.loc 1 433 18 view .LVU508
 2054 0286 3033     		adds	r3, r3, #48
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2055              		.loc 1 433 16 view .LVU509
 2056 0288 14A8     		add	r0, sp, #80
 2057 028a 0444     		add	r4, r4, r0
 2058 028c 04F8203C 		strb	r3, [r4, #-32]
 434:bsp/src/printf.c ****       break;
 2059              		.loc 1 434 5 is_stmt 1 view .LVU510
 434:bsp/src/printf.c ****       break;
 2060              		.loc 1 434 17 is_stmt 0 view .LVU511
 2061 0290 1646     		mov	r6, r2
 2062              	.LVL243:
 434:bsp/src/printf.c ****       break;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 51


 2063              		.loc 1 434 8 view .LVU512
 2064 0292 1AB1     		cbz	r2, .L174
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2065              		.loc 1 433 12 view .LVU513
 2066 0294 0C46     		mov	r4, r1
 2067 0296 E8E7     		b	.L159
 2068              	.LVL244:
 2069              	.L173:
 2070              	.LBB30:
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 2071              		.loc 1 416 14 view .LVU514
 2072 0298 1446     		mov	r4, r2
 2073 029a D9E7     		b	.L155
 2074              	.LVL245:
 2075              	.L174:
 416:bsp/src/printf.c ****       if (!(frac /= 10U)) {
 2076              		.loc 1 416 14 view .LVU515
 2077              	.LBE30:
 433:bsp/src/printf.c ****     if (!(whole /= 10)) {
 2078              		.loc 1 433 12 view .LVU516
 2079 029c 0C46     		mov	r4, r1
 2080              	.LVL246:
 2081              	.L158:
 440:bsp/src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2082              		.loc 1 440 3 is_stmt 1 view .LVU517
 440:bsp/src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2083              		.loc 1 440 29 is_stmt 0 view .LVU518
 2084 029e 09F00303 		and	r3, r9, #3
 440:bsp/src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2085              		.loc 1 440 6 view .LVU519
 2086 02a2 012B     		cmp	r3, #1
 2087 02a4 36D0     		beq	.L200
 2088              	.LVL247:
 2089              	.L161:
 449:bsp/src/printf.c ****     if (negative) {
 2090              		.loc 1 449 3 is_stmt 1 view .LVU520
 449:bsp/src/printf.c ****     if (negative) {
 2091              		.loc 1 449 6 is_stmt 0 view .LVU521
 2092 02a6 1F2C     		cmp	r4, #31
 2093 02a8 08D8     		bhi	.L166
 450:bsp/src/printf.c ****       buf[len++] = '-';
 2094              		.loc 1 450 5 is_stmt 1 view .LVU522
 450:bsp/src/printf.c ****       buf[len++] = '-';
 2095              		.loc 1 450 8 is_stmt 0 view .LVU523
 2096 02aa BAF1000F 		cmp	r10, #0
 2097 02ae 47D0     		beq	.L167
 451:bsp/src/printf.c ****     }
 2098              		.loc 1 451 7 is_stmt 1 view .LVU524
 2099              	.LVL248:
 451:bsp/src/printf.c ****     }
 2100              		.loc 1 451 18 is_stmt 0 view .LVU525
 2101 02b0 14AB     		add	r3, sp, #80
 2102 02b2 2344     		add	r3, r3, r4
 2103 02b4 2D22     		movs	r2, #45
 2104 02b6 03F8202C 		strb	r2, [r3, #-32]
 451:bsp/src/printf.c ****     }
 2105              		.loc 1 451 14 view .LVU526
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 52


 2106 02ba 0134     		adds	r4, r4, #1
 2107              	.LVL249:
 2108              	.L166:
 461:bsp/src/printf.c **** }
 2109              		.loc 1 461 3 is_stmt 1 view .LVU527
 461:bsp/src/printf.c **** }
 2110              		.loc 1 461 10 is_stmt 0 view .LVU528
 2111 02bc CDF80C90 		str	r9, [sp, #12]
 2112 02c0 CDF80880 		str	r8, [sp, #8]
 2113 02c4 0194     		str	r4, [sp, #4]
 2114 02c6 0CAB     		add	r3, sp, #48
 2115 02c8 0093     		str	r3, [sp]
 2116 02ca 5B46     		mov	r3, fp
 2117 02cc 099A     		ldr	r2, [sp, #36]
 2118 02ce 0899     		ldr	r1, [sp, #32]
 2119 02d0 0798     		ldr	r0, [sp, #28]
 2120 02d2 FFF7FEFF 		bl	_out_rev
 2121              	.LVL250:
 2122              	.L123:
 462:bsp/src/printf.c **** 
 2123              		.loc 1 462 1 view .LVU529
 2124 02d6 15B0     		add	sp, sp, #84
 2125              	.LCFI23:
 2126              		.cfi_remember_state
 2127              		.cfi_def_cfa_offset 44
 2128              		@ sp needed
 2129 02d8 BDEC028B 		vldm	sp!, {d8}
 2130              	.LCFI24:
 2131              		.cfi_restore 80
 2132              		.cfi_restore 81
 2133              		.cfi_def_cfa_offset 36
 2134 02dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2135              	.LVL251:
 2136              	.L202:
 462:bsp/src/printf.c **** 
 2137              		.loc 1 462 1 view .LVU530
 2138              		.align	3
 2139              	.L201:
 2140 02e0 00000000 		.word	0
 2141 02e4 65CDCD41 		.word	1104006501
 2142 02e8 00000000 		.word	0
 2143 02ec 65CDCDC1 		.word	-1043477147
 2144 02f0 FFFFEF7F 		.word	2146435071
 2145 02f4 0C000000 		.word	.LC2
 2146 02f8 10000000 		.word	.LC3
 2147 02fc 04000000 		.word	.LC1
 2148 0300 00000000 		.word	.LC0
 2149 0304 00000000 		.word	.LANCHOR0
 2150 0308 0000E03F 		.word	1071644672
 2151 030c CDCCCCCC 		.word	-858993459
 2152 0310 67666666 		.word	1717986919
 2153              	.LVL252:
 2154              	.L200:
 2155              	.LCFI25:
 2156              		.cfi_restore_state
 441:bsp/src/printf.c ****       width--;
 2157              		.loc 1 441 5 is_stmt 1 view .LVU531
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 53


 441:bsp/src/printf.c ****       width--;
 2158              		.loc 1 441 8 is_stmt 0 view .LVU532
 2159 0314 B8F1000F 		cmp	r8, #0
 2160 0318 07D0     		beq	.L164
 441:bsp/src/printf.c ****       width--;
 2161              		.loc 1 441 15 discriminator 1 view .LVU533
 2162 031a BAF1000F 		cmp	r10, #0
 2163 031e 02D1     		bne	.L163
 441:bsp/src/printf.c ****       width--;
 2164              		.loc 1 441 28 discriminator 2 view .LVU534
 2165 0320 19F00C0F 		tst	r9, #12
 2166 0324 01D0     		beq	.L164
 2167              	.L163:
 442:bsp/src/printf.c ****     }
 2168              		.loc 1 442 7 is_stmt 1 view .LVU535
 442:bsp/src/printf.c ****     }
 2169              		.loc 1 442 12 is_stmt 0 view .LVU536
 2170 0326 08F1FF38 		add	r8, r8, #-1
 2171              	.LVL253:
 2172              	.L164:
 444:bsp/src/printf.c ****       buf[len++] = '0';
 2173              		.loc 1 444 11 view .LVU537
 2174 032a 4445     		cmp	r4, r8
 2175 032c BBD2     		bcs	.L161
 444:bsp/src/printf.c ****       buf[len++] = '0';
 2176              		.loc 1 444 26 discriminator 1 view .LVU538
 2177 032e 1F2C     		cmp	r4, #31
 2178 0330 B9D8     		bhi	.L161
 445:bsp/src/printf.c ****     }
 2179              		.loc 1 445 7 is_stmt 1 view .LVU539
 2180              	.LVL254:
 445:bsp/src/printf.c ****     }
 2181              		.loc 1 445 18 is_stmt 0 view .LVU540
 2182 0332 14AB     		add	r3, sp, #80
 2183 0334 2344     		add	r3, r3, r4
 2184 0336 3022     		movs	r2, #48
 2185 0338 03F8202C 		strb	r2, [r3, #-32]
 445:bsp/src/printf.c ****     }
 2186              		.loc 1 445 14 view .LVU541
 2187 033c 0134     		adds	r4, r4, #1
 2188              	.LVL255:
 445:bsp/src/printf.c ****     }
 2189              		.loc 1 445 14 view .LVU542
 2190 033e F4E7     		b	.L164
 2191              	.L167:
 453:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2192              		.loc 1 453 10 is_stmt 1 view .LVU543
 453:bsp/src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2193              		.loc 1 453 13 is_stmt 0 view .LVU544
 2194 0340 19F0040F 		tst	r9, #4
 2195 0344 06D0     		beq	.L168
 454:bsp/src/printf.c ****     }
 2196              		.loc 1 454 7 is_stmt 1 view .LVU545
 2197              	.LVL256:
 454:bsp/src/printf.c ****     }
 2198              		.loc 1 454 18 is_stmt 0 view .LVU546
 2199 0346 14AB     		add	r3, sp, #80
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 54


 2200 0348 2344     		add	r3, r3, r4
 2201 034a 2B22     		movs	r2, #43
 2202 034c 03F8202C 		strb	r2, [r3, #-32]
 454:bsp/src/printf.c ****     }
 2203              		.loc 1 454 14 view .LVU547
 2204 0350 0134     		adds	r4, r4, #1
 2205              	.LVL257:
 454:bsp/src/printf.c ****     }
 2206              		.loc 1 454 14 view .LVU548
 2207 0352 B3E7     		b	.L166
 2208              	.L168:
 456:bsp/src/printf.c ****       buf[len++] = ' ';
 2209              		.loc 1 456 10 is_stmt 1 view .LVU549
 456:bsp/src/printf.c ****       buf[len++] = ' ';
 2210              		.loc 1 456 13 is_stmt 0 view .LVU550
 2211 0354 19F0080F 		tst	r9, #8
 2212 0358 B0D0     		beq	.L166
 457:bsp/src/printf.c ****     }
 2213              		.loc 1 457 7 is_stmt 1 view .LVU551
 2214              	.LVL258:
 457:bsp/src/printf.c ****     }
 2215              		.loc 1 457 18 is_stmt 0 view .LVU552
 2216 035a 14AB     		add	r3, sp, #80
 2217 035c 2344     		add	r3, r3, r4
 2218 035e 2022     		movs	r2, #32
 2219 0360 03F8202C 		strb	r2, [r3, #-32]
 457:bsp/src/printf.c ****     }
 2220              		.loc 1 457 14 view .LVU553
 2221 0364 0134     		adds	r4, r4, #1
 2222              	.LVL259:
 457:bsp/src/printf.c ****     }
 2223              		.loc 1 457 14 view .LVU554
 2224 0366 A9E7     		b	.L166
 2225              		.cfi_endproc
 2226              	.LFE141:
 2228              		.section	.text._vsnprintf,"ax",%progbits
 2229              		.align	1
 2230              		.syntax unified
 2231              		.thumb
 2232              		.thumb_func
 2233              		.fpu fpv4-sp-d16
 2235              	_vsnprintf:
 2236              	.LVL260:
 2237              	.LFB143:
 572:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 573:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 574:bsp/src/printf.c **** 
 575:bsp/src/printf.c **** 
 576:bsp/src/printf.c **** // internal vsnprintf
 577:bsp/src/printf.c **** static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_l
 578:bsp/src/printf.c **** {
 2238              		.loc 1 578 1 is_stmt 1 view -0
 2239              		.cfi_startproc
 2240              		@ args = 4, pretend = 0, frame = 16
 2241              		@ frame_needed = 0, uses_anonymous_args = 0
 2242              		.loc 1 578 1 is_stmt 0 view .LVU556
 2243 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 55


 2244              	.LCFI26:
 2245              		.cfi_def_cfa_offset 36
 2246              		.cfi_offset 4, -36
 2247              		.cfi_offset 5, -32
 2248              		.cfi_offset 6, -28
 2249              		.cfi_offset 7, -24
 2250              		.cfi_offset 8, -20
 2251              		.cfi_offset 9, -16
 2252              		.cfi_offset 10, -12
 2253              		.cfi_offset 11, -8
 2254              		.cfi_offset 14, -4
 2255 0004 8FB0     		sub	sp, sp, #60
 2256              	.LCFI27:
 2257              		.cfi_def_cfa_offset 96
 2258 0006 0646     		mov	r6, r0
 2259 0008 9346     		mov	fp, r2
 2260 000a 0D93     		str	r3, [sp, #52]
 579:bsp/src/printf.c ****   unsigned int flags, width, precision, n;
 2261              		.loc 1 579 3 is_stmt 1 view .LVU557
 580:bsp/src/printf.c ****   size_t idx = 0U;
 2262              		.loc 1 580 3 view .LVU558
 2263              	.LVL261:
 581:bsp/src/printf.c **** 
 582:bsp/src/printf.c ****   if (!buffer) {
 2264              		.loc 1 582 3 view .LVU559
 2265              		.loc 1 582 6 is_stmt 0 view .LVU560
 2266 000c 0A91     		str	r1, [sp, #40]
 2267 000e 0029     		cmp	r1, #0
 2268 0010 00F03A83 		beq	.L303
 2269              	.L204:
 2270              	.LBB31:
 583:bsp/src/printf.c ****     // use null output function
 584:bsp/src/printf.c ****     out = _out_null;
 585:bsp/src/printf.c ****   }
 586:bsp/src/printf.c **** 
 587:bsp/src/printf.c ****   while (*format)
 588:bsp/src/printf.c ****   {
 589:bsp/src/printf.c ****     // format specifier?  %[flags][width][.precision][length]
 590:bsp/src/printf.c ****     if (*format != '%') {
 591:bsp/src/printf.c ****       // no
 592:bsp/src/printf.c ****       out(*format, buffer, idx++, maxlen);
 593:bsp/src/printf.c ****       format++;
 594:bsp/src/printf.c ****       continue;
 595:bsp/src/printf.c ****     }
 596:bsp/src/printf.c ****     else {
 597:bsp/src/printf.c ****       // yes, evaluate it
 598:bsp/src/printf.c ****       format++;
 599:bsp/src/printf.c ****     }
 600:bsp/src/printf.c **** 
 601:bsp/src/printf.c ****     // evaluate flags
 602:bsp/src/printf.c ****     flags = 0U;
 603:bsp/src/printf.c ****     do {
 604:bsp/src/printf.c ****       switch (*format) {
 605:bsp/src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 606:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 607:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 608:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 56


 609:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 610:bsp/src/printf.c ****         default :                                   n = 0U; break;
 611:bsp/src/printf.c ****       }
 612:bsp/src/printf.c ****     } while (n);
 613:bsp/src/printf.c **** 
 614:bsp/src/printf.c ****     // evaluate width field
 615:bsp/src/printf.c ****     width = 0U;
 616:bsp/src/printf.c ****     if (_is_digit(*format)) {
 617:bsp/src/printf.c ****       width = _atoi(&format);
 618:bsp/src/printf.c ****     }
 619:bsp/src/printf.c ****     else if (*format == '*') {
 620:bsp/src/printf.c ****       const int w = va_arg(va, int);
 621:bsp/src/printf.c ****       if (w < 0) {
 622:bsp/src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 623:bsp/src/printf.c ****         width = (unsigned int)-w;
 624:bsp/src/printf.c ****       }
 625:bsp/src/printf.c ****       else {
 626:bsp/src/printf.c ****         width = (unsigned int)w;
 627:bsp/src/printf.c ****       }
 628:bsp/src/printf.c ****       format++;
 629:bsp/src/printf.c ****     }
 630:bsp/src/printf.c **** 
 631:bsp/src/printf.c ****     // evaluate precision field
 632:bsp/src/printf.c ****     precision = 0U;
 633:bsp/src/printf.c ****     if (*format == '.') {
 634:bsp/src/printf.c ****       flags |= FLAGS_PRECISION;
 635:bsp/src/printf.c ****       format++;
 636:bsp/src/printf.c ****       if (_is_digit(*format)) {
 637:bsp/src/printf.c ****         precision = _atoi(&format);
 638:bsp/src/printf.c ****       }
 639:bsp/src/printf.c ****       else if (*format == '*') {
 640:bsp/src/printf.c ****         const int prec = (int)va_arg(va, int);
 641:bsp/src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 642:bsp/src/printf.c ****         format++;
 643:bsp/src/printf.c ****       }
 644:bsp/src/printf.c ****     }
 645:bsp/src/printf.c **** 
 646:bsp/src/printf.c ****     // evaluate length field
 647:bsp/src/printf.c ****     switch (*format) {
 648:bsp/src/printf.c ****       case 'l' :
 649:bsp/src/printf.c ****         flags |= FLAGS_LONG;
 650:bsp/src/printf.c ****         format++;
 651:bsp/src/printf.c ****         if (*format == 'l') {
 652:bsp/src/printf.c ****           flags |= FLAGS_LONG_LONG;
 653:bsp/src/printf.c ****           format++;
 654:bsp/src/printf.c ****         }
 655:bsp/src/printf.c ****         break;
 656:bsp/src/printf.c ****       case 'h' :
 657:bsp/src/printf.c ****         flags |= FLAGS_SHORT;
 658:bsp/src/printf.c ****         format++;
 659:bsp/src/printf.c ****         if (*format == 'h') {
 660:bsp/src/printf.c ****           flags |= FLAGS_CHAR;
 661:bsp/src/printf.c ****           format++;
 662:bsp/src/printf.c ****         }
 663:bsp/src/printf.c ****         break;
 664:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_PTRDIFF_T)
 665:bsp/src/printf.c ****       case 't' :
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 57


 666:bsp/src/printf.c ****         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 667:bsp/src/printf.c ****         format++;
 668:bsp/src/printf.c ****         break;
 669:bsp/src/printf.c **** #endif
 670:bsp/src/printf.c ****       case 'j' :
 671:bsp/src/printf.c ****         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 672:bsp/src/printf.c ****         format++;
 673:bsp/src/printf.c ****         break;
 674:bsp/src/printf.c ****       case 'z' :
 675:bsp/src/printf.c ****         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 676:bsp/src/printf.c ****         format++;
 677:bsp/src/printf.c ****         break;
 678:bsp/src/printf.c ****       default :
 679:bsp/src/printf.c ****         break;
 680:bsp/src/printf.c ****     }
 681:bsp/src/printf.c **** 
 682:bsp/src/printf.c ****     // evaluate specifier
 683:bsp/src/printf.c ****     switch (*format) {
 684:bsp/src/printf.c ****       case 'd' :
 685:bsp/src/printf.c ****       case 'i' :
 686:bsp/src/printf.c ****       case 'u' :
 687:bsp/src/printf.c ****       case 'x' :
 688:bsp/src/printf.c ****       case 'X' :
 689:bsp/src/printf.c ****       case 'o' :
 690:bsp/src/printf.c ****       case 'b' : {
 691:bsp/src/printf.c ****         // set the base
 692:bsp/src/printf.c ****         unsigned int base;
 693:bsp/src/printf.c ****         if (*format == 'x' || *format == 'X') {
 694:bsp/src/printf.c ****           base = 16U;
 695:bsp/src/printf.c ****         }
 696:bsp/src/printf.c ****         else if (*format == 'o') {
 697:bsp/src/printf.c ****           base =  8U;
 698:bsp/src/printf.c ****         }
 699:bsp/src/printf.c ****         else if (*format == 'b') {
 700:bsp/src/printf.c ****           base =  2U;
 701:bsp/src/printf.c ****         }
 702:bsp/src/printf.c ****         else {
 703:bsp/src/printf.c ****           base = 10U;
 704:bsp/src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 705:bsp/src/printf.c ****         }
 706:bsp/src/printf.c ****         // uppercase
 707:bsp/src/printf.c ****         if (*format == 'X') {
 708:bsp/src/printf.c ****           flags |= FLAGS_UPPERCASE;
 709:bsp/src/printf.c ****         }
 710:bsp/src/printf.c **** 
 711:bsp/src/printf.c ****         // no plus or space flag for u, x, X, o, b
 712:bsp/src/printf.c ****         if ((*format != 'i') && (*format != 'd')) {
 713:bsp/src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 714:bsp/src/printf.c ****         }
 715:bsp/src/printf.c **** 
 716:bsp/src/printf.c ****         // ignore '0' flag when precision is given
 717:bsp/src/printf.c ****         if (flags & FLAGS_PRECISION) {
 718:bsp/src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 719:bsp/src/printf.c ****         }
 720:bsp/src/printf.c **** 
 721:bsp/src/printf.c ****         // convert the integer
 722:bsp/src/printf.c ****         if ((*format == 'i') || (*format == 'd')) {
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 58


 723:bsp/src/printf.c ****           // signed
 724:bsp/src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 725:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 726:bsp/src/printf.c ****             const long long value = va_arg(va, long long);
 727:bsp/src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 728:bsp/src/printf.c **** #endif
 729:bsp/src/printf.c ****           }
 730:bsp/src/printf.c ****           else if (flags & FLAGS_LONG) {
 731:bsp/src/printf.c ****             const long value = va_arg(va, long);
 732:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 733:bsp/src/printf.c ****           }
 734:bsp/src/printf.c ****           else {
 735:bsp/src/printf.c ****             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) 
 736:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 737:bsp/src/printf.c ****           }
 738:bsp/src/printf.c ****         }
 739:bsp/src/printf.c ****         else {
 740:bsp/src/printf.c ****           // unsigned
 741:bsp/src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 742:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 743:bsp/src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, 
 744:bsp/src/printf.c **** #endif
 745:bsp/src/printf.c ****           }
 746:bsp/src/printf.c ****           else if (flags & FLAGS_LONG) {
 747:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 748:bsp/src/printf.c ****           }
 749:bsp/src/printf.c ****           else {
 750:bsp/src/printf.c ****             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned in
 751:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 752:bsp/src/printf.c ****           }
 753:bsp/src/printf.c ****         }
 754:bsp/src/printf.c ****         format++;
 755:bsp/src/printf.c ****         break;
 756:bsp/src/printf.c ****       }
 757:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 758:bsp/src/printf.c ****       case 'f' :
 759:bsp/src/printf.c ****       case 'F' :
 760:bsp/src/printf.c ****         if (*format == 'F') flags |= FLAGS_UPPERCASE;
 761:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 762:bsp/src/printf.c ****         format++;
 763:bsp/src/printf.c ****         break;
 764:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 765:bsp/src/printf.c ****       case 'e':
 766:bsp/src/printf.c ****       case 'E':
 767:bsp/src/printf.c ****       case 'g':
 768:bsp/src/printf.c ****       case 'G':
 769:bsp/src/printf.c ****         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 770:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 771:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 772:bsp/src/printf.c ****         format++;
 773:bsp/src/printf.c ****         break;
 774:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 775:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 776:bsp/src/printf.c ****       case 'c' : {
 777:bsp/src/printf.c ****         unsigned int l = 1U;
 778:bsp/src/printf.c ****         // pre padding
 779:bsp/src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 59


 780:bsp/src/printf.c ****           while (l++ < width) {
 781:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 782:bsp/src/printf.c ****           }
 783:bsp/src/printf.c ****         }
 784:bsp/src/printf.c ****         // char output
 785:bsp/src/printf.c ****         out((char)va_arg(va, int), buffer, idx++, maxlen);
 786:bsp/src/printf.c ****         // post padding
 787:bsp/src/printf.c ****         if (flags & FLAGS_LEFT) {
 788:bsp/src/printf.c ****           while (l++ < width) {
 789:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 790:bsp/src/printf.c ****           }
 791:bsp/src/printf.c ****         }
 792:bsp/src/printf.c ****         format++;
 793:bsp/src/printf.c ****         break;
 2271              		.loc 1 793 9 view .LVU561
 2272 0014 0024     		movs	r4, #0
 2273              	.LVL262:
 2274              	.L284:
 2275              		.loc 1 793 9 view .LVU562
 2276              	.LBE31:
 587:bsp/src/printf.c ****   {
 2277              		.loc 1 587 10 view .LVU563
 2278 0016 0D9B     		ldr	r3, [sp, #52]
 2279 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 587:bsp/src/printf.c ****   {
 2280              		.loc 1 587 9 view .LVU564
 2281 001a 0028     		cmp	r0, #0
 2282 001c 00F03683 		beq	.L304
 590:bsp/src/printf.c ****       // no
 2283              		.loc 1 590 5 is_stmt 1 view .LVU565
 590:bsp/src/printf.c ****       // no
 2284              		.loc 1 590 8 is_stmt 0 view .LVU566
 2285 0020 2528     		cmp	r0, #37
 2286 0022 09D0     		beq	.L206
 592:bsp/src/printf.c ****       format++;
 2287              		.loc 1 592 7 is_stmt 1 view .LVU567
 2288 0024 651C     		adds	r5, r4, #1
 2289              	.LVL263:
 592:bsp/src/printf.c ****       format++;
 2290              		.loc 1 592 7 is_stmt 0 view .LVU568
 2291 0026 5B46     		mov	r3, fp
 2292 0028 2246     		mov	r2, r4
 2293 002a 0A99     		ldr	r1, [sp, #40]
 2294 002c B047     		blx	r6
 2295              	.LVL264:
 593:bsp/src/printf.c ****       continue;
 2296              		.loc 1 593 7 is_stmt 1 view .LVU569
 593:bsp/src/printf.c ****       continue;
 2297              		.loc 1 593 13 is_stmt 0 view .LVU570
 2298 002e 0D9B     		ldr	r3, [sp, #52]
 2299 0030 0133     		adds	r3, r3, #1
 2300 0032 0D93     		str	r3, [sp, #52]
 594:bsp/src/printf.c ****     }
 2301              		.loc 1 594 7 is_stmt 1 view .LVU571
 592:bsp/src/printf.c ****       format++;
 2302              		.loc 1 592 7 is_stmt 0 view .LVU572
 2303 0034 2C46     		mov	r4, r5
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 60


 594:bsp/src/printf.c ****     }
 2304              		.loc 1 594 7 view .LVU573
 2305 0036 EEE7     		b	.L284
 2306              	.LVL265:
 2307              	.L206:
 598:bsp/src/printf.c ****     }
 2308              		.loc 1 598 7 is_stmt 1 view .LVU574
 598:bsp/src/printf.c ****     }
 2309              		.loc 1 598 13 is_stmt 0 view .LVU575
 2310 0038 0133     		adds	r3, r3, #1
 2311 003a 0D93     		str	r3, [sp, #52]
 602:bsp/src/printf.c ****     do {
 2312              		.loc 1 602 5 is_stmt 1 view .LVU576
 2313              	.LVL266:
 602:bsp/src/printf.c ****     do {
 2314              		.loc 1 602 11 is_stmt 0 view .LVU577
 2315 003c 0025     		movs	r5, #0
 2316 003e 2DE0     		b	.L208
 2317              	.LVL267:
 2318              	.L209:
 615:bsp/src/printf.c ****     if (_is_digit(*format)) {
 2319              		.loc 1 615 5 is_stmt 1 view .LVU578
 616:bsp/src/printf.c ****       width = _atoi(&format);
 2320              		.loc 1 616 5 view .LVU579
 2321              	.LBB32:
 2322              	.LBI32:
 181:bsp/src/printf.c **** {
 2323              		.loc 1 181 20 view .LVU580
 2324              	.LBB33:
 183:bsp/src/printf.c **** }
 2325              		.loc 1 183 3 view .LVU581
 183:bsp/src/printf.c **** }
 2326              		.loc 1 183 22 is_stmt 0 view .LVU582
 2327 0040 A1F13003 		sub	r3, r1, #48
 2328 0044 DBB2     		uxtb	r3, r3
 2329              	.LVL268:
 183:bsp/src/printf.c **** }
 2330              		.loc 1 183 22 view .LVU583
 2331              	.LBE33:
 2332              	.LBE32:
 616:bsp/src/printf.c ****       width = _atoi(&format);
 2333              		.loc 1 616 8 view .LVU584
 2334 0046 092B     		cmp	r3, #9
 2335 0048 68D9     		bls	.L305
 619:bsp/src/printf.c ****       const int w = va_arg(va, int);
 2336              		.loc 1 619 10 is_stmt 1 view .LVU585
 619:bsp/src/printf.c ****       const int w = va_arg(va, int);
 2337              		.loc 1 619 13 is_stmt 0 view .LVU586
 2338 004a 2A29     		cmp	r1, #42
 2339 004c 6BD0     		beq	.L306
 615:bsp/src/printf.c ****     if (_is_digit(*format)) {
 2340              		.loc 1 615 11 view .LVU587
 2341 004e 4FF0000A 		mov	r10, #0
 2342              	.LVL269:
 2343              	.L219:
 632:bsp/src/printf.c ****     if (*format == '.') {
 2344              		.loc 1 632 5 is_stmt 1 view .LVU588
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 61


 633:bsp/src/printf.c ****       flags |= FLAGS_PRECISION;
 2345              		.loc 1 633 5 view .LVU589
 633:bsp/src/printf.c ****       flags |= FLAGS_PRECISION;
 2346              		.loc 1 633 9 is_stmt 0 view .LVU590
 2347 0052 0D9B     		ldr	r3, [sp, #52]
 2348 0054 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 633:bsp/src/printf.c ****       flags |= FLAGS_PRECISION;
 2349              		.loc 1 633 8 view .LVU591
 2350 0056 2E2A     		cmp	r2, #46
 2351 0058 75D0     		beq	.L307
 632:bsp/src/printf.c ****     if (*format == '.') {
 2352              		.loc 1 632 15 view .LVU592
 2353 005a 4FF00009 		mov	r9, #0
 2354              	.LVL270:
 2355              	.L222:
 647:bsp/src/printf.c ****       case 'l' :
 2356              		.loc 1 647 5 is_stmt 1 view .LVU593
 647:bsp/src/printf.c ****       case 'l' :
 2357              		.loc 1 647 13 is_stmt 0 view .LVU594
 2358 005e 0D9A     		ldr	r2, [sp, #52]
 2359 0060 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 647:bsp/src/printf.c ****       case 'l' :
 2360              		.loc 1 647 5 view .LVU595
 2361 0062 683B     		subs	r3, r3, #104
 2362 0064 122B     		cmp	r3, #18
 2363 0066 00F2AC80 		bhi	.L224
 2364 006a DFE813F0 		tbh	[pc, r3, lsl #1]
 2365              	.L226:
 2366 006e 9800     		.2byte	(.L230-.L226)/2
 2367 0070 AA00     		.2byte	(.L224-.L226)/2
 2368 0072 0701     		.2byte	(.L229-.L226)/2
 2369 0074 AA00     		.2byte	(.L224-.L226)/2
 2370 0076 8A00     		.2byte	(.L228-.L226)/2
 2371 0078 AA00     		.2byte	(.L224-.L226)/2
 2372 007a AA00     		.2byte	(.L224-.L226)/2
 2373 007c AA00     		.2byte	(.L224-.L226)/2
 2374 007e AA00     		.2byte	(.L224-.L226)/2
 2375 0080 AA00     		.2byte	(.L224-.L226)/2
 2376 0082 AA00     		.2byte	(.L224-.L226)/2
 2377 0084 AA00     		.2byte	(.L224-.L226)/2
 2378 0086 A600     		.2byte	(.L227-.L226)/2
 2379 0088 AA00     		.2byte	(.L224-.L226)/2
 2380 008a AA00     		.2byte	(.L224-.L226)/2
 2381 008c AA00     		.2byte	(.L224-.L226)/2
 2382 008e AA00     		.2byte	(.L224-.L226)/2
 2383 0090 AA00     		.2byte	(.L224-.L226)/2
 2384 0092 0C01     		.2byte	(.L225-.L226)/2
 2385              	.LVL271:
 2386              		.p2align 1
 2387              	.L210:
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2388              		.loc 1 605 19 is_stmt 1 view .LVU596
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2389              		.loc 1 605 25 is_stmt 0 view .LVU597
 2390 0094 45F00105 		orr	r5, r5, #1
 2391              	.LVL272:
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 62


 2392              		.loc 1 605 43 is_stmt 1 view .LVU598
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2393              		.loc 1 605 49 is_stmt 0 view .LVU599
 2394 0098 0133     		adds	r3, r3, #1
 2395 009a 0D93     		str	r3, [sp, #52]
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2396              		.loc 1 605 53 is_stmt 1 view .LVU600
 2397              	.LVL273:
 605:bsp/src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2398              		.loc 1 605 61 view .LVU601
 2399              	.L208:
 603:bsp/src/printf.c ****       switch (*format) {
 2400              		.loc 1 603 5 view .LVU602
 604:bsp/src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2401              		.loc 1 604 7 view .LVU603
 604:bsp/src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2402              		.loc 1 604 15 is_stmt 0 view .LVU604
 2403 009c 0D9B     		ldr	r3, [sp, #52]
 2404 009e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 604:bsp/src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2405              		.loc 1 604 7 view .LVU605
 2406 00a0 A1F12002 		sub	r2, r1, #32
 2407 00a4 102A     		cmp	r2, #16
 2408 00a6 CBD8     		bhi	.L209
 2409 00a8 01A0     		adr	r0, .L211
 2410 00aa 50F822F0 		ldr	pc, [r0, r2, lsl #2]
 2411 00ae 00BF     		.p2align 2
 2412              	.L211:
 2413 00b0 09010000 		.word	.L215+1
 2414 00b4 41000000 		.word	.L209+1
 2415 00b8 41000000 		.word	.L209+1
 2416 00bc 13010000 		.word	.L214+1
 2417 00c0 41000000 		.word	.L209+1
 2418 00c4 41000000 		.word	.L209+1
 2419 00c8 41000000 		.word	.L209+1
 2420 00cc 41000000 		.word	.L209+1
 2421 00d0 41000000 		.word	.L209+1
 2422 00d4 41000000 		.word	.L209+1
 2423 00d8 41000000 		.word	.L209+1
 2424 00dc FF000000 		.word	.L213+1
 2425 00e0 41000000 		.word	.L209+1
 2426 00e4 F5000000 		.word	.L212+1
 2427 00e8 41000000 		.word	.L209+1
 2428 00ec 41000000 		.word	.L209+1
 2429 00f0 95000000 		.word	.L210+1
 2430              		.p2align 1
 2431              	.L212:
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2432              		.loc 1 606 19 is_stmt 1 view .LVU606
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2433              		.loc 1 606 25 is_stmt 0 view .LVU607
 2434 00f4 45F00205 		orr	r5, r5, #2
 2435              	.LVL274:
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2436              		.loc 1 606 43 is_stmt 1 view .LVU608
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2437              		.loc 1 606 49 is_stmt 0 view .LVU609
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 63


 2438 00f8 0133     		adds	r3, r3, #1
 2439 00fa 0D93     		str	r3, [sp, #52]
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2440              		.loc 1 606 53 is_stmt 1 view .LVU610
 2441              	.LVL275:
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2442              		.loc 1 606 61 view .LVU611
 606:bsp/src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2443              		.loc 1 606 61 is_stmt 0 view .LVU612
 2444 00fc CEE7     		b	.L208
 2445              	.LVL276:
 2446              	.L213:
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2447              		.loc 1 607 19 is_stmt 1 view .LVU613
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2448              		.loc 1 607 25 is_stmt 0 view .LVU614
 2449 00fe 45F00405 		orr	r5, r5, #4
 2450              	.LVL277:
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2451              		.loc 1 607 43 is_stmt 1 view .LVU615
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2452              		.loc 1 607 49 is_stmt 0 view .LVU616
 2453 0102 0133     		adds	r3, r3, #1
 2454 0104 0D93     		str	r3, [sp, #52]
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2455              		.loc 1 607 53 is_stmt 1 view .LVU617
 2456              	.LVL278:
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2457              		.loc 1 607 61 view .LVU618
 607:bsp/src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2458              		.loc 1 607 61 is_stmt 0 view .LVU619
 2459 0106 C9E7     		b	.L208
 2460              	.LVL279:
 2461              	.L215:
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2462              		.loc 1 608 19 is_stmt 1 view .LVU620
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2463              		.loc 1 608 25 is_stmt 0 view .LVU621
 2464 0108 45F00805 		orr	r5, r5, #8
 2465              	.LVL280:
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2466              		.loc 1 608 43 is_stmt 1 view .LVU622
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2467              		.loc 1 608 49 is_stmt 0 view .LVU623
 2468 010c 0133     		adds	r3, r3, #1
 2469 010e 0D93     		str	r3, [sp, #52]
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2470              		.loc 1 608 53 is_stmt 1 view .LVU624
 2471              	.LVL281:
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2472              		.loc 1 608 61 view .LVU625
 608:bsp/src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2473              		.loc 1 608 61 is_stmt 0 view .LVU626
 2474 0110 C4E7     		b	.L208
 2475              	.LVL282:
 2476              	.L214:
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 64


 2477              		.loc 1 609 19 is_stmt 1 view .LVU627
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2478              		.loc 1 609 25 is_stmt 0 view .LVU628
 2479 0112 45F01005 		orr	r5, r5, #16
 2480              	.LVL283:
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2481              		.loc 1 609 43 is_stmt 1 view .LVU629
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2482              		.loc 1 609 49 is_stmt 0 view .LVU630
 2483 0116 0133     		adds	r3, r3, #1
 2484 0118 0D93     		str	r3, [sp, #52]
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2485              		.loc 1 609 53 is_stmt 1 view .LVU631
 2486              	.LVL284:
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2487              		.loc 1 609 61 view .LVU632
 609:bsp/src/printf.c ****         default :                                   n = 0U; break;
 2488              		.loc 1 609 61 is_stmt 0 view .LVU633
 2489 011a BFE7     		b	.L208
 2490              	.LVL285:
 2491              	.L305:
 617:bsp/src/printf.c ****     }
 2492              		.loc 1 617 7 is_stmt 1 view .LVU634
 617:bsp/src/printf.c ****     }
 2493              		.loc 1 617 15 is_stmt 0 view .LVU635
 2494 011c 0DA8     		add	r0, sp, #52
 2495 011e FFF7FEFF 		bl	_atoi
 2496              	.LVL286:
 2497 0122 8246     		mov	r10, r0
 2498              	.LVL287:
 617:bsp/src/printf.c ****     }
 2499              		.loc 1 617 15 view .LVU636
 2500 0124 95E7     		b	.L219
 2501              	.LVL288:
 2502              	.L306:
 2503              	.LBB34:
 620:bsp/src/printf.c ****       if (w < 0) {
 2504              		.loc 1 620 7 is_stmt 1 view .LVU637
 620:bsp/src/printf.c ****       if (w < 0) {
 2505              		.loc 1 620 17 is_stmt 0 view .LVU638
 2506 0126 189B     		ldr	r3, [sp, #96]
 2507 0128 1A1D     		adds	r2, r3, #4
 2508 012a 1892     		str	r2, [sp, #96]
 2509 012c 1B68     		ldr	r3, [r3]
 621:bsp/src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2510              		.loc 1 621 7 is_stmt 1 view .LVU639
 621:bsp/src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2511              		.loc 1 621 10 is_stmt 0 view .LVU640
 2512 012e 002B     		cmp	r3, #0
 2513 0130 04DB     		blt	.L308
 626:bsp/src/printf.c ****       }
 2514              		.loc 1 626 9 is_stmt 1 view .LVU641
 626:bsp/src/printf.c ****       }
 2515              		.loc 1 626 15 is_stmt 0 view .LVU642
 2516 0132 9A46     		mov	r10, r3
 2517              	.LVL289:
 2518              	.L221:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 65


 628:bsp/src/printf.c ****     }
 2519              		.loc 1 628 7 is_stmt 1 view .LVU643
 628:bsp/src/printf.c ****     }
 2520              		.loc 1 628 13 is_stmt 0 view .LVU644
 2521 0134 0D9B     		ldr	r3, [sp, #52]
 2522 0136 0133     		adds	r3, r3, #1
 2523 0138 0D93     		str	r3, [sp, #52]
 2524 013a 8AE7     		b	.L219
 2525              	.LVL290:
 2526              	.L308:
 622:bsp/src/printf.c ****         width = (unsigned int)-w;
 2527              		.loc 1 622 9 is_stmt 1 view .LVU645
 622:bsp/src/printf.c ****         width = (unsigned int)-w;
 2528              		.loc 1 622 15 is_stmt 0 view .LVU646
 2529 013c 45F00205 		orr	r5, r5, #2
 2530              	.LVL291:
 623:bsp/src/printf.c ****       }
 2531              		.loc 1 623 9 is_stmt 1 view .LVU647
 623:bsp/src/printf.c ****       }
 2532              		.loc 1 623 31 is_stmt 0 view .LVU648
 2533 0140 C3F1000A 		rsb	r10, r3, #0
 2534              	.LVL292:
 623:bsp/src/printf.c ****       }
 2535              		.loc 1 623 31 view .LVU649
 2536 0144 F6E7     		b	.L221
 2537              	.LVL293:
 2538              	.L307:
 623:bsp/src/printf.c ****       }
 2539              		.loc 1 623 31 view .LVU650
 2540              	.LBE34:
 634:bsp/src/printf.c ****       format++;
 2541              		.loc 1 634 7 is_stmt 1 view .LVU651
 634:bsp/src/printf.c ****       format++;
 2542              		.loc 1 634 13 is_stmt 0 view .LVU652
 2543 0146 45F48065 		orr	r5, r5, #1024
 2544              	.LVL294:
 635:bsp/src/printf.c ****       if (_is_digit(*format)) {
 2545              		.loc 1 635 7 is_stmt 1 view .LVU653
 635:bsp/src/printf.c ****       if (_is_digit(*format)) {
 2546              		.loc 1 635 13 is_stmt 0 view .LVU654
 2547 014a 5A1C     		adds	r2, r3, #1
 2548 014c 0D92     		str	r2, [sp, #52]
 636:bsp/src/printf.c ****         precision = _atoi(&format);
 2549              		.loc 1 636 7 is_stmt 1 view .LVU655
 636:bsp/src/printf.c ****         precision = _atoi(&format);
 2550              		.loc 1 636 11 is_stmt 0 view .LVU656
 2551 014e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2552              	.LVL295:
 2553              	.LBB35:
 2554              	.LBI35:
 181:bsp/src/printf.c **** {
 2555              		.loc 1 181 20 is_stmt 1 view .LVU657
 2556              	.LBB36:
 183:bsp/src/printf.c **** }
 2557              		.loc 1 183 3 view .LVU658
 183:bsp/src/printf.c **** }
 2558              		.loc 1 183 22 is_stmt 0 view .LVU659
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 66


 2559 0150 A2F13003 		sub	r3, r2, #48
 2560 0154 DBB2     		uxtb	r3, r3
 2561              	.LVL296:
 183:bsp/src/printf.c **** }
 2562              		.loc 1 183 22 view .LVU660
 2563              	.LBE36:
 2564              	.LBE35:
 636:bsp/src/printf.c ****         precision = _atoi(&format);
 2565              		.loc 1 636 10 view .LVU661
 2566 0156 092B     		cmp	r3, #9
 2567 0158 04D9     		bls	.L309
 639:bsp/src/printf.c ****         const int prec = (int)va_arg(va, int);
 2568              		.loc 1 639 12 is_stmt 1 view .LVU662
 639:bsp/src/printf.c ****         const int prec = (int)va_arg(va, int);
 2569              		.loc 1 639 15 is_stmt 0 view .LVU663
 2570 015a 2A2A     		cmp	r2, #42
 2571 015c 07D0     		beq	.L310
 632:bsp/src/printf.c ****     if (*format == '.') {
 2572              		.loc 1 632 15 view .LVU664
 2573 015e 4FF00009 		mov	r9, #0
 2574 0162 7CE7     		b	.L222
 2575              	.L309:
 637:bsp/src/printf.c ****       }
 2576              		.loc 1 637 9 is_stmt 1 view .LVU665
 637:bsp/src/printf.c ****       }
 2577              		.loc 1 637 21 is_stmt 0 view .LVU666
 2578 0164 0DA8     		add	r0, sp, #52
 2579 0166 FFF7FEFF 		bl	_atoi
 2580              	.LVL297:
 2581 016a 8146     		mov	r9, r0
 2582              	.LVL298:
 637:bsp/src/printf.c ****       }
 2583              		.loc 1 637 21 view .LVU667
 2584 016c 77E7     		b	.L222
 2585              	.LVL299:
 2586              	.L310:
 2587              	.LBB37:
 640:bsp/src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2588              		.loc 1 640 9 is_stmt 1 view .LVU668
 640:bsp/src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2589              		.loc 1 640 19 is_stmt 0 view .LVU669
 2590 016e 189B     		ldr	r3, [sp, #96]
 2591 0170 1A1D     		adds	r2, r3, #4
 2592 0172 1892     		str	r2, [sp, #96]
 2593 0174 1B68     		ldr	r3, [r3]
 641:bsp/src/printf.c ****         format++;
 2594              		.loc 1 641 9 is_stmt 1 view .LVU670
 641:bsp/src/printf.c ****         format++;
 2595              		.loc 1 641 51 is_stmt 0 view .LVU671
 2596 0176 23EAE379 		bic	r9, r3, r3, asr #31
 2597              	.LVL300:
 642:bsp/src/printf.c ****       }
 2598              		.loc 1 642 9 is_stmt 1 view .LVU672
 642:bsp/src/printf.c ****       }
 2599              		.loc 1 642 15 is_stmt 0 view .LVU673
 2600 017a 0D9B     		ldr	r3, [sp, #52]
 2601 017c 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 67


 2602 017e 0D93     		str	r3, [sp, #52]
 2603 0180 6DE7     		b	.L222
 2604              	.L228:
 642:bsp/src/printf.c ****       }
 2605              		.loc 1 642 15 view .LVU674
 2606              	.LBE37:
 649:bsp/src/printf.c ****         format++;
 2607              		.loc 1 649 9 is_stmt 1 view .LVU675
 649:bsp/src/printf.c ****         format++;
 2608              		.loc 1 649 15 is_stmt 0 view .LVU676
 2609 0182 45F48071 		orr	r1, r5, #256
 2610              	.LVL301:
 650:bsp/src/printf.c ****         if (*format == 'l') {
 2611              		.loc 1 650 9 is_stmt 1 view .LVU677
 650:bsp/src/printf.c ****         if (*format == 'l') {
 2612              		.loc 1 650 15 is_stmt 0 view .LVU678
 2613 0186 531C     		adds	r3, r2, #1
 2614 0188 0D93     		str	r3, [sp, #52]
 651:bsp/src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2615              		.loc 1 651 9 is_stmt 1 view .LVU679
 651:bsp/src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2616              		.loc 1 651 13 is_stmt 0 view .LVU680
 2617 018a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 651:bsp/src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2618              		.loc 1 651 12 view .LVU681
 2619 018c 6C2A     		cmp	r2, #108
 2620 018e 01D0     		beq	.L311
 649:bsp/src/printf.c ****         format++;
 2621              		.loc 1 649 15 view .LVU682
 2622 0190 0D46     		mov	r5, r1
 2623 0192 16E0     		b	.L224
 2624              	.L311:
 652:bsp/src/printf.c ****           format++;
 2625              		.loc 1 652 11 is_stmt 1 view .LVU683
 652:bsp/src/printf.c ****           format++;
 2626              		.loc 1 652 17 is_stmt 0 view .LVU684
 2627 0194 45F44075 		orr	r5, r5, #768
 2628              	.LVL302:
 653:bsp/src/printf.c ****         }
 2629              		.loc 1 653 11 is_stmt 1 view .LVU685
 653:bsp/src/printf.c ****         }
 2630              		.loc 1 653 17 is_stmt 0 view .LVU686
 2631 0198 0133     		adds	r3, r3, #1
 2632 019a 0D93     		str	r3, [sp, #52]
 2633 019c 11E0     		b	.L224
 2634              	.L230:
 657:bsp/src/printf.c ****         format++;
 2635              		.loc 1 657 9 is_stmt 1 view .LVU687
 657:bsp/src/printf.c ****         format++;
 2636              		.loc 1 657 15 is_stmt 0 view .LVU688
 2637 019e 45F08001 		orr	r1, r5, #128
 2638              	.LVL303:
 658:bsp/src/printf.c ****         if (*format == 'h') {
 2639              		.loc 1 658 9 is_stmt 1 view .LVU689
 658:bsp/src/printf.c ****         if (*format == 'h') {
 2640              		.loc 1 658 15 is_stmt 0 view .LVU690
 2641 01a2 531C     		adds	r3, r2, #1
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 68


 2642 01a4 0D93     		str	r3, [sp, #52]
 659:bsp/src/printf.c ****           flags |= FLAGS_CHAR;
 2643              		.loc 1 659 9 is_stmt 1 view .LVU691
 659:bsp/src/printf.c ****           flags |= FLAGS_CHAR;
 2644              		.loc 1 659 13 is_stmt 0 view .LVU692
 2645 01a6 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 659:bsp/src/printf.c ****           flags |= FLAGS_CHAR;
 2646              		.loc 1 659 12 view .LVU693
 2647 01a8 682A     		cmp	r2, #104
 2648 01aa 01D0     		beq	.L312
 657:bsp/src/printf.c ****         format++;
 2649              		.loc 1 657 15 view .LVU694
 2650 01ac 0D46     		mov	r5, r1
 2651 01ae 08E0     		b	.L224
 2652              	.L312:
 660:bsp/src/printf.c ****           format++;
 2653              		.loc 1 660 11 is_stmt 1 view .LVU695
 660:bsp/src/printf.c ****           format++;
 2654              		.loc 1 660 17 is_stmt 0 view .LVU696
 2655 01b0 45F0C005 		orr	r5, r5, #192
 2656              	.LVL304:
 661:bsp/src/printf.c ****         }
 2657              		.loc 1 661 11 is_stmt 1 view .LVU697
 661:bsp/src/printf.c ****         }
 2658              		.loc 1 661 17 is_stmt 0 view .LVU698
 2659 01b4 0133     		adds	r3, r3, #1
 2660 01b6 0D93     		str	r3, [sp, #52]
 2661 01b8 03E0     		b	.L224
 2662              	.L227:
 666:bsp/src/printf.c ****         format++;
 2663              		.loc 1 666 9 is_stmt 1 view .LVU699
 666:bsp/src/printf.c ****         format++;
 2664              		.loc 1 666 15 is_stmt 0 view .LVU700
 2665 01ba 45F48075 		orr	r5, r5, #256
 2666              	.LVL305:
 667:bsp/src/printf.c ****         break;
 2667              		.loc 1 667 9 is_stmt 1 view .LVU701
 667:bsp/src/printf.c ****         break;
 2668              		.loc 1 667 15 is_stmt 0 view .LVU702
 2669 01be 0132     		adds	r2, r2, #1
 2670 01c0 0D92     		str	r2, [sp, #52]
 668:bsp/src/printf.c **** #endif
 2671              		.loc 1 668 9 is_stmt 1 view .LVU703
 2672              	.L224:
 683:bsp/src/printf.c ****       case 'd' :
 2673              		.loc 1 683 5 view .LVU704
 683:bsp/src/printf.c ****       case 'd' :
 2674              		.loc 1 683 13 is_stmt 0 view .LVU705
 2675 01c2 0D9B     		ldr	r3, [sp, #52]
 2676 01c4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 683:bsp/src/printf.c ****       case 'd' :
 2677              		.loc 1 683 5 view .LVU706
 2678 01c6 A0F12503 		sub	r3, r0, #37
 2679 01ca 532B     		cmp	r3, #83
 2680 01cc 00F25282 		bhi	.L231
 2681 01d0 DFE813F0 		tbh	[pc, r3, lsl #1]
 2682              	.L233:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 69


 2683 01d4 4502     		.2byte	(.L239-.L233)/2
 2684 01d6 5002     		.2byte	(.L231-.L233)/2
 2685 01d8 5002     		.2byte	(.L231-.L233)/2
 2686 01da 5002     		.2byte	(.L231-.L233)/2
 2687 01dc 5002     		.2byte	(.L231-.L233)/2
 2688 01de 5002     		.2byte	(.L231-.L233)/2
 2689 01e0 5002     		.2byte	(.L231-.L233)/2
 2690 01e2 5002     		.2byte	(.L231-.L233)/2
 2691 01e4 5002     		.2byte	(.L231-.L233)/2
 2692 01e6 5002     		.2byte	(.L231-.L233)/2
 2693 01e8 5002     		.2byte	(.L231-.L233)/2
 2694 01ea 5002     		.2byte	(.L231-.L233)/2
 2695 01ec 5002     		.2byte	(.L231-.L233)/2
 2696 01ee 5002     		.2byte	(.L231-.L233)/2
 2697 01f0 5002     		.2byte	(.L231-.L233)/2
 2698 01f2 5002     		.2byte	(.L231-.L233)/2
 2699 01f4 5002     		.2byte	(.L231-.L233)/2
 2700 01f6 5002     		.2byte	(.L231-.L233)/2
 2701 01f8 5002     		.2byte	(.L231-.L233)/2
 2702 01fa 5002     		.2byte	(.L231-.L233)/2
 2703 01fc 5002     		.2byte	(.L231-.L233)/2
 2704 01fe 5002     		.2byte	(.L231-.L233)/2
 2705 0200 5002     		.2byte	(.L231-.L233)/2
 2706 0202 5002     		.2byte	(.L231-.L233)/2
 2707 0204 5002     		.2byte	(.L231-.L233)/2
 2708 0206 5002     		.2byte	(.L231-.L233)/2
 2709 0208 5002     		.2byte	(.L231-.L233)/2
 2710 020a 5002     		.2byte	(.L231-.L233)/2
 2711 020c 5002     		.2byte	(.L231-.L233)/2
 2712 020e 5002     		.2byte	(.L231-.L233)/2
 2713 0210 5002     		.2byte	(.L231-.L233)/2
 2714 0212 5002     		.2byte	(.L231-.L233)/2
 2715 0214 7601     		.2byte	(.L236-.L233)/2
 2716 0216 5601     		.2byte	(.L237-.L233)/2
 2717 0218 7601     		.2byte	(.L236-.L233)/2
 2718 021a 5002     		.2byte	(.L231-.L233)/2
 2719 021c 5002     		.2byte	(.L231-.L233)/2
 2720 021e 5002     		.2byte	(.L231-.L233)/2
 2721 0220 5002     		.2byte	(.L231-.L233)/2
 2722 0222 5002     		.2byte	(.L231-.L233)/2
 2723 0224 5002     		.2byte	(.L231-.L233)/2
 2724 0226 5002     		.2byte	(.L231-.L233)/2
 2725 0228 5002     		.2byte	(.L231-.L233)/2
 2726 022a 5002     		.2byte	(.L231-.L233)/2
 2727 022c 5002     		.2byte	(.L231-.L233)/2
 2728 022e 5002     		.2byte	(.L231-.L233)/2
 2729 0230 5002     		.2byte	(.L231-.L233)/2
 2730 0232 5002     		.2byte	(.L231-.L233)/2
 2731 0234 5002     		.2byte	(.L231-.L233)/2
 2732 0236 5002     		.2byte	(.L231-.L233)/2
 2733 0238 5002     		.2byte	(.L231-.L233)/2
 2734 023a 5E00     		.2byte	(.L232-.L233)/2
 2735 023c 5002     		.2byte	(.L231-.L233)/2
 2736 023e 5002     		.2byte	(.L231-.L233)/2
 2737 0240 5002     		.2byte	(.L231-.L233)/2
 2738 0242 5002     		.2byte	(.L231-.L233)/2
 2739 0244 5002     		.2byte	(.L231-.L233)/2
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 70


 2740 0246 5002     		.2byte	(.L231-.L233)/2
 2741 0248 5002     		.2byte	(.L231-.L233)/2
 2742 024a 5002     		.2byte	(.L231-.L233)/2
 2743 024c 5002     		.2byte	(.L231-.L233)/2
 2744 024e 5E00     		.2byte	(.L232-.L233)/2
 2745 0250 9D01     		.2byte	(.L238-.L233)/2
 2746 0252 5E00     		.2byte	(.L232-.L233)/2
 2747 0254 7601     		.2byte	(.L236-.L233)/2
 2748 0256 5601     		.2byte	(.L237-.L233)/2
 2749 0258 7601     		.2byte	(.L236-.L233)/2
 2750 025a 5002     		.2byte	(.L231-.L233)/2
 2751 025c 5E00     		.2byte	(.L232-.L233)/2
 2752 025e 5002     		.2byte	(.L231-.L233)/2
 2753 0260 5002     		.2byte	(.L231-.L233)/2
 2754 0262 5002     		.2byte	(.L231-.L233)/2
 2755 0264 5002     		.2byte	(.L231-.L233)/2
 2756 0266 5002     		.2byte	(.L231-.L233)/2
 2757 0268 5E00     		.2byte	(.L232-.L233)/2
 2758 026a 2A02     		.2byte	(.L235-.L233)/2
 2759 026c 5002     		.2byte	(.L231-.L233)/2
 2760 026e 5002     		.2byte	(.L231-.L233)/2
 2761 0270 CE01     		.2byte	(.L234-.L233)/2
 2762 0272 5002     		.2byte	(.L231-.L233)/2
 2763 0274 5E00     		.2byte	(.L232-.L233)/2
 2764 0276 5002     		.2byte	(.L231-.L233)/2
 2765 0278 5002     		.2byte	(.L231-.L233)/2
 2766 027a 5E00     		.2byte	(.L232-.L233)/2
 2767              		.p2align 1
 2768              	.L229:
 671:bsp/src/printf.c ****         format++;
 2769              		.loc 1 671 9 is_stmt 1 view .LVU707
 671:bsp/src/printf.c ****         format++;
 2770              		.loc 1 671 15 is_stmt 0 view .LVU708
 2771 027c 45F40075 		orr	r5, r5, #512
 2772              	.LVL306:
 672:bsp/src/printf.c ****         break;
 2773              		.loc 1 672 9 is_stmt 1 view .LVU709
 672:bsp/src/printf.c ****         break;
 2774              		.loc 1 672 15 is_stmt 0 view .LVU710
 2775 0280 0132     		adds	r2, r2, #1
 2776 0282 0D92     		str	r2, [sp, #52]
 673:bsp/src/printf.c ****       case 'z' :
 2777              		.loc 1 673 9 is_stmt 1 view .LVU711
 2778 0284 9DE7     		b	.L224
 2779              	.L225:
 675:bsp/src/printf.c ****         format++;
 2780              		.loc 1 675 9 view .LVU712
 675:bsp/src/printf.c ****         format++;
 2781              		.loc 1 675 15 is_stmt 0 view .LVU713
 2782 0286 45F48075 		orr	r5, r5, #256
 2783              	.LVL307:
 676:bsp/src/printf.c ****         break;
 2784              		.loc 1 676 9 is_stmt 1 view .LVU714
 676:bsp/src/printf.c ****         break;
 2785              		.loc 1 676 15 is_stmt 0 view .LVU715
 2786 028a 0132     		adds	r2, r2, #1
 2787 028c 0D92     		str	r2, [sp, #52]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 71


 677:bsp/src/printf.c ****       default :
 2788              		.loc 1 677 9 is_stmt 1 view .LVU716
 2789 028e 98E7     		b	.L224
 2790              	.L232:
 2791              	.LBB38:
 692:bsp/src/printf.c ****         if (*format == 'x' || *format == 'X') {
 2792              		.loc 1 692 9 view .LVU717
 693:bsp/src/printf.c ****           base = 16U;
 2793              		.loc 1 693 9 view .LVU718
 693:bsp/src/printf.c ****           base = 16U;
 2794              		.loc 1 693 12 is_stmt 0 view .LVU719
 2795 0290 7828     		cmp	r0, #120
 2796 0292 09D0     		beq	.L293
 693:bsp/src/printf.c ****           base = 16U;
 2797              		.loc 1 693 28 discriminator 1 view .LVU720
 2798 0294 5828     		cmp	r0, #88
 2799 0296 3AD0     		beq	.L294
 696:bsp/src/printf.c ****           base =  8U;
 2800              		.loc 1 696 14 is_stmt 1 view .LVU721
 696:bsp/src/printf.c ****           base =  8U;
 2801              		.loc 1 696 17 is_stmt 0 view .LVU722
 2802 0298 6F28     		cmp	r0, #111
 2803 029a 3AD0     		beq	.L295
 699:bsp/src/printf.c ****           base =  2U;
 2804              		.loc 1 699 14 is_stmt 1 view .LVU723
 699:bsp/src/printf.c ****           base =  2U;
 2805              		.loc 1 699 17 is_stmt 0 view .LVU724
 2806 029c 6228     		cmp	r0, #98
 2807 029e 3AD0     		beq	.L296
 703:bsp/src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 2808              		.loc 1 703 11 is_stmt 1 view .LVU725
 2809              	.LVL308:
 704:bsp/src/printf.c ****         }
 2810              		.loc 1 704 11 view .LVU726
 704:bsp/src/printf.c ****         }
 2811              		.loc 1 704 17 is_stmt 0 view .LVU727
 2812 02a0 25F01005 		bic	r5, r5, #16
 2813              	.LVL309:
 703:bsp/src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 2814              		.loc 1 703 16 view .LVU728
 2815 02a4 0A23     		movs	r3, #10
 2816 02a6 00E0     		b	.L240
 2817              	.LVL310:
 2818              	.L293:
 694:bsp/src/printf.c ****         }
 2819              		.loc 1 694 16 view .LVU729
 2820 02a8 1023     		movs	r3, #16
 2821              	.L240:
 2822              	.LVL311:
 707:bsp/src/printf.c ****           flags |= FLAGS_UPPERCASE;
 2823              		.loc 1 707 9 is_stmt 1 view .LVU730
 707:bsp/src/printf.c ****           flags |= FLAGS_UPPERCASE;
 2824              		.loc 1 707 12 is_stmt 0 view .LVU731
 2825 02aa 5828     		cmp	r0, #88
 2826 02ac 35D0     		beq	.L313
 2827              	.L241:
 712:bsp/src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 72


 2828              		.loc 1 712 9 is_stmt 1 view .LVU732
 712:bsp/src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2829              		.loc 1 712 12 is_stmt 0 view .LVU733
 2830 02ae 6928     		cmp	r0, #105
 2831 02b0 03D0     		beq	.L242
 712:bsp/src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2832              		.loc 1 712 30 discriminator 1 view .LVU734
 2833 02b2 6428     		cmp	r0, #100
 2834 02b4 01D0     		beq	.L242
 713:bsp/src/printf.c ****         }
 2835              		.loc 1 713 11 is_stmt 1 view .LVU735
 713:bsp/src/printf.c ****         }
 2836              		.loc 1 713 17 is_stmt 0 view .LVU736
 2837 02b6 25F00C05 		bic	r5, r5, #12
 2838              	.LVL312:
 2839              	.L242:
 717:bsp/src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 2840              		.loc 1 717 9 is_stmt 1 view .LVU737
 717:bsp/src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 2841              		.loc 1 717 12 is_stmt 0 view .LVU738
 2842 02ba 15F4806F 		tst	r5, #1024
 2843 02be 01D0     		beq	.L243
 718:bsp/src/printf.c ****         }
 2844              		.loc 1 718 11 is_stmt 1 view .LVU739
 718:bsp/src/printf.c ****         }
 2845              		.loc 1 718 17 is_stmt 0 view .LVU740
 2846 02c0 25F00105 		bic	r5, r5, #1
 2847              	.LVL313:
 2848              	.L243:
 722:bsp/src/printf.c ****           // signed
 2849              		.loc 1 722 9 is_stmt 1 view .LVU741
 722:bsp/src/printf.c ****           // signed
 2850              		.loc 1 722 12 is_stmt 0 view .LVU742
 2851 02c4 6928     		cmp	r0, #105
 2852 02c6 2BD0     		beq	.L244
 722:bsp/src/printf.c ****           // signed
 2853              		.loc 1 722 30 discriminator 1 view .LVU743
 2854 02c8 6428     		cmp	r0, #100
 2855 02ca 29D0     		beq	.L244
 741:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2856              		.loc 1 741 11 is_stmt 1 view .LVU744
 741:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2857              		.loc 1 741 14 is_stmt 0 view .LVU745
 2858 02cc 15F4007F 		tst	r5, #512
 2859 02d0 40F09880 		bne	.L314
 746:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2860              		.loc 1 746 16 is_stmt 1 view .LVU746
 746:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2861              		.loc 1 746 19 is_stmt 0 view .LVU747
 2862 02d4 15F4807F 		tst	r5, #256
 2863 02d8 40F0B080 		bne	.L315
 2864              	.LBB39:
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2865              		.loc 1 750 13 is_stmt 1 view .LVU748
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2866              		.loc 1 750 103 is_stmt 0 view .LVU749
 2867 02dc 15F0400F 		tst	r5, #64
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 73


 2868 02e0 00F0C180 		beq	.L255
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2869              		.loc 1 750 78 view .LVU750
 2870 02e4 189A     		ldr	r2, [sp, #96]
 2871 02e6 111D     		adds	r1, r2, #4
 2872 02e8 1891     		str	r1, [sp, #96]
 2873 02ea 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2874              	.L256:
 2875              	.LVL314:
 751:bsp/src/printf.c ****           }
 2876              		.loc 1 751 13 is_stmt 1 discriminator 8 view .LVU751
 751:bsp/src/printf.c ****           }
 2877              		.loc 1 751 19 is_stmt 0 discriminator 8 view .LVU752
 2878 02ec 0595     		str	r5, [sp, #20]
 2879 02ee CDF810A0 		str	r10, [sp, #16]
 2880 02f2 CDF80C90 		str	r9, [sp, #12]
 2881 02f6 0293     		str	r3, [sp, #8]
 2882 02f8 0023     		movs	r3, #0
 2883              	.LVL315:
 751:bsp/src/printf.c ****           }
 2884              		.loc 1 751 19 discriminator 8 view .LVU753
 2885 02fa 0193     		str	r3, [sp, #4]
 2886 02fc 0092     		str	r2, [sp]
 2887 02fe 5B46     		mov	r3, fp
 2888 0300 2246     		mov	r2, r4
 2889              	.LVL316:
 751:bsp/src/printf.c ****           }
 2890              		.loc 1 751 19 discriminator 8 view .LVU754
 2891 0302 0A99     		ldr	r1, [sp, #40]
 2892 0304 3046     		mov	r0, r6
 2893 0306 FFF7FEFF 		bl	_ntoa_long
 2894              	.LVL317:
 751:bsp/src/printf.c ****           }
 2895              		.loc 1 751 19 discriminator 8 view .LVU755
 2896 030a 0446     		mov	r4, r0
 2897              	.LVL318:
 751:bsp/src/printf.c ****           }
 2898              		.loc 1 751 19 discriminator 8 view .LVU756
 2899 030c 29E0     		b	.L248
 2900              	.LVL319:
 2901              	.L294:
 751:bsp/src/printf.c ****           }
 2902              		.loc 1 751 19 discriminator 8 view .LVU757
 2903              	.LBE39:
 694:bsp/src/printf.c ****         }
 2904              		.loc 1 694 16 view .LVU758
 2905 030e 1023     		movs	r3, #16
 2906 0310 CBE7     		b	.L240
 2907              	.L295:
 697:bsp/src/printf.c ****         }
 2908              		.loc 1 697 16 view .LVU759
 2909 0312 0823     		movs	r3, #8
 2910 0314 C9E7     		b	.L240
 2911              	.L296:
 700:bsp/src/printf.c ****         }
 2912              		.loc 1 700 16 view .LVU760
 2913 0316 0223     		movs	r3, #2
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 74


 2914 0318 C7E7     		b	.L240
 2915              	.LVL320:
 2916              	.L313:
 708:bsp/src/printf.c ****         }
 2917              		.loc 1 708 11 is_stmt 1 view .LVU761
 708:bsp/src/printf.c ****         }
 2918              		.loc 1 708 17 is_stmt 0 view .LVU762
 2919 031a 45F02005 		orr	r5, r5, #32
 2920              	.LVL321:
 708:bsp/src/printf.c ****         }
 2921              		.loc 1 708 17 view .LVU763
 2922 031e C6E7     		b	.L241
 2923              	.L244:
 724:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2924              		.loc 1 724 11 is_stmt 1 view .LVU764
 724:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2925              		.loc 1 724 14 is_stmt 0 view .LVU765
 2926 0320 15F4007F 		tst	r5, #512
 2927 0324 21D1     		bne	.L316
 730:bsp/src/printf.c ****             const long value = va_arg(va, long);
 2928              		.loc 1 730 16 is_stmt 1 view .LVU766
 730:bsp/src/printf.c ****             const long value = va_arg(va, long);
 2929              		.loc 1 730 19 is_stmt 0 view .LVU767
 2930 0326 15F4807F 		tst	r5, #256
 2931 032a 44D1     		bne	.L317
 2932              	.LBB40:
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 2933              		.loc 1 735 13 is_stmt 1 view .LVU768
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 2934              		.loc 1 735 76 is_stmt 0 view .LVU769
 2935 032c 15F0400F 		tst	r5, #64
 2936 0330 5AD0     		beq	.L250
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 2937              		.loc 1 735 60 view .LVU770
 2938 0332 189A     		ldr	r2, [sp, #96]
 2939 0334 111D     		adds	r1, r2, #4
 2940 0336 1891     		str	r1, [sp, #96]
 2941 0338 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2942              	.L251:
 2943              	.LVL322:
 736:bsp/src/printf.c ****           }
 2944              		.loc 1 736 13 is_stmt 1 discriminator 8 view .LVU771
 736:bsp/src/printf.c ****           }
 2945              		.loc 1 736 56 is_stmt 0 discriminator 8 view .LVU772
 2946 033a 82EAE271 		eor	r1, r2, r2, asr #31
 2947 033e A1EBE271 		sub	r1, r1, r2, asr #31
 736:bsp/src/printf.c ****           }
 2948              		.loc 1 736 19 discriminator 8 view .LVU773
 2949 0342 0595     		str	r5, [sp, #20]
 2950 0344 CDF810A0 		str	r10, [sp, #16]
 2951 0348 CDF80C90 		str	r9, [sp, #12]
 2952 034c 0293     		str	r3, [sp, #8]
 2953 034e D20F     		lsrs	r2, r2, #31
 2954              	.LVL323:
 736:bsp/src/printf.c ****           }
 2955              		.loc 1 736 19 discriminator 8 view .LVU774
 2956 0350 0192     		str	r2, [sp, #4]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 75


 2957 0352 0091     		str	r1, [sp]
 2958 0354 5B46     		mov	r3, fp
 2959              	.LVL324:
 736:bsp/src/printf.c ****           }
 2960              		.loc 1 736 19 discriminator 8 view .LVU775
 2961 0356 2246     		mov	r2, r4
 2962 0358 0A99     		ldr	r1, [sp, #40]
 2963 035a 3046     		mov	r0, r6
 2964 035c FFF7FEFF 		bl	_ntoa_long
 2965              	.LVL325:
 736:bsp/src/printf.c ****           }
 2966              		.loc 1 736 19 discriminator 8 view .LVU776
 2967 0360 0446     		mov	r4, r0
 2968              	.LVL326:
 2969              	.L248:
 736:bsp/src/printf.c ****           }
 2970              		.loc 1 736 19 discriminator 8 view .LVU777
 2971              	.LBE40:
 754:bsp/src/printf.c ****         break;
 2972              		.loc 1 754 9 is_stmt 1 view .LVU778
 754:bsp/src/printf.c ****         break;
 2973              		.loc 1 754 15 is_stmt 0 view .LVU779
 2974 0362 0D9B     		ldr	r3, [sp, #52]
 2975 0364 0133     		adds	r3, r3, #1
 2976 0366 0D93     		str	r3, [sp, #52]
 755:bsp/src/printf.c ****       }
 2977              		.loc 1 755 9 is_stmt 1 view .LVU780
 2978 0368 55E6     		b	.L284
 2979              	.LVL327:
 2980              	.L316:
 2981              	.LBB41:
 726:bsp/src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 2982              		.loc 1 726 13 view .LVU781
 726:bsp/src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 2983              		.loc 1 726 29 is_stmt 0 view .LVU782
 2984 036a 189A     		ldr	r2, [sp, #96]
 2985 036c 0732     		adds	r2, r2, #7
 2986 036e 22F00702 		bic	r2, r2, #7
 2987 0372 02F10801 		add	r1, r2, #8
 2988 0376 1891     		str	r1, [sp, #96]
 2989 0378 5768     		ldr	r7, [r2, #4]
 727:bsp/src/printf.c **** #endif
 2990              		.loc 1 727 13 is_stmt 1 view .LVU783
 727:bsp/src/printf.c **** #endif
 2991              		.loc 1 727 61 is_stmt 0 view .LVU784
 2992 037a 1068     		ldr	r0, [r2]
 2993 037c 3946     		mov	r1, r7
 2994 037e 0028     		cmp	r0, #0
 2995 0380 77F10002 		sbcs	r2, r7, #0
 2996 0384 13DB     		blt	.L318
 2997              	.L247:
 727:bsp/src/printf.c **** #endif
 2998              		.loc 1 727 19 view .LVU785
 2999 0386 0895     		str	r5, [sp, #32]
 3000 0388 CDF81CA0 		str	r10, [sp, #28]
 3001 038c CDF81890 		str	r9, [sp, #24]
 3002 0390 0493     		str	r3, [sp, #16]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 76


 3003 0392 0023     		movs	r3, #0
 3004              	.LVL328:
 727:bsp/src/printf.c **** #endif
 3005              		.loc 1 727 19 view .LVU786
 3006 0394 0593     		str	r3, [sp, #20]
 3007 0396 FF0F     		lsrs	r7, r7, #31
 3008 0398 0297     		str	r7, [sp, #8]
 3009 039a CDE90001 		strd	r0, [sp]
 3010 039e 5B46     		mov	r3, fp
 3011 03a0 2246     		mov	r2, r4
 3012 03a2 0A99     		ldr	r1, [sp, #40]
 3013 03a4 3046     		mov	r0, r6
 3014 03a6 FFF7FEFF 		bl	_ntoa_long_long
 3015              	.LVL329:
 727:bsp/src/printf.c **** #endif
 3016              		.loc 1 727 19 view .LVU787
 3017 03aa 0446     		mov	r4, r0
 3018              	.LVL330:
 727:bsp/src/printf.c **** #endif
 3019              		.loc 1 727 19 view .LVU788
 3020              	.LBE41:
 3021 03ac D9E7     		b	.L248
 3022              	.LVL331:
 3023              	.L318:
 3024              	.LBB42:
 727:bsp/src/printf.c **** #endif
 3025              		.loc 1 727 61 view .LVU789
 3026 03ae 4042     		rsbs	r0, r0, #0
 3027 03b0 67EB4701 		sbc	r1, r7, r7, lsl #1
 3028 03b4 E7E7     		b	.L247
 3029              	.L317:
 3030              	.LBE42:
 3031              	.LBB43:
 731:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3032              		.loc 1 731 13 is_stmt 1 view .LVU790
 731:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3033              		.loc 1 731 24 is_stmt 0 view .LVU791
 3034 03b6 189A     		ldr	r2, [sp, #96]
 3035 03b8 111D     		adds	r1, r2, #4
 3036 03ba 1891     		str	r1, [sp, #96]
 3037 03bc 1268     		ldr	r2, [r2]
 732:bsp/src/printf.c ****           }
 3038              		.loc 1 732 13 is_stmt 1 view .LVU792
 732:bsp/src/printf.c ****           }
 3039              		.loc 1 732 56 is_stmt 0 view .LVU793
 3040 03be 82EAE271 		eor	r1, r2, r2, asr #31
 3041 03c2 A1EBE271 		sub	r1, r1, r2, asr #31
 732:bsp/src/printf.c ****           }
 3042              		.loc 1 732 19 view .LVU794
 3043 03c6 0595     		str	r5, [sp, #20]
 3044 03c8 CDF810A0 		str	r10, [sp, #16]
 3045 03cc CDF80C90 		str	r9, [sp, #12]
 3046 03d0 0293     		str	r3, [sp, #8]
 3047 03d2 D20F     		lsrs	r2, r2, #31
 3048 03d4 0192     		str	r2, [sp, #4]
 3049 03d6 0091     		str	r1, [sp]
 3050 03d8 5B46     		mov	r3, fp
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 77


 3051              	.LVL332:
 732:bsp/src/printf.c ****           }
 3052              		.loc 1 732 19 view .LVU795
 3053 03da 2246     		mov	r2, r4
 3054 03dc 0A99     		ldr	r1, [sp, #40]
 3055 03de 3046     		mov	r0, r6
 3056 03e0 FFF7FEFF 		bl	_ntoa_long
 3057              	.LVL333:
 732:bsp/src/printf.c ****           }
 3058              		.loc 1 732 19 view .LVU796
 3059 03e4 0446     		mov	r4, r0
 3060              	.LVL334:
 732:bsp/src/printf.c ****           }
 3061              		.loc 1 732 19 view .LVU797
 3062              	.LBE43:
 3063 03e6 BCE7     		b	.L248
 3064              	.LVL335:
 3065              	.L250:
 3066              	.LBB44:
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3067              		.loc 1 735 129 discriminator 2 view .LVU798
 3068 03e8 15F0800F 		tst	r5, #128
 3069 03ec 05D0     		beq	.L252
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3070              		.loc 1 735 113 view .LVU799
 3071 03ee 189A     		ldr	r2, [sp, #96]
 3072 03f0 111D     		adds	r1, r2, #4
 3073 03f2 1891     		str	r1, [sp, #96]
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3074              		.loc 1 735 102 view .LVU800
 3075 03f4 B2F90020 		ldrsh	r2, [r2]
 3076 03f8 9FE7     		b	.L251
 3077              	.L252:
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3078              		.loc 1 735 129 view .LVU801
 3079 03fa 189A     		ldr	r2, [sp, #96]
 3080 03fc 111D     		adds	r1, r2, #4
 3081 03fe 1891     		str	r1, [sp, #96]
 3082 0400 1268     		ldr	r2, [r2]
 3083 0402 9AE7     		b	.L251
 3084              	.L314:
 735:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3085              		.loc 1 735 129 view .LVU802
 3086              	.LBE44:
 743:bsp/src/printf.c **** #endif
 3087              		.loc 1 743 13 is_stmt 1 view .LVU803
 743:bsp/src/printf.c **** #endif
 3088              		.loc 1 743 19 is_stmt 0 view .LVU804
 3089 0404 189A     		ldr	r2, [sp, #96]
 3090 0406 0732     		adds	r2, r2, #7
 3091 0408 22F00702 		bic	r2, r2, #7
 3092 040c 02F10801 		add	r1, r2, #8
 3093 0410 1891     		str	r1, [sp, #96]
 3094 0412 0895     		str	r5, [sp, #32]
 3095 0414 CDF81CA0 		str	r10, [sp, #28]
 3096 0418 CDF81890 		str	r9, [sp, #24]
 3097 041c 0021     		movs	r1, #0
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 78


 3098 041e 0493     		str	r3, [sp, #16]
 3099 0420 0591     		str	r1, [sp, #20]
 3100 0422 0291     		str	r1, [sp, #8]
 3101 0424 D2E90023 		ldrd	r2, [r2]
 3102 0428 CDE90023 		strd	r2, [sp]
 3103 042c 5B46     		mov	r3, fp
 3104              	.LVL336:
 743:bsp/src/printf.c **** #endif
 3105              		.loc 1 743 19 view .LVU805
 3106 042e 2246     		mov	r2, r4
 3107 0430 0A99     		ldr	r1, [sp, #40]
 3108 0432 3046     		mov	r0, r6
 3109 0434 FFF7FEFF 		bl	_ntoa_long_long
 3110              	.LVL337:
 743:bsp/src/printf.c **** #endif
 3111              		.loc 1 743 19 view .LVU806
 3112 0438 0446     		mov	r4, r0
 3113              	.LVL338:
 743:bsp/src/printf.c **** #endif
 3114              		.loc 1 743 19 view .LVU807
 3115 043a 92E7     		b	.L248
 3116              	.LVL339:
 3117              	.L315:
 747:bsp/src/printf.c ****           }
 3118              		.loc 1 747 13 is_stmt 1 view .LVU808
 747:bsp/src/printf.c ****           }
 3119              		.loc 1 747 19 is_stmt 0 view .LVU809
 3120 043c 189A     		ldr	r2, [sp, #96]
 3121 043e 111D     		adds	r1, r2, #4
 3122 0440 1891     		str	r1, [sp, #96]
 3123 0442 0595     		str	r5, [sp, #20]
 3124 0444 CDF810A0 		str	r10, [sp, #16]
 3125 0448 CDF80C90 		str	r9, [sp, #12]
 3126 044c 0293     		str	r3, [sp, #8]
 3127 044e 0023     		movs	r3, #0
 3128              	.LVL340:
 747:bsp/src/printf.c ****           }
 3129              		.loc 1 747 19 view .LVU810
 3130 0450 0193     		str	r3, [sp, #4]
 3131 0452 1368     		ldr	r3, [r2]
 3132 0454 0093     		str	r3, [sp]
 3133 0456 5B46     		mov	r3, fp
 3134 0458 2246     		mov	r2, r4
 3135 045a 0A99     		ldr	r1, [sp, #40]
 3136 045c 3046     		mov	r0, r6
 3137 045e FFF7FEFF 		bl	_ntoa_long
 3138              	.LVL341:
 747:bsp/src/printf.c ****           }
 3139              		.loc 1 747 19 view .LVU811
 3140 0462 0446     		mov	r4, r0
 3141              	.LVL342:
 747:bsp/src/printf.c ****           }
 3142              		.loc 1 747 19 view .LVU812
 3143 0464 7DE7     		b	.L248
 3144              	.LVL343:
 3145              	.L255:
 3146              	.LBB45:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 79


 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3147              		.loc 1 750 174 discriminator 2 view .LVU813
 3148 0466 15F0800F 		tst	r5, #128
 3149 046a 04D0     		beq	.L257
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3150              		.loc 1 750 149 view .LVU814
 3151 046c 189A     		ldr	r2, [sp, #96]
 3152 046e 111D     		adds	r1, r2, #4
 3153 0470 1891     		str	r1, [sp, #96]
 3154 0472 1288     		ldrh	r2, [r2]
 3155 0474 3AE7     		b	.L256
 3156              	.L257:
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3157              		.loc 1 750 174 view .LVU815
 3158 0476 189A     		ldr	r2, [sp, #96]
 3159 0478 111D     		adds	r1, r2, #4
 3160 047a 1891     		str	r1, [sp, #96]
 3161 047c 1268     		ldr	r2, [r2]
 3162 047e 35E7     		b	.L256
 3163              	.LVL344:
 3164              	.L237:
 750:bsp/src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3165              		.loc 1 750 174 view .LVU816
 3166              	.LBE45:
 3167              	.LBE38:
 760:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3168              		.loc 1 760 9 is_stmt 1 view .LVU817
 760:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3169              		.loc 1 760 12 is_stmt 0 view .LVU818
 3170 0480 4628     		cmp	r0, #70
 3171 0482 1AD0     		beq	.L319
 3172              	.L258:
 761:bsp/src/printf.c ****         format++;
 3173              		.loc 1 761 9 is_stmt 1 view .LVU819
 761:bsp/src/printf.c ****         format++;
 3174              		.loc 1 761 15 is_stmt 0 view .LVU820
 3175 0484 189B     		ldr	r3, [sp, #96]
 3176 0486 0733     		adds	r3, r3, #7
 3177 0488 23F00703 		bic	r3, r3, #7
 3178 048c 03F10802 		add	r2, r3, #8
 3179 0490 1892     		str	r2, [sp, #96]
 3180 0492 0495     		str	r5, [sp, #16]
 3181 0494 CDF80CA0 		str	r10, [sp, #12]
 3182 0498 CDF80890 		str	r9, [sp, #8]
 3183 049c D3E90023 		ldrd	r2, [r3]
 3184 04a0 CDE90023 		strd	r2, [sp]
 3185 04a4 5B46     		mov	r3, fp
 3186 04a6 2246     		mov	r2, r4
 3187 04a8 0A99     		ldr	r1, [sp, #40]
 3188 04aa 3046     		mov	r0, r6
 3189 04ac FFF7FEFF 		bl	_ftoa
 3190              	.LVL345:
 3191 04b0 0446     		mov	r4, r0
 3192              	.LVL346:
 762:bsp/src/printf.c ****         break;
 3193              		.loc 1 762 9 is_stmt 1 view .LVU821
 762:bsp/src/printf.c ****         break;
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 80


 3194              		.loc 1 762 15 is_stmt 0 view .LVU822
 3195 04b2 0D9B     		ldr	r3, [sp, #52]
 3196 04b4 0133     		adds	r3, r3, #1
 3197 04b6 0D93     		str	r3, [sp, #52]
 763:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 3198              		.loc 1 763 9 is_stmt 1 view .LVU823
 3199 04b8 ADE5     		b	.L284
 3200              	.LVL347:
 3201              	.L319:
 760:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3202              		.loc 1 760 29 discriminator 1 view .LVU824
 760:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3203              		.loc 1 760 35 is_stmt 0 discriminator 1 view .LVU825
 3204 04ba 45F02005 		orr	r5, r5, #32
 3205              	.LVL348:
 760:bsp/src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3206              		.loc 1 760 35 discriminator 1 view .LVU826
 3207 04be E1E7     		b	.L258
 3208              	.L236:
 769:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3209              		.loc 1 769 9 is_stmt 1 view .LVU827
 769:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3210              		.loc 1 769 12 is_stmt 0 view .LVU828
 3211 04c0 6728     		cmp	r0, #103
 3212 04c2 01D0     		beq	.L259
 769:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3213              		.loc 1 769 29 discriminator 2 view .LVU829
 3214 04c4 4728     		cmp	r0, #71
 3215 04c6 01D1     		bne	.L260
 3216              	.L259:
 769:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3217              		.loc 1 769 49 is_stmt 1 discriminator 3 view .LVU830
 769:bsp/src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3218              		.loc 1 769 55 is_stmt 0 discriminator 3 view .LVU831
 3219 04c8 45F40065 		orr	r5, r5, #2048
 3220              	.LVL349:
 3221              	.L260:
 770:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3222              		.loc 1 770 9 is_stmt 1 view .LVU832
 770:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3223              		.loc 1 770 12 is_stmt 0 view .LVU833
 3224 04cc 4528     		cmp	r0, #69
 3225 04ce 01D0     		beq	.L261
 770:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3226              		.loc 1 770 29 discriminator 2 view .LVU834
 3227 04d0 4728     		cmp	r0, #71
 3228 04d2 01D1     		bne	.L262
 3229              	.L261:
 770:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3230              		.loc 1 770 49 is_stmt 1 discriminator 3 view .LVU835
 770:bsp/src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3231              		.loc 1 770 55 is_stmt 0 discriminator 3 view .LVU836
 3232 04d4 45F02005 		orr	r5, r5, #32
 3233              	.LVL350:
 3234              	.L262:
 771:bsp/src/printf.c ****         format++;
 3235              		.loc 1 771 9 is_stmt 1 view .LVU837
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 81


 771:bsp/src/printf.c ****         format++;
 3236              		.loc 1 771 15 is_stmt 0 view .LVU838
 3237 04d8 189B     		ldr	r3, [sp, #96]
 3238 04da 0733     		adds	r3, r3, #7
 3239 04dc 23F00703 		bic	r3, r3, #7
 3240 04e0 03F10802 		add	r2, r3, #8
 3241 04e4 1892     		str	r2, [sp, #96]
 3242 04e6 0495     		str	r5, [sp, #16]
 3243 04e8 CDF80CA0 		str	r10, [sp, #12]
 3244 04ec CDF80890 		str	r9, [sp, #8]
 3245 04f0 D3E90023 		ldrd	r2, [r3]
 3246 04f4 CDE90023 		strd	r2, [sp]
 3247 04f8 5B46     		mov	r3, fp
 3248 04fa 2246     		mov	r2, r4
 3249 04fc 0A99     		ldr	r1, [sp, #40]
 3250 04fe 3046     		mov	r0, r6
 3251 0500 FFF7FEFF 		bl	_etoa
 3252              	.LVL351:
 3253 0504 0446     		mov	r4, r0
 3254              	.LVL352:
 772:bsp/src/printf.c ****         break;
 3255              		.loc 1 772 9 is_stmt 1 view .LVU839
 772:bsp/src/printf.c ****         break;
 3256              		.loc 1 772 15 is_stmt 0 view .LVU840
 3257 0506 0D9B     		ldr	r3, [sp, #52]
 3258 0508 0133     		adds	r3, r3, #1
 3259 050a 0D93     		str	r3, [sp, #52]
 773:bsp/src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 3260              		.loc 1 773 9 is_stmt 1 view .LVU841
 3261 050c 83E5     		b	.L284
 3262              	.LVL353:
 3263              	.L238:
 3264              	.LBB46:
 777:bsp/src/printf.c ****         // pre padding
 3265              		.loc 1 777 9 view .LVU842
 779:bsp/src/printf.c ****           while (l++ < width) {
 3266              		.loc 1 779 9 view .LVU843
 779:bsp/src/printf.c ****           while (l++ < width) {
 3267              		.loc 1 779 12 is_stmt 0 view .LVU844
 3268 050e 15F00205 		ands	r5, r5, #2
 3269              	.LVL354:
 779:bsp/src/printf.c ****           while (l++ < width) {
 3270              		.loc 1 779 12 view .LVU845
 3271 0512 1CD0     		beq	.L297
 777:bsp/src/printf.c ****         // pre padding
 3272              		.loc 1 777 22 view .LVU846
 3273 0514 0127     		movs	r7, #1
 3274              	.LVL355:
 3275              	.L264:
 785:bsp/src/printf.c ****         // post padding
 3276              		.loc 1 785 9 is_stmt 1 view .LVU847
 785:bsp/src/printf.c ****         // post padding
 3277              		.loc 1 785 19 is_stmt 0 view .LVU848
 3278 0516 1898     		ldr	r0, [sp, #96]
 3279 0518 031D     		adds	r3, r0, #4
 3280 051a 1893     		str	r3, [sp, #96]
 785:bsp/src/printf.c ****         // post padding
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 82


 3281              		.loc 1 785 9 view .LVU849
 3282 051c 04F10108 		add	r8, r4, #1
 3283              	.LVL356:
 785:bsp/src/printf.c ****         // post padding
 3284              		.loc 1 785 9 view .LVU850
 3285 0520 5B46     		mov	r3, fp
 3286 0522 2246     		mov	r2, r4
 3287 0524 0A99     		ldr	r1, [sp, #40]
 3288 0526 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 3289 0528 B047     		blx	r6
 3290              	.LVL357:
 787:bsp/src/printf.c ****           while (l++ < width) {
 3291              		.loc 1 787 9 is_stmt 1 view .LVU851
 787:bsp/src/printf.c ****           while (l++ < width) {
 3292              		.loc 1 787 12 is_stmt 0 view .LVU852
 3293 052a 9DB9     		cbnz	r5, .L320
 3294              	.LVL358:
 3295              	.L267:
 792:bsp/src/printf.c ****         break;
 3296              		.loc 1 792 9 is_stmt 1 view .LVU853
 792:bsp/src/printf.c ****         break;
 3297              		.loc 1 792 15 is_stmt 0 view .LVU854
 3298 052c 0D9B     		ldr	r3, [sp, #52]
 3299 052e 0133     		adds	r3, r3, #1
 3300 0530 0D93     		str	r3, [sp, #52]
 3301              		.loc 1 793 9 is_stmt 1 view .LVU855
 3302 0532 4446     		mov	r4, r8
 3303 0534 6FE5     		b	.L284
 3304              	.LVL359:
 3305              	.L265:
 781:bsp/src/printf.c ****           }
 3306              		.loc 1 781 13 view .LVU856
 3307 0536 541C     		adds	r4, r2, #1
 3308              	.LVL360:
 781:bsp/src/printf.c ****           }
 3309              		.loc 1 781 13 is_stmt 0 view .LVU857
 3310 0538 5B46     		mov	r3, fp
 3311 053a 0A99     		ldr	r1, [sp, #40]
 3312 053c 2020     		movs	r0, #32
 3313 053e B047     		blx	r6
 3314              	.LVL361:
 780:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3315              		.loc 1 780 19 view .LVU858
 3316 0540 3B46     		mov	r3, r7
 781:bsp/src/printf.c ****           }
 3317              		.loc 1 781 13 view .LVU859
 3318 0542 2246     		mov	r2, r4
 3319              	.LVL362:
 3320              	.L263:
 780:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3321              		.loc 1 780 19 view .LVU860
 3322 0544 5F1C     		adds	r7, r3, #1
 3323              	.LVL363:
 780:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3324              		.loc 1 780 17 view .LVU861
 3325 0546 9A45     		cmp	r10, r3
 3326 0548 F5D8     		bhi	.L265
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 83


 780:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3327              		.loc 1 780 17 view .LVU862
 3328 054a 1446     		mov	r4, r2
 3329 054c E3E7     		b	.L264
 3330              	.LVL364:
 3331              	.L297:
 777:bsp/src/printf.c ****         // pre padding
 3332              		.loc 1 777 22 view .LVU863
 3333 054e 0123     		movs	r3, #1
 3334 0550 2246     		mov	r2, r4
 3335 0552 F7E7     		b	.L263
 3336              	.LVL365:
 3337              	.L320:
 777:bsp/src/printf.c ****         // pre padding
 3338              		.loc 1 777 22 view .LVU864
 3339 0554 4246     		mov	r2, r8
 3340 0556 06E0     		b	.L266
 3341              	.LVL366:
 3342              	.L268:
 789:bsp/src/printf.c ****           }
 3343              		.loc 1 789 13 is_stmt 1 view .LVU865
 3344 0558 551C     		adds	r5, r2, #1
 3345              	.LVL367:
 789:bsp/src/printf.c ****           }
 3346              		.loc 1 789 13 is_stmt 0 view .LVU866
 3347 055a 5B46     		mov	r3, fp
 3348 055c 0A99     		ldr	r1, [sp, #40]
 3349 055e 2020     		movs	r0, #32
 3350 0560 B047     		blx	r6
 3351              	.LVL368:
 788:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3352              		.loc 1 788 19 view .LVU867
 3353 0562 2746     		mov	r7, r4
 789:bsp/src/printf.c ****           }
 3354              		.loc 1 789 13 view .LVU868
 3355 0564 2A46     		mov	r2, r5
 3356              	.LVL369:
 3357              	.L266:
 788:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3358              		.loc 1 788 19 view .LVU869
 3359 0566 7C1C     		adds	r4, r7, #1
 3360              	.LVL370:
 788:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3361              		.loc 1 788 17 view .LVU870
 3362 0568 BA45     		cmp	r10, r7
 3363 056a F5D8     		bhi	.L268
 788:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3364              		.loc 1 788 17 view .LVU871
 3365 056c 9046     		mov	r8, r2
 3366 056e DDE7     		b	.L267
 3367              	.LVL371:
 3368              	.L234:
 788:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3369              		.loc 1 788 17 view .LVU872
 3370              	.LBE46:
 3371              	.LBB47:
 794:bsp/src/printf.c ****       }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 84


 795:bsp/src/printf.c **** 
 796:bsp/src/printf.c ****       case 's' : {
 797:bsp/src/printf.c ****         const char* p = va_arg(va, char*);
 3372              		.loc 1 797 9 is_stmt 1 view .LVU873
 3373              		.loc 1 797 21 is_stmt 0 view .LVU874
 3374 0570 189B     		ldr	r3, [sp, #96]
 3375 0572 1A1D     		adds	r2, r3, #4
 3376 0574 1892     		str	r2, [sp, #96]
 3377 0576 D3F80080 		ldr	r8, [r3]
 798:bsp/src/printf.c ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 3378              		.loc 1 798 9 is_stmt 1 view .LVU875
 3379              		.loc 1 798 26 is_stmt 0 view .LVU876
 3380 057a B9F1000F 		cmp	r9, #0
 3381 057e 09D1     		bne	.L269
 3382 0580 4FF0FF33 		mov	r3, #-1
 3383              	.L270:
 3384 0584 4746     		mov	r7, r8
 3385              	.L271:
 3386              	.LVL372:
 3387              	.LBB48:
 3388              	.LBB49:
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3389              		.loc 1 174 17 view .LVU877
 3390 0586 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3391              		.loc 1 174 3 view .LVU878
 3392 0588 32B1     		cbz	r2, .L272
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3393              		.loc 1 174 30 view .LVU879
 3394 058a 5A1E     		subs	r2, r3, #1
 3395              	.LVL373:
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3396              		.loc 1 174 20 view .LVU880
 3397 058c 23B1     		cbz	r3, .L272
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3398              		.loc 1 174 38 is_stmt 1 view .LVU881
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3399              		.loc 1 174 34 is_stmt 0 view .LVU882
 3400 058e 0137     		adds	r7, r7, #1
 3401              	.LVL374:
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3402              		.loc 1 174 30 view .LVU883
 3403 0590 1346     		mov	r3, r2
 3404 0592 F8E7     		b	.L271
 3405              	.LVL375:
 3406              	.L269:
 174:bsp/src/printf.c ****   return (unsigned int)(s - str);
 3407              		.loc 1 174 30 view .LVU884
 3408              	.LBE49:
 3409              	.LBE48:
 3410              		.loc 1 798 26 view .LVU885
 3411 0594 4B46     		mov	r3, r9
 3412 0596 F5E7     		b	.L270
 3413              	.LVL376:
 3414              	.L272:
 3415              	.LBB51:
 3416              	.LBB50:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 85


 175:bsp/src/printf.c **** }
 3417              		.loc 1 175 3 is_stmt 1 view .LVU886
 175:bsp/src/printf.c **** }
 3418              		.loc 1 175 27 is_stmt 0 view .LVU887
 3419 0598 A7EB0803 		sub	r3, r7, r8
 3420 059c 0B93     		str	r3, [sp, #44]
 3421              	.LVL377:
 175:bsp/src/printf.c **** }
 3422              		.loc 1 175 27 view .LVU888
 3423              	.LBE50:
 3424              	.LBE51:
 799:bsp/src/printf.c ****         // pre padding
 800:bsp/src/printf.c ****         if (flags & FLAGS_PRECISION) {
 3425              		.loc 1 800 9 is_stmt 1 view .LVU889
 3426              		.loc 1 800 12 is_stmt 0 view .LVU890
 3427 059e 15F48067 		ands	r7, r5, #1024
 3428 05a2 03D0     		beq	.L274
 801:bsp/src/printf.c ****           l = (l < precision ? l : precision);
 3429              		.loc 1 801 11 is_stmt 1 view .LVU891
 3430              		.loc 1 801 13 is_stmt 0 view .LVU892
 3431 05a4 4B45     		cmp	r3, r9
 3432 05a6 28BF     		it	cs
 3433 05a8 4B46     		movcs	r3, r9
 3434              	.LVL378:
 3435              		.loc 1 801 13 view .LVU893
 3436 05aa 0B93     		str	r3, [sp, #44]
 3437              	.LVL379:
 3438              	.L274:
 802:bsp/src/printf.c ****         }
 803:bsp/src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 3439              		.loc 1 803 9 is_stmt 1 view .LVU894
 3440              		.loc 1 803 12 is_stmt 0 view .LVU895
 3441 05ac 15F00203 		ands	r3, r5, #2
 3442 05b0 0C93     		str	r3, [sp, #48]
 3443 05b2 03D0     		beq	.L321
 3444 05b4 2246     		mov	r2, r4
 3445 05b6 3C46     		mov	r4, r7
 3446              	.LVL380:
 3447              		.loc 1 803 12 view .LVU896
 3448 05b8 4F46     		mov	r7, r9
 3449 05ba 18E0     		b	.L278
 3450              	.LVL381:
 3451              	.L321:
 3452              		.loc 1 803 12 view .LVU897
 3453 05bc 2246     		mov	r2, r4
 3454 05be 0B9B     		ldr	r3, [sp, #44]
 3455 05c0 06E0     		b	.L275
 3456              	.LVL382:
 3457              	.L277:
 804:bsp/src/printf.c ****           while (l++ < width) {
 805:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3458              		.loc 1 805 13 is_stmt 1 view .LVU898
 3459 05c2 541C     		adds	r4, r2, #1
 3460              	.LVL383:
 3461              		.loc 1 805 13 is_stmt 0 view .LVU899
 3462 05c4 5B46     		mov	r3, fp
 3463 05c6 0A99     		ldr	r1, [sp, #40]
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 86


 3464 05c8 2020     		movs	r0, #32
 3465 05ca B047     		blx	r6
 3466              	.LVL384:
 804:bsp/src/printf.c ****           while (l++ < width) {
 3467              		.loc 1 804 19 view .LVU900
 3468 05cc 2B46     		mov	r3, r5
 3469              		.loc 1 805 13 view .LVU901
 3470 05ce 2246     		mov	r2, r4
 3471              	.LVL385:
 3472              	.L275:
 804:bsp/src/printf.c ****           while (l++ < width) {
 3473              		.loc 1 804 19 view .LVU902
 3474 05d0 5D1C     		adds	r5, r3, #1
 3475              	.LVL386:
 804:bsp/src/printf.c ****           while (l++ < width) {
 3476              		.loc 1 804 17 view .LVU903
 3477 05d2 9A45     		cmp	r10, r3
 3478 05d4 F5D8     		bhi	.L277
 804:bsp/src/printf.c ****           while (l++ < width) {
 3479              		.loc 1 804 19 view .LVU904
 3480 05d6 0B95     		str	r5, [sp, #44]
 3481 05d8 3C46     		mov	r4, r7
 3482 05da 4F46     		mov	r7, r9
 3483 05dc 07E0     		b	.L278
 3484              	.LVL387:
 3485              	.L298:
 806:bsp/src/printf.c ****           }
 807:bsp/src/printf.c ****         }
 808:bsp/src/printf.c ****         // string output
 809:bsp/src/printf.c ****         while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 3486              		.loc 1 809 69 view .LVU905
 3487 05de 1F46     		mov	r7, r3
 3488              	.LVL388:
 3489              	.L280:
 810:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3490              		.loc 1 810 11 is_stmt 1 view .LVU906
 3491              		.loc 1 810 18 is_stmt 0 view .LVU907
 3492 05e0 08F10108 		add	r8, r8, #1
 3493              	.LVL389:
 3494              		.loc 1 810 11 view .LVU908
 3495 05e4 551C     		adds	r5, r2, #1
 3496              	.LVL390:
 3497              		.loc 1 810 11 view .LVU909
 3498 05e6 5B46     		mov	r3, fp
 3499 05e8 0A99     		ldr	r1, [sp, #40]
 3500 05ea B047     		blx	r6
 3501              	.LVL391:
 3502 05ec 2A46     		mov	r2, r5
 3503              	.LVL392:
 3504              	.L278:
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3505              		.loc 1 809 17 view .LVU910
 3506 05ee 98F80000 		ldrb	r0, [r8]	@ zero_extendqisi2
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3507              		.loc 1 809 15 view .LVU911
 3508 05f2 20B1     		cbz	r0, .L279
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 87


 3509              		.loc 1 809 26 discriminator 1 view .LVU912
 3510 05f4 002C     		cmp	r4, #0
 3511 05f6 F3D0     		beq	.L280
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3512              		.loc 1 809 69 discriminator 2 view .LVU913
 3513 05f8 7B1E     		subs	r3, r7, #1
 3514              	.LVL393:
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3515              		.loc 1 809 57 discriminator 2 view .LVU914
 3516 05fa 002F     		cmp	r7, #0
 3517 05fc EFD1     		bne	.L298
 3518              	.LVL394:
 3519              	.L279:
 809:bsp/src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3520              		.loc 1 809 57 discriminator 2 view .LVU915
 3521 05fe 1446     		mov	r4, r2
 811:bsp/src/printf.c ****         }
 812:bsp/src/printf.c ****         // post padding
 813:bsp/src/printf.c ****         if (flags & FLAGS_LEFT) {
 3522              		.loc 1 813 9 is_stmt 1 view .LVU916
 3523              		.loc 1 813 12 is_stmt 0 view .LVU917
 3524 0600 0C9B     		ldr	r3, [sp, #48]
 3525 0602 1BB9     		cbnz	r3, .L322
 3526              	.LVL395:
 3527              	.L282:
 814:bsp/src/printf.c ****           while (l++ < width) {
 815:bsp/src/printf.c ****             out(' ', buffer, idx++, maxlen);
 816:bsp/src/printf.c ****           }
 817:bsp/src/printf.c ****         }
 818:bsp/src/printf.c ****         format++;
 3528              		.loc 1 818 9 is_stmt 1 view .LVU918
 3529              		.loc 1 818 15 is_stmt 0 view .LVU919
 3530 0604 0D9B     		ldr	r3, [sp, #52]
 3531 0606 0133     		adds	r3, r3, #1
 3532 0608 0D93     		str	r3, [sp, #52]
 819:bsp/src/printf.c ****         break;
 3533              		.loc 1 819 9 is_stmt 1 view .LVU920
 3534 060a 04E5     		b	.L284
 3535              	.LVL396:
 3536              	.L322:
 3537              		.loc 1 819 9 is_stmt 0 view .LVU921
 3538 060c 0B9B     		ldr	r3, [sp, #44]
 3539 060e 06E0     		b	.L281
 3540              	.LVL397:
 3541              	.L283:
 815:bsp/src/printf.c ****           }
 3542              		.loc 1 815 13 is_stmt 1 view .LVU922
 3543 0610 551C     		adds	r5, r2, #1
 3544              	.LVL398:
 815:bsp/src/printf.c ****           }
 3545              		.loc 1 815 13 is_stmt 0 view .LVU923
 3546 0612 5B46     		mov	r3, fp
 3547 0614 0A99     		ldr	r1, [sp, #40]
 3548 0616 2020     		movs	r0, #32
 3549 0618 B047     		blx	r6
 3550              	.LVL399:
 814:bsp/src/printf.c ****           while (l++ < width) {
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 88


 3551              		.loc 1 814 19 view .LVU924
 3552 061a 2346     		mov	r3, r4
 815:bsp/src/printf.c ****           }
 3553              		.loc 1 815 13 view .LVU925
 3554 061c 2A46     		mov	r2, r5
 3555              	.LVL400:
 3556              	.L281:
 814:bsp/src/printf.c ****           while (l++ < width) {
 3557              		.loc 1 814 19 view .LVU926
 3558 061e 5C1C     		adds	r4, r3, #1
 3559              	.LVL401:
 814:bsp/src/printf.c ****           while (l++ < width) {
 3560              		.loc 1 814 17 view .LVU927
 3561 0620 9A45     		cmp	r10, r3
 3562 0622 F5D8     		bhi	.L283
 814:bsp/src/printf.c ****           while (l++ < width) {
 3563              		.loc 1 814 17 view .LVU928
 3564 0624 1446     		mov	r4, r2
 3565              	.LVL402:
 814:bsp/src/printf.c ****           while (l++ < width) {
 3566              		.loc 1 814 17 view .LVU929
 3567 0626 EDE7     		b	.L282
 3568              	.LVL403:
 3569              	.L235:
 814:bsp/src/printf.c ****           while (l++ < width) {
 3570              		.loc 1 814 17 view .LVU930
 3571              	.LBE47:
 3572              	.LBB52:
 820:bsp/src/printf.c ****       }
 821:bsp/src/printf.c **** 
 822:bsp/src/printf.c ****       case 'p' : {
 823:bsp/src/printf.c ****         width = sizeof(void*) * 2U;
 3573              		.loc 1 823 9 is_stmt 1 view .LVU931
 824:bsp/src/printf.c ****         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 3574              		.loc 1 824 9 view .LVU932
 3575              		.loc 1 824 15 is_stmt 0 view .LVU933
 3576 0628 45F02105 		orr	r5, r5, #33
 3577              	.LVL404:
 825:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 826:bsp/src/printf.c ****         const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 3578              		.loc 1 826 9 is_stmt 1 view .LVU934
 827:bsp/src/printf.c ****         if (is_ll) {
 3579              		.loc 1 827 9 view .LVU935
 828:bsp/src/printf.c ****           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U,
 829:bsp/src/printf.c ****         }
 830:bsp/src/printf.c ****         else {
 831:bsp/src/printf.c **** #endif
 832:bsp/src/printf.c ****           idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)),
 3580              		.loc 1 832 11 view .LVU936
 3581              		.loc 1 832 81 is_stmt 0 view .LVU937
 3582 062c 189B     		ldr	r3, [sp, #96]
 3583 062e 1A1D     		adds	r2, r3, #4
 3584 0630 1892     		str	r2, [sp, #96]
 3585 0632 1B68     		ldr	r3, [r3]
 3586              		.loc 1 832 17 view .LVU938
 3587 0634 0595     		str	r5, [sp, #20]
 3588 0636 0822     		movs	r2, #8
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 89


 3589 0638 0492     		str	r2, [sp, #16]
 3590 063a CDF80C90 		str	r9, [sp, #12]
 3591 063e 1022     		movs	r2, #16
 3592 0640 0292     		str	r2, [sp, #8]
 3593 0642 0022     		movs	r2, #0
 3594 0644 0192     		str	r2, [sp, #4]
 3595 0646 0093     		str	r3, [sp]
 3596 0648 5B46     		mov	r3, fp
 3597 064a 2246     		mov	r2, r4
 3598 064c 0A99     		ldr	r1, [sp, #40]
 3599 064e 3046     		mov	r0, r6
 3600 0650 FFF7FEFF 		bl	_ntoa_long
 3601              	.LVL405:
 3602 0654 0446     		mov	r4, r0
 3603              	.LVL406:
 833:bsp/src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 834:bsp/src/printf.c ****         }
 835:bsp/src/printf.c **** #endif
 836:bsp/src/printf.c ****         format++;
 3604              		.loc 1 836 9 is_stmt 1 view .LVU939
 3605              		.loc 1 836 15 is_stmt 0 view .LVU940
 3606 0656 0D9B     		ldr	r3, [sp, #52]
 3607 0658 0133     		adds	r3, r3, #1
 3608 065a 0D93     		str	r3, [sp, #52]
 837:bsp/src/printf.c ****         break;
 3609              		.loc 1 837 9 is_stmt 1 view .LVU941
 3610 065c DBE4     		b	.L284
 3611              	.LVL407:
 3612              	.L239:
 3613              		.loc 1 837 9 is_stmt 0 view .LVU942
 3614              	.LBE52:
 838:bsp/src/printf.c ****       }
 839:bsp/src/printf.c **** 
 840:bsp/src/printf.c ****       case '%' :
 841:bsp/src/printf.c ****         out('%', buffer, idx++, maxlen);
 3615              		.loc 1 841 9 is_stmt 1 view .LVU943
 3616 065e 651C     		adds	r5, r4, #1
 3617              	.LVL408:
 3618              		.loc 1 841 9 is_stmt 0 view .LVU944
 3619 0660 5B46     		mov	r3, fp
 3620 0662 2246     		mov	r2, r4
 3621 0664 0A99     		ldr	r1, [sp, #40]
 3622 0666 2520     		movs	r0, #37
 3623 0668 B047     		blx	r6
 3624              	.LVL409:
 842:bsp/src/printf.c ****         format++;
 3625              		.loc 1 842 9 is_stmt 1 view .LVU945
 3626              		.loc 1 842 15 is_stmt 0 view .LVU946
 3627 066a 0D9B     		ldr	r3, [sp, #52]
 3628 066c 0133     		adds	r3, r3, #1
 3629 066e 0D93     		str	r3, [sp, #52]
 843:bsp/src/printf.c ****         break;
 3630              		.loc 1 843 9 is_stmt 1 view .LVU947
 841:bsp/src/printf.c ****         format++;
 3631              		.loc 1 841 9 is_stmt 0 view .LVU948
 3632 0670 2C46     		mov	r4, r5
 3633              		.loc 1 843 9 view .LVU949
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 90


 3634 0672 D0E4     		b	.L284
 3635              	.LVL410:
 3636              	.L231:
 844:bsp/src/printf.c **** 
 845:bsp/src/printf.c ****       default :
 846:bsp/src/printf.c ****         out(*format, buffer, idx++, maxlen);
 3637              		.loc 1 846 9 is_stmt 1 view .LVU950
 3638 0674 651C     		adds	r5, r4, #1
 3639              	.LVL411:
 3640              		.loc 1 846 9 is_stmt 0 view .LVU951
 3641 0676 5B46     		mov	r3, fp
 3642 0678 2246     		mov	r2, r4
 3643 067a 0A99     		ldr	r1, [sp, #40]
 3644 067c B047     		blx	r6
 3645              	.LVL412:
 847:bsp/src/printf.c ****         format++;
 3646              		.loc 1 847 9 is_stmt 1 view .LVU952
 3647              		.loc 1 847 15 is_stmt 0 view .LVU953
 3648 067e 0D9B     		ldr	r3, [sp, #52]
 3649 0680 0133     		adds	r3, r3, #1
 3650 0682 0D93     		str	r3, [sp, #52]
 848:bsp/src/printf.c ****         break;
 3651              		.loc 1 848 9 is_stmt 1 view .LVU954
 846:bsp/src/printf.c ****         format++;
 3652              		.loc 1 846 9 is_stmt 0 view .LVU955
 3653 0684 2C46     		mov	r4, r5
 3654              		.loc 1 848 9 view .LVU956
 3655 0686 C6E4     		b	.L284
 3656              	.LVL413:
 3657              	.L303:
 584:bsp/src/printf.c ****   }
 3658              		.loc 1 584 9 view .LVU957
 3659 0688 074E     		ldr	r6, .L323
 3660 068a C3E4     		b	.L204
 3661              	.LVL414:
 3662              	.L304:
 849:bsp/src/printf.c ****     }
 850:bsp/src/printf.c ****   }
 851:bsp/src/printf.c **** 
 852:bsp/src/printf.c ****   // termination
 853:bsp/src/printf.c ****   out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 3663              		.loc 1 853 3 is_stmt 1 view .LVU958
 3664 068c 5C45     		cmp	r4, fp
 3665 068e 09D3     		bcc	.L299
 3666              		.loc 1 853 3 is_stmt 0 discriminator 1 view .LVU959
 3667 0690 0BF1FF32 		add	r2, fp, #-1
 3668              	.L286:
 3669              		.loc 1 853 3 discriminator 4 view .LVU960
 3670 0694 5B46     		mov	r3, fp
 3671 0696 0A99     		ldr	r1, [sp, #40]
 3672 0698 0020     		movs	r0, #0
 3673 069a B047     		blx	r6
 3674              	.LVL415:
 854:bsp/src/printf.c **** 
 855:bsp/src/printf.c ****   // return written chars without terminating \0
 856:bsp/src/printf.c ****   return (int)idx;
 3675              		.loc 1 856 3 is_stmt 1 discriminator 4 view .LVU961
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 91


 857:bsp/src/printf.c **** }
 3676              		.loc 1 857 1 is_stmt 0 discriminator 4 view .LVU962
 3677 069c 2046     		mov	r0, r4
 3678 069e 0FB0     		add	sp, sp, #60
 3679              	.LCFI28:
 3680              		.cfi_remember_state
 3681              		.cfi_def_cfa_offset 36
 3682              		@ sp needed
 3683 06a0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3684              	.LVL416:
 3685              	.L299:
 3686              	.LCFI29:
 3687              		.cfi_restore_state
 853:bsp/src/printf.c **** 
 3688              		.loc 1 853 3 view .LVU963
 3689 06a4 2246     		mov	r2, r4
 3690 06a6 F5E7     		b	.L286
 3691              	.L324:
 3692              		.align	2
 3693              	.L323:
 3694 06a8 00000000 		.word	_out_null
 3695              		.cfi_endproc
 3696              	.LFE143:
 3698              		.section	.text.printf_,"ax",%progbits
 3699              		.align	1
 3700              		.global	printf_
 3701              		.syntax unified
 3702              		.thumb
 3703              		.thumb_func
 3704              		.fpu fpv4-sp-d16
 3706              	printf_:
 3707              	.LVL417:
 3708              	.LFB144:
 858:bsp/src/printf.c **** 
 859:bsp/src/printf.c **** 
 860:bsp/src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
 861:bsp/src/printf.c **** 
 862:bsp/src/printf.c **** int printf_(const char* format, ...)
 863:bsp/src/printf.c **** {
 3709              		.loc 1 863 1 is_stmt 1 view -0
 3710              		.cfi_startproc
 3711              		@ args = 4, pretend = 16, frame = 8
 3712              		@ frame_needed = 0, uses_anonymous_args = 1
 3713              		.loc 1 863 1 is_stmt 0 view .LVU965
 3714 0000 0FB4     		push	{r0, r1, r2, r3}
 3715              	.LCFI30:
 3716              		.cfi_def_cfa_offset 16
 3717              		.cfi_offset 0, -16
 3718              		.cfi_offset 1, -12
 3719              		.cfi_offset 2, -8
 3720              		.cfi_offset 3, -4
 3721 0002 00B5     		push	{lr}
 3722              	.LCFI31:
 3723              		.cfi_def_cfa_offset 20
 3724              		.cfi_offset 14, -20
 3725 0004 85B0     		sub	sp, sp, #20
 3726              	.LCFI32:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 92


 3727              		.cfi_def_cfa_offset 40
 3728 0006 06AA     		add	r2, sp, #24
 3729 0008 52F8043B 		ldr	r3, [r2], #4
 864:bsp/src/printf.c ****   va_list va;
 3730              		.loc 1 864 3 is_stmt 1 view .LVU966
 865:bsp/src/printf.c ****   va_start(va, format);
 3731              		.loc 1 865 3 view .LVU967
 3732 000c 0392     		str	r2, [sp, #12]
 866:bsp/src/printf.c ****   char buffer[1];
 3733              		.loc 1 866 3 view .LVU968
 867:bsp/src/printf.c ****   const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 3734              		.loc 1 867 3 view .LVU969
 3735              		.loc 1 867 19 is_stmt 0 view .LVU970
 3736 000e 0092     		str	r2, [sp]
 3737 0010 4FF0FF32 		mov	r2, #-1
 3738 0014 02A9     		add	r1, sp, #8
 3739 0016 0448     		ldr	r0, .L327
 3740 0018 FFF7FEFF 		bl	_vsnprintf
 3741              	.LVL418:
 868:bsp/src/printf.c ****   va_end(va);
 3742              		.loc 1 868 3 is_stmt 1 view .LVU971
 869:bsp/src/printf.c ****   return ret;
 3743              		.loc 1 869 3 view .LVU972
 870:bsp/src/printf.c **** }
 3744              		.loc 1 870 1 is_stmt 0 view .LVU973
 3745 001c 05B0     		add	sp, sp, #20
 3746              	.LCFI33:
 3747              		.cfi_def_cfa_offset 20
 3748              		@ sp needed
 3749 001e 5DF804EB 		ldr	lr, [sp], #4
 3750              	.LCFI34:
 3751              		.cfi_restore 14
 3752              		.cfi_def_cfa_offset 16
 3753 0022 04B0     		add	sp, sp, #16
 3754              	.LCFI35:
 3755              		.cfi_restore 3
 3756              		.cfi_restore 2
 3757              		.cfi_restore 1
 3758              		.cfi_restore 0
 3759              		.cfi_def_cfa_offset 0
 3760 0024 7047     		bx	lr
 3761              	.L328:
 3762 0026 00BF     		.align	2
 3763              	.L327:
 3764 0028 00000000 		.word	_out_char
 3765              		.cfi_endproc
 3766              	.LFE144:
 3768              		.section	.text.sprintf_,"ax",%progbits
 3769              		.align	1
 3770              		.global	sprintf_
 3771              		.syntax unified
 3772              		.thumb
 3773              		.thumb_func
 3774              		.fpu fpv4-sp-d16
 3776              	sprintf_:
 3777              	.LVL419:
 3778              	.LFB145:
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 93


 871:bsp/src/printf.c **** 
 872:bsp/src/printf.c **** 
 873:bsp/src/printf.c **** int sprintf_(char* buffer, const char* format, ...)
 874:bsp/src/printf.c **** {
 3779              		.loc 1 874 1 is_stmt 1 view -0
 3780              		.cfi_startproc
 3781              		@ args = 4, pretend = 12, frame = 8
 3782              		@ frame_needed = 0, uses_anonymous_args = 1
 3783              		.loc 1 874 1 is_stmt 0 view .LVU975
 3784 0000 0EB4     		push	{r1, r2, r3}
 3785              	.LCFI36:
 3786              		.cfi_def_cfa_offset 12
 3787              		.cfi_offset 1, -12
 3788              		.cfi_offset 2, -8
 3789              		.cfi_offset 3, -4
 3790 0002 00B5     		push	{lr}
 3791              	.LCFI37:
 3792              		.cfi_def_cfa_offset 16
 3793              		.cfi_offset 14, -16
 3794 0004 84B0     		sub	sp, sp, #16
 3795              	.LCFI38:
 3796              		.cfi_def_cfa_offset 32
 3797 0006 05AA     		add	r2, sp, #20
 3798 0008 52F8043B 		ldr	r3, [r2], #4
 875:bsp/src/printf.c ****   va_list va;
 3799              		.loc 1 875 3 is_stmt 1 view .LVU976
 876:bsp/src/printf.c ****   va_start(va, format);
 3800              		.loc 1 876 3 view .LVU977
 3801 000c 0392     		str	r2, [sp, #12]
 877:bsp/src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 3802              		.loc 1 877 3 view .LVU978
 3803              		.loc 1 877 19 is_stmt 0 view .LVU979
 3804 000e 0092     		str	r2, [sp]
 3805 0010 4FF0FF32 		mov	r2, #-1
 3806 0014 0146     		mov	r1, r0
 3807 0016 0448     		ldr	r0, .L331
 3808              	.LVL420:
 3809              		.loc 1 877 19 view .LVU980
 3810 0018 FFF7FEFF 		bl	_vsnprintf
 3811              	.LVL421:
 878:bsp/src/printf.c ****   va_end(va);
 3812              		.loc 1 878 3 is_stmt 1 view .LVU981
 879:bsp/src/printf.c ****   return ret;
 3813              		.loc 1 879 3 view .LVU982
 880:bsp/src/printf.c **** }
 3814              		.loc 1 880 1 is_stmt 0 view .LVU983
 3815 001c 04B0     		add	sp, sp, #16
 3816              	.LCFI39:
 3817              		.cfi_def_cfa_offset 16
 3818              		@ sp needed
 3819 001e 5DF804EB 		ldr	lr, [sp], #4
 3820              	.LCFI40:
 3821              		.cfi_restore 14
 3822              		.cfi_def_cfa_offset 12
 3823 0022 03B0     		add	sp, sp, #12
 3824              	.LCFI41:
 3825              		.cfi_restore 3
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 94


 3826              		.cfi_restore 2
 3827              		.cfi_restore 1
 3828              		.cfi_def_cfa_offset 0
 3829 0024 7047     		bx	lr
 3830              	.L332:
 3831 0026 00BF     		.align	2
 3832              	.L331:
 3833 0028 00000000 		.word	_out_buffer
 3834              		.cfi_endproc
 3835              	.LFE145:
 3837              		.section	.text.snprintf_,"ax",%progbits
 3838              		.align	1
 3839              		.global	snprintf_
 3840              		.syntax unified
 3841              		.thumb
 3842              		.thumb_func
 3843              		.fpu fpv4-sp-d16
 3845              	snprintf_:
 3846              	.LVL422:
 3847              	.LFB146:
 881:bsp/src/printf.c **** 
 882:bsp/src/printf.c **** 
 883:bsp/src/printf.c **** int snprintf_(char* buffer, size_t count, const char* format, ...)
 884:bsp/src/printf.c **** {
 3848              		.loc 1 884 1 is_stmt 1 view -0
 3849              		.cfi_startproc
 3850              		@ args = 4, pretend = 8, frame = 8
 3851              		@ frame_needed = 0, uses_anonymous_args = 1
 3852              		.loc 1 884 1 is_stmt 0 view .LVU985
 3853 0000 0CB4     		push	{r2, r3}
 3854              	.LCFI42:
 3855              		.cfi_def_cfa_offset 8
 3856              		.cfi_offset 2, -8
 3857              		.cfi_offset 3, -4
 3858 0002 00B5     		push	{lr}
 3859              	.LCFI43:
 3860              		.cfi_def_cfa_offset 12
 3861              		.cfi_offset 14, -12
 3862 0004 85B0     		sub	sp, sp, #20
 3863              	.LCFI44:
 3864              		.cfi_def_cfa_offset 32
 3865 0006 06AA     		add	r2, sp, #24
 3866 0008 52F8043B 		ldr	r3, [r2], #4
 885:bsp/src/printf.c ****   va_list va;
 3867              		.loc 1 885 3 is_stmt 1 view .LVU986
 886:bsp/src/printf.c ****   va_start(va, format);
 3868              		.loc 1 886 3 view .LVU987
 3869 000c 0392     		str	r2, [sp, #12]
 887:bsp/src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 3870              		.loc 1 887 3 view .LVU988
 3871              		.loc 1 887 19 is_stmt 0 view .LVU989
 3872 000e 0092     		str	r2, [sp]
 3873 0010 0A46     		mov	r2, r1
 3874 0012 0146     		mov	r1, r0
 3875              	.LVL423:
 3876              		.loc 1 887 19 view .LVU990
 3877 0014 0348     		ldr	r0, .L335
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 95


 3878              	.LVL424:
 3879              		.loc 1 887 19 view .LVU991
 3880 0016 FFF7FEFF 		bl	_vsnprintf
 3881              	.LVL425:
 888:bsp/src/printf.c ****   va_end(va);
 3882              		.loc 1 888 3 is_stmt 1 view .LVU992
 889:bsp/src/printf.c ****   return ret;
 3883              		.loc 1 889 3 view .LVU993
 890:bsp/src/printf.c **** }
 3884              		.loc 1 890 1 is_stmt 0 view .LVU994
 3885 001a 05B0     		add	sp, sp, #20
 3886              	.LCFI45:
 3887              		.cfi_def_cfa_offset 12
 3888              		@ sp needed
 3889 001c 5DF804EB 		ldr	lr, [sp], #4
 3890              	.LCFI46:
 3891              		.cfi_restore 14
 3892              		.cfi_def_cfa_offset 8
 3893 0020 02B0     		add	sp, sp, #8
 3894              	.LCFI47:
 3895              		.cfi_restore 3
 3896              		.cfi_restore 2
 3897              		.cfi_def_cfa_offset 0
 3898 0022 7047     		bx	lr
 3899              	.L336:
 3900              		.align	2
 3901              	.L335:
 3902 0024 00000000 		.word	_out_buffer
 3903              		.cfi_endproc
 3904              	.LFE146:
 3906              		.section	.text.vprintf_,"ax",%progbits
 3907              		.align	1
 3908              		.global	vprintf_
 3909              		.syntax unified
 3910              		.thumb
 3911              		.thumb_func
 3912              		.fpu fpv4-sp-d16
 3914              	vprintf_:
 3915              	.LVL426:
 3916              	.LFB147:
 891:bsp/src/printf.c **** 
 892:bsp/src/printf.c **** 
 893:bsp/src/printf.c **** int vprintf_(const char* format, va_list va)
 894:bsp/src/printf.c **** {
 3917              		.loc 1 894 1 is_stmt 1 view -0
 3918              		.cfi_startproc
 3919              		@ args = 0, pretend = 0, frame = 8
 3920              		@ frame_needed = 0, uses_anonymous_args = 0
 3921              		.loc 1 894 1 is_stmt 0 view .LVU996
 3922 0000 00B5     		push	{lr}
 3923              	.LCFI48:
 3924              		.cfi_def_cfa_offset 4
 3925              		.cfi_offset 14, -4
 3926 0002 85B0     		sub	sp, sp, #20
 3927              	.LCFI49:
 3928              		.cfi_def_cfa_offset 24
 895:bsp/src/printf.c ****   char buffer[1];
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 96


 3929              		.loc 1 895 3 is_stmt 1 view .LVU997
 896:bsp/src/printf.c ****   return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 3930              		.loc 1 896 3 view .LVU998
 3931              		.loc 1 896 10 is_stmt 0 view .LVU999
 3932 0004 0091     		str	r1, [sp]
 3933 0006 0346     		mov	r3, r0
 3934 0008 4FF0FF32 		mov	r2, #-1
 3935 000c 03A9     		add	r1, sp, #12
 3936              	.LVL427:
 3937              		.loc 1 896 10 view .LVU1000
 3938 000e 0348     		ldr	r0, .L339
 3939              	.LVL428:
 3940              		.loc 1 896 10 view .LVU1001
 3941 0010 FFF7FEFF 		bl	_vsnprintf
 3942              	.LVL429:
 897:bsp/src/printf.c **** }
 3943              		.loc 1 897 1 view .LVU1002
 3944 0014 05B0     		add	sp, sp, #20
 3945              	.LCFI50:
 3946              		.cfi_def_cfa_offset 4
 3947              		@ sp needed
 3948 0016 5DF804FB 		ldr	pc, [sp], #4
 3949              	.L340:
 3950 001a 00BF     		.align	2
 3951              	.L339:
 3952 001c 00000000 		.word	_out_char
 3953              		.cfi_endproc
 3954              	.LFE147:
 3956              		.section	.text.vsnprintf_,"ax",%progbits
 3957              		.align	1
 3958              		.global	vsnprintf_
 3959              		.syntax unified
 3960              		.thumb
 3961              		.thumb_func
 3962              		.fpu fpv4-sp-d16
 3964              	vsnprintf_:
 3965              	.LVL430:
 3966              	.LFB148:
 898:bsp/src/printf.c **** 
 899:bsp/src/printf.c **** 
 900:bsp/src/printf.c **** int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
 901:bsp/src/printf.c **** {
 3967              		.loc 1 901 1 is_stmt 1 view -0
 3968              		.cfi_startproc
 3969              		@ args = 0, pretend = 0, frame = 0
 3970              		@ frame_needed = 0, uses_anonymous_args = 0
 3971              		.loc 1 901 1 is_stmt 0 view .LVU1004
 3972 0000 00B5     		push	{lr}
 3973              	.LCFI51:
 3974              		.cfi_def_cfa_offset 4
 3975              		.cfi_offset 14, -4
 3976 0002 83B0     		sub	sp, sp, #12
 3977              	.LCFI52:
 3978              		.cfi_def_cfa_offset 16
 902:bsp/src/printf.c ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 3979              		.loc 1 902 3 is_stmt 1 view .LVU1005
 3980              		.loc 1 902 10 is_stmt 0 view .LVU1006
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 97


 3981 0004 0093     		str	r3, [sp]
 3982 0006 1346     		mov	r3, r2
 3983              	.LVL431:
 3984              		.loc 1 902 10 view .LVU1007
 3985 0008 0A46     		mov	r2, r1
 3986              	.LVL432:
 3987              		.loc 1 902 10 view .LVU1008
 3988 000a 0146     		mov	r1, r0
 3989              	.LVL433:
 3990              		.loc 1 902 10 view .LVU1009
 3991 000c 0248     		ldr	r0, .L343
 3992              	.LVL434:
 3993              		.loc 1 902 10 view .LVU1010
 3994 000e FFF7FEFF 		bl	_vsnprintf
 3995              	.LVL435:
 903:bsp/src/printf.c **** }
 3996              		.loc 1 903 1 view .LVU1011
 3997 0012 03B0     		add	sp, sp, #12
 3998              	.LCFI53:
 3999              		.cfi_def_cfa_offset 4
 4000              		@ sp needed
 4001 0014 5DF804FB 		ldr	pc, [sp], #4
 4002              	.L344:
 4003              		.align	2
 4004              	.L343:
 4005 0018 00000000 		.word	_out_buffer
 4006              		.cfi_endproc
 4007              	.LFE148:
 4009              		.section	.text.fctprintf,"ax",%progbits
 4010              		.align	1
 4011              		.global	fctprintf
 4012              		.syntax unified
 4013              		.thumb
 4014              		.thumb_func
 4015              		.fpu fpv4-sp-d16
 4017              	fctprintf:
 4018              	.LVL436:
 4019              	.LFB149:
 904:bsp/src/printf.c **** 
 905:bsp/src/printf.c **** 
 906:bsp/src/printf.c **** int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
 907:bsp/src/printf.c **** {
 4020              		.loc 1 907 1 is_stmt 1 view -0
 4021              		.cfi_startproc
 4022              		@ args = 4, pretend = 8, frame = 16
 4023              		@ frame_needed = 0, uses_anonymous_args = 1
 4024              		.loc 1 907 1 is_stmt 0 view .LVU1013
 4025 0000 0CB4     		push	{r2, r3}
 4026              	.LCFI54:
 4027              		.cfi_def_cfa_offset 8
 4028              		.cfi_offset 2, -8
 4029              		.cfi_offset 3, -4
 4030 0002 00B5     		push	{lr}
 4031              	.LCFI55:
 4032              		.cfi_def_cfa_offset 12
 4033              		.cfi_offset 14, -12
 4034 0004 87B0     		sub	sp, sp, #28
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 98


 4035              	.LCFI56:
 4036              		.cfi_def_cfa_offset 40
 4037 0006 08AA     		add	r2, sp, #32
 4038 0008 52F8043B 		ldr	r3, [r2], #4
 908:bsp/src/printf.c ****   va_list va;
 4039              		.loc 1 908 3 is_stmt 1 view .LVU1014
 909:bsp/src/printf.c ****   va_start(va, format);
 4040              		.loc 1 909 3 view .LVU1015
 4041 000c 0592     		str	r2, [sp, #20]
 910:bsp/src/printf.c ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 4042              		.loc 1 910 3 view .LVU1016
 4043              		.loc 1 910 27 is_stmt 0 view .LVU1017
 4044 000e 0390     		str	r0, [sp, #12]
 4045 0010 0491     		str	r1, [sp, #16]
 911:bsp/src/printf.c ****   const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 4046              		.loc 1 911 3 is_stmt 1 view .LVU1018
 4047              		.loc 1 911 19 is_stmt 0 view .LVU1019
 4048 0012 0092     		str	r2, [sp]
 4049 0014 4FF0FF32 		mov	r2, #-1
 4050 0018 03A9     		add	r1, sp, #12
 4051              	.LVL437:
 4052              		.loc 1 911 19 view .LVU1020
 4053 001a 0448     		ldr	r0, .L347
 4054              	.LVL438:
 4055              		.loc 1 911 19 view .LVU1021
 4056 001c FFF7FEFF 		bl	_vsnprintf
 4057              	.LVL439:
 912:bsp/src/printf.c ****   va_end(va);
 4058              		.loc 1 912 3 is_stmt 1 view .LVU1022
 913:bsp/src/printf.c ****   return ret;
 4059              		.loc 1 913 3 view .LVU1023
 914:bsp/src/printf.c **** }
 4060              		.loc 1 914 1 is_stmt 0 view .LVU1024
 4061 0020 07B0     		add	sp, sp, #28
 4062              	.LCFI57:
 4063              		.cfi_def_cfa_offset 12
 4064              		@ sp needed
 4065 0022 5DF804EB 		ldr	lr, [sp], #4
 4066              	.LCFI58:
 4067              		.cfi_restore 14
 4068              		.cfi_def_cfa_offset 8
 4069 0026 02B0     		add	sp, sp, #8
 4070              	.LCFI59:
 4071              		.cfi_restore 3
 4072              		.cfi_restore 2
 4073              		.cfi_def_cfa_offset 0
 4074 0028 7047     		bx	lr
 4075              	.L348:
 4076 002a 00BF     		.align	2
 4077              	.L347:
 4078 002c 00000000 		.word	_out_fct
 4079              		.cfi_endproc
 4080              	.LFE149:
 4082              		.section	.text._putchar,"ax",%progbits
 4083              		.align	1
 4084              		.global	_putchar
 4085              		.syntax unified
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 99


 4086              		.thumb
 4087              		.thumb_func
 4088              		.fpu fpv4-sp-d16
 4090              	_putchar:
 4091              	.LVL440:
 4092              	.LFB150:
 915:bsp/src/printf.c **** 
 916:bsp/src/printf.c **** /*
 917:bsp/src/printf.c **** ***************************************************************************************************
 918:bsp/src/printf.c **** *	Function Name: __io_putchar
 919:bsp/src/printf.c **** *	Function Description: redefine putchar function to print info through USART2
 920:bsp/src/printf.c **** *	Parameters: None
 921:bsp/src/printf.c **** *	Return: None
 922:bsp/src/printf.c **** ***************************************************************************************************
 923:bsp/src/printf.c **** */
 924:bsp/src/printf.c **** void _putchar(char character)
 925:bsp/src/printf.c **** {
 4093              		.loc 1 925 1 is_stmt 1 view -0
 4094              		.cfi_startproc
 4095              		@ args = 0, pretend = 0, frame = 0
 4096              		@ frame_needed = 0, uses_anonymous_args = 0
 4097              		.loc 1 925 1 is_stmt 0 view .LVU1026
 4098 0000 08B5     		push	{r3, lr}
 4099              	.LCFI60:
 4100              		.cfi_def_cfa_offset 8
 4101              		.cfi_offset 3, -8
 4102              		.cfi_offset 14, -4
 926:bsp/src/printf.c ****   // Code to write character 'ch' on the UART
 927:bsp/src/printf.c ****   USART_SendData(USART2, (uint8_t) character);
 4103              		.loc 1 927 3 is_stmt 1 view .LVU1027
 4104 0002 0146     		mov	r1, r0
 4105 0004 0448     		ldr	r0, .L352
 4106              	.LVL441:
 4107              		.loc 1 927 3 is_stmt 0 view .LVU1028
 4108 0006 FFF7FEFF 		bl	USART_SendData
 4109              	.LVL442:
 928:bsp/src/printf.c **** 
 929:bsp/src/printf.c ****   /* 等待发送结束 */
 930:bsp/src/printf.c ****   //while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
 931:bsp/src/printf.c ****   while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET)
 4110              		.loc 1 931 3 is_stmt 1 view .LVU1029
 4111              	.L350:
 932:bsp/src/printf.c ****   {}
 4112              		.loc 1 932 4 discriminator 1 view .LVU1030
 931:bsp/src/printf.c ****   {}
 4113              		.loc 1 931 10 is_stmt 0 discriminator 1 view .LVU1031
 4114 000a 4021     		movs	r1, #64
 4115 000c 0248     		ldr	r0, .L352
 4116 000e FFF7FEFF 		bl	USART_GetFlagStatus
 4117              	.LVL443:
 931:bsp/src/printf.c ****   {}
 4118              		.loc 1 931 9 discriminator 1 view .LVU1032
 4119 0012 0028     		cmp	r0, #0
 4120 0014 F9D0     		beq	.L350
 933:bsp/src/printf.c **** 
 934:bsp/src/printf.c ****   //return ch;
 935:bsp/src/printf.c **** }
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 100


 4121              		.loc 1 935 1 view .LVU1033
 4122 0016 08BD     		pop	{r3, pc}
 4123              	.L353:
 4124              		.align	2
 4125              	.L352:
 4126 0018 00440040 		.word	1073759232
 4127              		.cfi_endproc
 4128              	.LFE150:
 4130              		.section	.text._out_char,"ax",%progbits
 4131              		.align	1
 4132              		.syntax unified
 4133              		.thumb
 4134              		.thumb_func
 4135              		.fpu fpv4-sp-d16
 4137              	_out_char:
 4138              	.LVL444:
 4139              	.LFB132:
 150:bsp/src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 4140              		.loc 1 150 1 is_stmt 1 view -0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 0
 4143              		@ frame_needed = 0, uses_anonymous_args = 0
 151:bsp/src/printf.c ****   if (character) {
 4144              		.loc 1 151 3 view .LVU1035
 151:bsp/src/printf.c ****   if (character) {
 4145              		.loc 1 151 17 view .LVU1036
 151:bsp/src/printf.c ****   if (character) {
 4146              		.loc 1 151 28 view .LVU1037
 152:bsp/src/printf.c ****     _putchar(character);
 4147              		.loc 1 152 3 view .LVU1038
 152:bsp/src/printf.c ****     _putchar(character);
 4148              		.loc 1 152 6 is_stmt 0 view .LVU1039
 4149 0000 00B9     		cbnz	r0, .L360
 4150 0002 7047     		bx	lr
 4151              	.L360:
 150:bsp/src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 4152              		.loc 1 150 1 view .LVU1040
 4153 0004 08B5     		push	{r3, lr}
 4154              	.LCFI61:
 4155              		.cfi_def_cfa_offset 8
 4156              		.cfi_offset 3, -8
 4157              		.cfi_offset 14, -4
 153:bsp/src/printf.c ****   }
 4158              		.loc 1 153 5 is_stmt 1 view .LVU1041
 4159 0006 FFF7FEFF 		bl	_putchar
 4160              	.LVL445:
 155:bsp/src/printf.c **** 
 4161              		.loc 1 155 1 is_stmt 0 view .LVU1042
 4162 000a 08BD     		pop	{r3, pc}
 4163              		.cfi_endproc
 4164              	.LFE132:
 4166              		.section	.rodata._ftoa.str1.4,"aMS",%progbits,1
 4167              		.align	2
 4168              	.LC0:
 4169 0000 666E6900 		.ascii	"fni\000"
 4170              	.LC1:
 4171 0004 666E692B 		.ascii	"fni+\000"
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 101


 4171      00
 4172 0009 000000   		.space	3
 4173              	.LC2:
 4174 000c 6E616E00 		.ascii	"nan\000"
 4175              	.LC3:
 4176 0010 666E692D 		.ascii	"fni-\000"
 4176      00
 4177              		.section	.rodata.pow10.12097,"a"
 4178              		.align	3
 4179              		.set	.LANCHOR0,. + 0
 4182              	pow10.12097:
 4183 0000 00000000 		.word	0
 4184 0004 0000F03F 		.word	1072693248
 4185 0008 00000000 		.word	0
 4186 000c 00002440 		.word	1076101120
 4187 0010 00000000 		.word	0
 4188 0014 00005940 		.word	1079574528
 4189 0018 00000000 		.word	0
 4190 001c 00408F40 		.word	1083129856
 4191 0020 00000000 		.word	0
 4192 0024 0088C340 		.word	1086556160
 4193 0028 00000000 		.word	0
 4194 002c 006AF840 		.word	1090021888
 4195 0030 00000000 		.word	0
 4196 0034 80842E41 		.word	1093567616
 4197 0038 00000000 		.word	0
 4198 003c D0126341 		.word	1097011920
 4199 0040 00000000 		.word	0
 4200 0044 84D79741 		.word	1100470148
 4201 0048 00000000 		.word	0
 4202 004c 65CDCD41 		.word	1104006501
 4203              		.text
 4204              	.Letext0:
 4205              		.file 2 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 4206              		.file 3 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 4207              		.file 4 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi
 4208              		.file 5 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi
 4209              		.file 6 "User/FreeRTOSConfig.h"
 4210              		.file 7 "Libraries/CMSIS/Include/core_cm4.h"
 4211              		.file 8 "Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4212              		.file 9 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include
 4213              		.file 10 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/includ
 4214              		.file 11 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/includ
 4215              		.file 12 "/Users/gordon/Documents/soft_proj/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/includ
 4216              		.file 13 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 4217              		.file 14 "<built-in>"
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 102


DEFINED SYMBOLS
                            *ABS*:0000000000000000 printf.c
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:18     .text._out_buffer:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:25     .text._out_buffer:0000000000000000 _out_buffer
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:48     .text._out_null:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:54     .text._out_null:0000000000000000 _out_null
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:72     .text._out_fct:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:78     .text._out_fct:0000000000000000 _out_fct
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:120    .text._atoi:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:126    .text._atoi:0000000000000000 _atoi
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:191    .text._out_rev:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:197    .text._out_rev:0000000000000000 _out_rev
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:322    .text._ntoa_format:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:328    .text._ntoa_format:0000000000000000 _ntoa_format
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:605    .text._ntoa_long:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:611    .text._ntoa_long:0000000000000000 _ntoa_long
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:760    .text._ntoa_long_long:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:766    .text._ntoa_long_long:0000000000000000 _ntoa_long_long
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:950    .text._etoa:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:956    .text._etoa:0000000000000000 _etoa
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:1579   .text._ftoa:0000000000000000 _ftoa
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:1450   .text._etoa:0000000000000300 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:1477   .text._etoa:000000000000035c $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:1573   .text._ftoa:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2140   .text._ftoa:00000000000002e0 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2159   .text._ftoa:0000000000000314 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2229   .text._vsnprintf:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2235   .text._vsnprintf:0000000000000000 _vsnprintf
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2366   .text._vsnprintf:000000000000006e $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2386   .text._vsnprintf:0000000000000094 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2413   .text._vsnprintf:00000000000000b0 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2430   .text._vsnprintf:00000000000000f4 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2683   .text._vsnprintf:00000000000001d4 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:2767   .text._vsnprintf:000000000000027c $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3694   .text._vsnprintf:00000000000006a8 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3699   .text.printf_:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3706   .text.printf_:0000000000000000 printf_
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3764   .text.printf_:0000000000000028 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4137   .text._out_char:0000000000000000 _out_char
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3769   .text.sprintf_:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3776   .text.sprintf_:0000000000000000 sprintf_
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3833   .text.sprintf_:0000000000000028 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3838   .text.snprintf_:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3845   .text.snprintf_:0000000000000000 snprintf_
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3902   .text.snprintf_:0000000000000024 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3907   .text.vprintf_:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3914   .text.vprintf_:0000000000000000 vprintf_
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3952   .text.vprintf_:000000000000001c $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3957   .text.vsnprintf_:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:3964   .text.vsnprintf_:0000000000000000 vsnprintf_
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4005   .text.vsnprintf_:0000000000000018 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4010   .text.fctprintf:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4017   .text.fctprintf:0000000000000000 fctprintf
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4078   .text.fctprintf:000000000000002c $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4083   .text._putchar:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4090   .text._putchar:0000000000000000 _putchar
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4126   .text._putchar:0000000000000018 $d
ARM GAS  /var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s 			page 103


/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4131   .text._out_char:0000000000000000 $t
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4167   .rodata._ftoa.str1.4:0000000000000000 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4178   .rodata.pow10.12097:0000000000000000 $d
/var/folders/3x/w4njr7bn61lgchzhylxd3k6w0000gn/T//ccFEHx9P.s:4182   .rodata.pow10.12097:0000000000000000 pow10.12097

UNDEFINED SYMBOLS
__aeabi_uldivmod
__aeabi_dcmpeq
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
__aeabi_d2iz
__aeabi_ddiv
__aeabi_dcmpge
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dcmple
USART_SendData
USART_GetFlagStatus
